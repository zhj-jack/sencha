/*
 * File: app/store/eng_qualitycheck_reformcheck_job.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('liftnet.store.eng_qualitycheck_reformcheck_job', {
    extend: 'Ext.data.Store',

    requires: [
        'Ext.data.Field'
    ],

    config: {
        storeId: 'eng_qualitycheck_reformcheck_job',
        fields: [
            {
                name: 'jnl'
            },
            {
                name: 'projectname'
            },
            {
                name: 'liftnum'
            },
            {
                name: 'checkednum'
            },
            {
                name: 'checkuser'
            },
            {
                name: 'restates'
            },
            {
                name: 'status'
            },
            {
                name: 'auditcolor'
            },
            {
                name: 'jobcolor'
            },
            {
                name: 'nextstate'
            }
        ]
    },

    loadDat: function(onSuccess, onFailure, parm, action) {
        var me = this;
        if(global.isWorklight()) {
            // adapter取数
            var url = '/adapters/firstcheck/api/1.0/fcdlist';
            var userid = global.getUserId();
            var adapterParm = {
                userid:global.getUserId(),
                curpagenum:parm.curpagenum,
                pagesize:parm.pagesize,
                searchkey:parm.searchkey,
                flowstatus:parm.flowstatus
            };

            callPostAdapter(
                url, adapterParm,
                function(ret) {
                    var info;
                    if(ret.status.code!=200){
                        onFailure('读取派工单列表失败');
                    }else{
                        var resetCurPage = false;
                        if(ret.data.length===0){
                            if(parm.curpagenum===1){
                                switch(action){

                                    case 'loadmore':
                                        break;
                                    case 'refresh':
                                    case 'search':
                                    case 'firstload':
        //                                 me.setData([]);
                                        info = '没有相关派工单';
                                        break;
                                }
                                //onFailure(info);
                                Ext.toast(info);
                                onSuccess(ret.data.length,!resetCurPage,ret.jurisdiction);
                            }else{
                                onFailure('没有更多数据！');
                            }
                            return;
                        }
                        var d = me.decoDat(ret.data);
                        //第一次加载直接设置数据
                        console.log('parm.curpagenum:'+parm.curpagenum);
                        if(parm.curpagenum==1){

                            me.setData(d);
                        }else{
                            //分页用法，在原有数据上继续添加
                            var n = d.length;
                            for(var i=0; i<n; i++) {
                                me.add(d[i]);
                            }
                        }
                        if(action==='loadmore'){
                            //加载更多的时候不需要重置页数
                             onSuccess(ret.data.length,resetCurPage);
        //                               ret.jurisdiction);
                        }else{
                            //其他情况需要将页数重置为1
                             onSuccess(ret.data.length,!resetCurPage,ret.jurisdiction);
                        }
                    }
                },
                function() {
                    var info;
                    var cutOne = false;
                    switch(action){

                        case 'loadmore':
                            info = '加载更多派工单失败';
                            cutOne = true;
                            break;
                        case 'refresh':
                            info = '刷新派工单列表失败';
                            break;
                        case 'search':
                            info = '搜索派工单失败';
                            break;
                    }

                    onFailure(info,cutOne);
                }
            );
        //     // adapter取数
        //     var url = '/adapters/firstcheck/api/1.0/fcdlist';
        //     var userid = global.getUserId();
        //     var adapterParm = {userid:userid};

        //     callPostAdapter(
        //         url, adapterParm,
        //         function(ret) {
        //             if(ret.status.code!=200){
        //                 onFailure('读取派工单列表失败');
        //             }else{
        //                 var d = me.decoDat(ret.data);
        //                 me.setData(d);
        //                 onSuccess();
        //             }
        //         },
        //         function() {
        //             onFailure('读取派工单列表失败');
        //         }
        //         );
        } else {

            var me = this;
            //分页模拟
            var start = (parm.curpagenum-1) * parm.pagesize,
                end = parm.curpagenum * parm.pagesize;
            //         end = end>50?50:end;
            if(end>60){
                onFailure('没有更多数据！',false);
                return;
            }
            if(action=='firstload'||action=='refresh'||action=='search'){
                //模拟刷新，搜索，第一次加载
                //清空数据
                this.setData([]);
            }
            for(var i=start; i<end; i++) {
                var d =me.decoDat([
                    {
                        jnl:'SJ160415001',
                        projectname:'逸翠湾',
                        liftnum:'50',
                        checkednum:i+1,
                        checkuser:'张逸风 黎正盛',
                        status:i%2===0?'新建':'审批中',
                        restates:'未接收',
                        nextstate:[
                            {name:'接收',state:1},
                            {name:'修改',state:2},
                            {name:'删除',state:3}
                            ],
                        auditcolor:'green',
                        jobcolor:'red',
                    }
                ]);
                this.add(d);
            }
            // 演示数据
            if(action=='refresh'||action=='search'||action=='firstload'){
                onSuccess(end - start + 1,true,
                          {
                             addjurisdiction:'Y',
                             updatejurisdiction:'Y'
                          }
                );
            }else{
                onSuccess(end - start + 1,false);
            }
        }
        //     var d = this.decoDat([
        //         {
        //             jnl:'SJ160415001',
        //             projectname:'万科四季花园',
        //             liftnum:'50',
        //             checkednum:'30',
        //             checkuser:'张逸风 黎正盛',
        //             status:'通过',
        //             restates:'未接收',
        //             nextstate:[{name:'接收',state:1},{name:'退回',state:2},{name:'删除',state:3}],
        //             auditcolor:'green',
        //             jobcolor:'red',
        //         },
        //         {
        //             jnl:'SJ160415002',
        //             projectname:'逸翠湾',
        //             liftnum:'80',
        //             checkednum:'45',
        //             checkuser:'张逸风 黎正盛',
        //             status:'通过',
        //             restates:'待审',
        //             nextstate:[{name:'审核',state:4}],
        //             auditcolor:'green',
        //             jobcolor:'red',
        //         },
        //         {
        //             jnl:'SJ160415001',
        //             projectname:'广州恒大御景半岛酒店',
        //             liftnum:'10',
        //             checkednum:'8',
        //             checkuser:'张逸风 黎正盛',
        //             status:'通过',
        //             restates:'已接收',
        //             auditcolor:'green',
        //             nextstate:[{name:'删除',state:3}],
        //             jobcolor:'red',
        //         },
        //         {
        //             jnl:'SJ160415001',
        //             projectname:'广州恒大御景半岛酒店',
        //             liftnum:'10',
        //             checkednum:'8',
        //             checkuser:'张逸风 黎正盛',
        //             status:'通过',
        //             restates:'已退回',
        //             auditcolor:'green',
        //             nextstate:[],
        //             jobcolor:'red',
        //         },
        //     ]);
        //     this.setData(d);

        //         onSuccess();
        //         }
    },

    updateDat: function(onSuccess, onFailure, parm) {

    },

    filteDat: function(parm) {
        this.clearFilter();

                if(parm!=='') {
                    this.filterBy(function(item) {
                        var s = item.get("jnl") + ' ' + item.get("projectname");
                        return (s.toUpperCase().indexOf(parm.toUpperCase())>=0);
                    });
                }
    },

    decoDat: function(data) {
        if(!data) return([]);

        for(var i=0;i<data.length; i++) {
            switch(data[i].status) {
                case '新建':
                    data[i].jobcolor = 'red';
                    break;
                case '待审':
                    data[i].jobcolor = 'red';
                    break;
                case '审批中':
                    data[i].jobcolor = 'blue';
                    break;
                case '通过':
                    data[i].jobcolor = 'green';
                    break;

                case '不通过':
                    data[i].jobcolor = 'orange';
                    break;
            }

            switch(data[i].restates) {
                case '已接收':
                    data[i].auditcolor = 'green';
                    break;
                case '未接收':
                    data[i].auditcolor = 'red';
                    break;
        //         case '不通过':
                case '已退回':
                    data[i].auditcolor = 'orange';
                    break;
            }

        }

        return(data);
    }

});