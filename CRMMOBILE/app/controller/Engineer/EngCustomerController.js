/*
 * File: app/controller/Engineer/EngCustomerController.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('liftnet.controller.Engineer.EngCustomerController', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "container#Customer": {
                initialize: 'onCustomerInitialize'
            },
            "button#Customer_ReturnButton": {
                tap: 'onCustomer_ReturnButtonTap'
            },
            "button#Customer_ReturnButton2": {
                tap: 'onCustomer_ReturnButton2ButtonTap'
            },
            "list#Customer_ListHotline": {
                itemtap: 'onCustomer_ListHotlineTap'
            },
            "panel#EngCustomerDisplay": {
                initialize: 'onEngCustomerDisplayInitialize'
            },
            "button#Customer_Btn": {
                tap: 'onCustomer_BtnTap'
            },
            "button#CustomerStatus_0": {
                tap: 'onCustomerStatus_0Tap'
            },
            "button#CustomerStatus_1": {
                tap: 'onCustomerStatus_1Tap'
            },
            "button#CustomerStatus_2": {
                tap: 'onCustomerStatus_2Tap'
            },
            "button#CustomerStatus_3": {
                tap: 'onCustomerStatus_3Tap'
            },
            "searchfield#Customer_searchkey": {
                change: 'onCustomer_searchkeyChange'
            },
            "button#Customer_Add": {
                tap: 'onCustomer_AddTap'
            },
            "panel#EngCustomerAdd": {
                initialize: 'onEngCustomerAddInitialize'
            },
            "button#Customer_linker_add": {
                tap: 'onCustomer_linker_addTap'
            },
            "textareafield#Customer_add_flowuserStr": {
                tap: 'onCustomer_flowuserStrTap'
            },
            "textfield#Customer_add_r7": {
                tap: 'onCustomer_add_r7Tap'
            },
            "selectfield#Customer_add_r8": {
                change: 'onCustomer_r8Change'
            },
            "textfield#Customer_add_phone": {
                change: 'onCustomer_phoneChange'
            },
            "textfield#Customer_add_postno": {
                change: 'onCustomer_postnoChange'
            },
            "textfield#Customer_add_fax": {
                change: 'onCustomer_faxChange'
            },
            "textfield#Customer_add_custname": {
                blur: 'onCustomer_add_custnameBlur'
            },
            "button#Customer_SaveBtn": {
                tap: 'onCustomer_SaveBtnTap'
            },
            "button#linker_SaveBtn": {
                tap: 'onlinker_SaveBtnTap'
            },
            "textfield#linker_mbphone": {
                change: 'onlinker_mbphoneChange'
            },
            "list#Customer_linker_list": {
                itemtap: 'onCustomer_linker_listTap'
            },
            "panel#EngCustomerLinker": {
                initialize: 'onEngCustomerLinkerInitialize'
            }
        }
    },

    onCustomerInitialize: function(component, eOpts) {
        var me = this;

        customerCurPage = 0;
        pagesize = 20;

        updatejurisdiction = false;
        deletejueisdiction = false;

        var searchkey = Ext.getCmp('Customer_searchkey').getValue();

        Ext.getCmp('Customer_ListHotline').getStore().removeAll();

        // 初始化下拉刷新、滑动按钮插件
        var faultList = Ext.getCmp('Customer_ListHotline');
        faultList.setPlugins(
            [
                {
                    autoSnapBack: false,
                    lastUpdatedText: '上次刷新:&nbsp;',
                    loadedText: '已刷新',
                    loadingText: '正在刷新客户维护...',
                    pullText: '下拉刷新...',
                    releaseText: '放开开始刷新...',
                    type: 'pullrefresh',
                    listeners : {
                        latestfetched : function() {
        //                     faultCurPage=1;
                            me.doCustomer_LoadList(
                                1,
                                pagesize,
                                searchkey,
                                'refresh'
                            );
                        }
                    }
                },
                // 以下滑动按钮插件应从EngHomeController的onEngHomeInitial()中复制！
                {
                    xclass: 'ux.SlideActions',
                    openPosition: 150,
                    buttons:
                    [
                        // 按钮1
                        {
                            xtype: 'button',
                            baseCls: 'x-button liftnet-list-button liftnet-bgColor-blue',
                            text: '修改',
                            initial: function(btn) {
                                //初始化滑动按钮
                               btn.hidden = updatejurisdiction;
                            },
                            listeners: {
                                tap: function(button, e){
                                    e.stopPropagation();
                                    return false;
                                },
                                scope: this
                            },
                            handler: function(button, e) {
                                faultList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                liftnet.app.getController('Engineer.EngCustomerController').
                                doCustomer_Process({
                                    record: button.getRecord(),
                                    operation: '修改'
                                });
                            },
                            width:200
                        },
                        // 按钮2
                        {
                            xtype: 'button',
                            baseCls: 'x-button liftnet-list-button liftnet-bgColor-red',
                            text: '删除',
                            initial: function(btn) {
                                //初始化滑动按钮
                               btn.hidden = deletejueisdiction;
                            },
                            listeners: {
                                tap: function(button, e){
                                    e.stopPropagation();
                                    return false;
                                },
                                scope: this
                            },
                            handler: function(button, e) {
                                faultList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                liftnet.app.getController('Engineer.EngCustomerController').
                                doCustomer_Process({
                                    record: button.getRecord(),
                                    operation: '删除'
                                });
                            }
                        }
                    ]
                }
            ]
        );


        //监听滑动结束事件
        var faultScroller = faultList.getScrollable().getScroller();
        faultScroller.on('scrollend',function(scroll, x, y, eOpts){
            if(customerCurPage===0){
                return;
             }
            //滑动到底部加载更多
            if(y+faultScroller.getContainerSize().y==faultScroller.getSize().y){
                console.log('loadmore');
                loadMask.show();
                var scrollparm = {
                    scroller:faultScroller,
                    x:x,
                    y:y+80//Item的高度+Tpl样式中各种边距
                };
                var keyword = Ext.getCmp('Customer_searchkey').getValue();
                if(!keyword){
                    keyword='';
                }
                me.doCustomer_LoadList(
                    ++customerCurPage,
                    pagesize,
                    keyword,
                    'loadmore',
                    scrollparm);
            }
        });

        me.doCustomer_LoadList(
                                1,
                                pagesize,
                                searchkey,
                                'refresh'
                            );

    },

    onCustomer_ReturnButtonTap: function(button, e, eOpts) {
        //返回上页
        viewUtil.goLast();
    },

    onCustomer_ReturnButton2ButtonTap: function(button, e, eOpts) {
        //返回上页
        //先删除联系人STORE
        Ext.getCmp('Customer_linker_list').getStore().removeAll();

        viewUtil.goLast();
    },

    onCustomer_ListHotlineTap: function(dataview, index, target, record, e, eOpts) {
        viewUtil.goNext('Engineer.EngCustomerDisPlay', {record: record});
    },

    onEngCustomerDisplayInitialize: function(component, eOpts) {
        //初始化客户查看信息
        loadMask.show();

        var me = this;
        var userid = global.getUserId();
        var now = Ext.Date.format(new Date(), 'Y-m-d H:i');
        var position = map.getLocation().addr;
        if(!position || position==='') position = '(未知位置)';

        var taskrecord = component.initialConfig.parm.record;
        var custid = taskrecord.get('custid'); // 客户编号

        // 初始化下拉选择项目
        //dataUtil.createStore('common_sxsourcelist').loadDat(Ext.emptyFn,Ext.emptyFn);
        //dataUtil.createStore('common_getdeptlist').loadDat(Ext.emptyFn,Ext.emptyFn);

        // 取出客户明细数据
        var store = dataUtil.createStore('cu_cudetail');
        store.loadDat(
            function() {
                // 显示受信单数据
                var record = store.getData().get(0);
                console.log('----后台获取信息start----');
                console.log(record);
                console.log('----后台获取信息end----');


                Ext.getCmp('EngCustomerForm').setRecord(record);

                if(record.get('r8')=='Y'){
                    Ext.getCmp('EngCustomerForm').setValues({'r8':'已装'});
                }else{
                    Ext.getCmp('EngCustomerForm').setValues({'r8':'未装'});
                }



                var linkerbean = record.get('linkerbean');
                console.log(linkerbean);
                var linkerStr = '';
                if(linkerbean.length>0){
                    for(var i=0;i<linkerbean.length;i++){
                        if(i!==0){
                           linkerStr +=',';
                        }
                        linkerStr += linkerbean[i].contractman;
                    }
                }
                var flowuserlist = record.get('flowuserlist');
                console.log(flowuserlist);
                var flowuserStr = '';
                if(flowuserlist.length>0){
                    for(var j=0;j<flowuserlist.length;j++){
                        if(j!==0){
                            flowuserStr+=',';
                        }
                        flowuserStr += flowuserlist[j].flowuser+'('+flowuserlist[j].storagename+')';
                    }
                }

                Ext.getCmp('Customer_Levele').setHtml(record.get('levelename'));

                Ext.getCmp('EngCustomerForm').setValues({
                        linkerStr:	linkerStr,
                        flowuserStr: flowuserStr,
                        custname: record.get('cstname'),
                        createname: record.get('createname')+'('+record.get('createdept')+')'

                    });

                loadMask.hide();
            },
            function() {
                loadMask.hide();
                Ext.toast('读取客户资料失败！');
                viewUtil.goLast();
            },
            custid
        );

    },

    onCustomer_BtnTap: function(button, e, eOpts) {
         //客户维护-客户级别筛选按钮
        popMenu.show('Engineer.EngCustomerStatus', button);
    },

    onCustomerStatus_0Tap: function(button, e, eOpts) {
        // 全部
        this.doEngCustomerFilter(button.getText());
    },

    onCustomerStatus_1Tap: function(button, e, eOpts) {
        // 重点客户
        this.doEngCustomerFilter(button.getText());
    },

    onCustomerStatus_2Tap: function(button, e, eOpts) {
        // 普通客户
        this.doEngCustomerFilter(button.getText());
    },

    onCustomerStatus_3Tap: function(button, e, eOpts) {
        // 非优先客户
        this.doEngCustomerFilter(button.getText());
    },

    onCustomer_searchkeyChange: function(textfield, newValue, oldValue, eOpts) {
        var Custome_Search = textfield.getValue();
        if(!Custome_Search||Custome_Search===''){
            Custome_Search = '';
        //     return;
        }
        //联网搜索
        // faultCurPage = 1;
        this.doCustomer_LoadList(1,20,Custome_Search,'refresh');
        // Ext.getCmp('EngFault_ListHotline').getStore().filteDat(Enfault_Search);
    },

    onCustomer_AddTap: function(button, e, eOpts) {
        // Ext.toast('客户新建功能正在开发中'+'<br><br>'+'敬请期待！');
        viewUtil.goNext('Engineer.EngCustomerAdd');
    },

    onEngCustomerAddInitialize: function(component, eOpts) {
        var me = this;

        // 初始化下拉选择项目
        dataUtil.createStore('common_getdeptlist').loadDat(Ext.emptyFn,Ext.emptyFn);
        dataUtil.createStore('cu_levelist').loadDat(Ext.emptyFn,Ext.emptyFn,{userid:global.getUserId()});
        dataUtil.createStore('cu_typelist').loadDat(Ext.emptyFn,Ext.emptyFn,{userid:global.getUserId()});

        Ext.getCmp('Customer_linker_list').getStore().removeAll();

        //初始化联系人列表滑动效果
        var linkerList = Ext.getCmp('Customer_linker_list');
        linkerList.setPlugins(
            [
                {
                    xclass: 'ux.SlideActions',
                    openPosition: 75,
                    buttons:
                    [
                        // 删除按钮
                        {
                            xtype: 'button',
                            baseCls: 'x-button liftnet-list-button liftnet-bgColor-red',
                            text: '<i class="fa fa-lg fa-trash-o"></i>',
                            listeners: {
                                tap: function(button, e){
                                    e.stopPropagation();
                                    return false;
                                },
                                scope: this
                            },
                            handler: function(button, e) {
                                linkerList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                linkerList.getStore().remove(button.getRecord());
                            }
                        }
                    ]
                }
            ]
        );



        if(component.initialConfig.parm){
            if(component.initialConfig.parm.record) {//修改
                Ext.getCmp('Customer_Title').setTitle('修改客户维护');
                var custid = component.initialConfig.parm.record.get('custid');
                console.log(custid);

                // 取出客户明细数据
                loadMask.show();
                var store = dataUtil.createStore('cu_cudetail');
                store.loadDat(
                    function() {
                        // 显示受信单数据
                        var record = store.getData().get(0);
                        console.log('----后台获取信息start----');
                        console.log(record);
                        console.log('----后台获取信息end----');

                        Ext.getCmp('Customer_Info_form').setRecord(record);

                        var linkerbean = record.get('linkerbean');
                        console.log(linkerbean);
                        Ext.getCmp('Customer_linker_list').getStore().add(linkerbean);

                        //处理跟进人数据
                        var flowuserStr = '';
                        var flowuserID = '';
                        var flowuserlist =record.get('flowuserlist');
                        if(flowuserlist!=null && flowuserlist.length>0){
                            for(var i=0;i<flowuserlist.length;i++){
                                var flowuserid = flowuserlist[i].flowuserid; //跟进人ID
                                var storageid = flowuserlist[i].storageid;	//部门ID
                                var flowuser = flowuserlist[i].flowuser;	//跟进人姓名
                                var storagename = flowuserlist[i].storagename;	//部门名

                                if(i!==0){
                                    flowuserStr +=',';
                                    flowuserID +=',';
                                }

                                flowuserStr += flowuser+'('+storagename+')';
                                flowuserID += flowuserid+'#'+storageid;

                            }
                        }

                        Ext.getCmp('Customer_add_flowuserStr').setValue(flowuserStr);
                        Ext.getCmp('Customer_add_flowuserID').setValue(flowuserID);



                        Ext.getCmp('Customer_Info_form').setValues({
                                custname: record.get('cstname'),
                                oldCustname: record.get('cstname')
                            });

                        loadMask.hide();
                    },
                    function() {
                        loadMask.hide();
                        Ext.toast('读取客户资料失败！');
                        viewUtil.goLast();
                    },
                    custid
                );

            }
        }

    },

    onCustomer_linker_addTap: function(button, e, eOpts) {
        //添加联系人按钮


        viewUtil.goNext('Engineer.EngCustomerLinker',{});
    },

    onCustomer_flowuserStrTap: function(textareafield) {
        //跟进人
        var tpl =
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{class1}</div>' +
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{username}({storagename})</div>' ;

        viewUtil.goNext('Common.ComMultiSelect', {
            textfield: textareafield,
            storeid: 'cu_flowuserlist',
            storeparm: {
                userid: global.getUserId(),
                searchname: '',
                curpagenum: 1,
                pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: false,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.searchname = text;
                return parm;
            },
            fnSelected: function(record) {
                console.log(record);
                if(typeof(record)==='string') {
                    console.log('---------');
                } else {
                    var flowuserStr = '';
                    var flowuserID = '';
                    for(var i = 0; i < record.length; i++){
                        if(i!==0){
                            flowuserStr +=',';
                            flowuserID +=',';
                        }
                        flowuserStr += record[i].get('username')+'('+record[i].get('storagename')+')';
                        flowuserID += record[i].get('userid')+'#'+record[i].get('storageid');

                    }
                    Ext.getCmp('Customer_Info_form').setValues({
                        flowuserStr: flowuserStr,

                    });

                    Ext.getCmp('Customer_add_flowuserID').setValue(flowuserID);
                }
            }
        });
        textareafield.blur();

    },

    onCustomer_add_r7Tap: function(textfield) {
        //上级单位
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{custname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'cu_culist',
            storeparm: {
                userid: global.getUserId(),
                searchkey: '',
                flowstatus:'%',
                curpagenum: 1,
                pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: false,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('custname');
                    textfield.setValue(value);
                    Ext.getCmp('Customer_add_r6').setValue(record.get('custid'));
                }
            }
        });
        textfield.blur();
    },

    onCustomer_r8Change: function(selectfield, newValue, oldValue, eOpts) {
        if(newValue==oldValue) return;

        if(newValue==='Y'){
            Ext.getCmp('Customer_add_licensenumber').setRequired(true);
            Ext.getCmp('Customer_add_r9').setRequired(true);
            Ext.getCmp('Customer_add_r9').setReadOnly(false);

        }else{
            Ext.getCmp('Customer_add_licensenumber').setRequired(false);
            Ext.getCmp('Customer_add_r9').setRequired(false);
            Ext.getCmp('Customer_add_r9').setReadOnly(true);

            //清空数据
            Ext.getCmp('Customer_add_licensenumber').setValue('');
            Ext.getCmp('Customer_add_r9').setValue('');

        }
    },

    onCustomer_phoneChange: function(textfield, newValue, oldValue, eOpts) {
        //公司联络电话
        if(!newValue) return;

        if(!global.isTelNo(newValue)) {
            textfield.suspendEvents();
            Ext.toast('电话号码格式不正确！');
            textfield.resumeEvents(false);
            return;
        }
    },

    onCustomer_postnoChange: function(textfield, newValue, oldValue, eOpts) {
        //邮政编码
        if(!newValue) return;

        if(!newValue.match(/^[0-9]{6}$/)){
            textfield.suspendEvents();
            Ext.toast('邮政编码格式不正确！');
            textfield.resumeEvents(false);
        }
    },

    onCustomer_faxChange: function(textfield, newValue, oldValue, eOpts) {
        //传真
        if(!newValue) return;

        if(!newValue.match(/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/)){
            textfield.suspendEvents();
            Ext.toast('传真格式不正确！');
            textfield.resumeEvents(false);
        }
    },

    onCustomer_add_custnameBlur: function(textfield, e, eOpts) {
        //后台检测该客户是否存在
        var custname = textfield.getValue();
        var oldCustname = Ext.getCmp('Customer_add_oldCustname').getValue();

        if(!custname || custname==oldCustname) return;


        var parm = {
            userid : global.getUserId(),
            custname : custname
        };

        var store = dataUtil.createStore('cu_checkcustname');
        loadMask.show();

        store.updateDat(
            function(status) {
                loadMask.hide();
                if(status=='1') {

                }else{
                    Ext.Msg.alert('注意', '该客户名称已存在',Ext.emptyFn);
                    textfield.setValue('');
                    textfield.focus();
                }
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('检测客户名称唯一性操作有误，错误信息是：' + info);
            },
            parm
        );




    },

    onCustomer_SaveBtnTap: function(button, e, eOpts) {
        //客户新建/修改保存

        this.doCustomer_Save(button.getText());

    },

    onlinker_SaveBtnTap: function(button, e, eOpts) {
        //客户联系人保存
        var data = Ext.getCmp('Customer_linker_form').getValues();
        if(!data.contractman ||  data.contractman==='' ) {
            Ext.toast('请输入联系人！');
            return;
        }
        if(!data.mbphone ||  data.mbphone==='' ) {
            Ext.toast('请输入电话！');
            return;
        }

        var linker_index = Ext.getCmp('linker_index').getValue();
        console.log(linker_index);

        if(linker_index!=''){
            Ext.getCmp('Customer_linker_list').getStore().getAt(linker_index).set(data);
        }else{
            Ext.getCmp('Customer_linker_list').getStore().add(data);
        }
        viewUtil.goLast();
    },

    onlinker_mbphoneChange: function(textfield, newValue, oldValue, eOpts) {
        //联系人电话
        if(!newValue) return;

        if(!global.isTelNo(newValue)) {
            textfield.suspendEvents();
            textfield.setValue(oldValue);
            Ext.toast('电话号码格式不正确！');
            textfield.resumeEvents(false);
        }
    },

    onCustomer_linker_listTap: function(dataview, index, target, record, e, eOpts) {
        viewUtil.goNext('Engineer.EngCustomerLinker',{record:record,index:index});
    },

    onEngCustomerLinkerInitialize: function(component, eOpts) {
        var taskrecord = component.initialConfig.parm.record;
        var index = component.initialConfig.parm.index;
        console.log(index+'____');

        if(taskrecord){
            Ext.getCmp('Customer_linker_form').setRecord(taskrecord);
        }
        if(index!==undefined){
            Ext.getCmp('linker_index').setValue(index);
        }
    },

    doCustomer_LoadList: function(page, pagesize, searchkey, action, scrollparm) {
        //客户维护标签页 - 客户维护列表刷新

        if(Ext.getCmp('Customer_ListHotline')){

            var flowstatus = '';
        var flowstatusT = Ext.getCmp('Customer_Btn').getText();
        switch(flowstatusT){
            case '全部':
                flowstatus='%';
                break;
            case '重点客户':
                flowstatus='A';
                break;
            case '普通客户':
                flowstatus='B';
                break;
            case '非优先客户':
                flowstatus='C';
                break;

        }

        if(searchkey==='')
            searchkey = Ext.getCmp('Customer_searchkey').getValue();

        var parm = {
            userid: global.getUserId(),
            curpagenum:page,
            pagesize:pagesize,
            searchkey:searchkey,
            flowstatus:flowstatus
        };

        console.log('----传到后台的参数----');
        console.log(parm);
        console.log('----传到后台的参数----');

        Ext.getCmp('Customer_ListHotline').getStore().loadDat(
            function(n,jurisdiction) {
                if(scrollparm){
                     scrollparm.scroller.scrollTo(scrollparm.x,scrollparm.y);
                     loadMask.hide();
                }
                if(n==='resetCurPage'){
                    customerCurPage = 1;
                }

                //新建权限
                var addjurisdiction = jurisdiction.addjurisdiction=='N';
                Ext.getCmp('Customer_Add').setHidden(addjurisdiction);

                updatejurisdiction = jurisdiction.updatejurisdiction=='N';
                deletejueisdiction = jurisdiction.deletejueisdiction=='N';

                console.log('客户列表搜索完成!');
            },
            function(info) {
                Ext.toast(info);
                if(info==='加载更多客户数据失败'){
                    customerCurPage--;
                }
                if(info==='没有更多数据！'){
                    customerCurPage = 0;//没有更多数据的时候重置页数为0，不触发上拉事件
                }
        //         if(faultCurPage!=1){
        //              faultCurPage--;//获取数据失败页数减一
        //         }
                loadMask.hide();
            },
            parm,
            action
        );
        }
    },

    doEngCustomerFilter: function(filter) {
        popMenu.getShowBy().setText(filter);
        popMenu.hide();
        var searchkey = Ext.getCmp('Customer_searchkey').getValue();
        this.doCustomer_LoadList(1,20,searchkey,'refresh');
    },

    doCustomer_Process: function(parm) {
        //客户修改/删除 入口
        var me = this;
        var operation = parm.operation;
        var record = parm.record;

        switch(operation) {
            case '修改':

                viewUtil.goNext('Engineer.EngCustomerAdd',{record:record});

                break;
            case '删除':
                    Ext.Msg.confirm("注意", "确认是否删除？", function(n) {
                    if(n=='no')return;

                    var userid = global.getUserId();

                    var adapter_parm = {
                        userid : userid,
                        custid  : record.get('custid')
                    };
                    var store = dataUtil.createStore('cu_cuscens');
                    loadMask.show();
                    store.deleteDat(
                        function(info) {
                            loadMask.hide();

                            Ext.toast(info);

                            // 刷新电梯档案列表
                            me.doCustomer_LoadList(1,20,'','refresh');

                        },
                        function(info) {
                            loadMask.hide();
                            if(!info) info = '(未知)';
                            Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                        },
                        adapter_parm
                    );

                });
                return;

            default:
                Ext.toast('未知的操作:' + operation);
                return;
        }



    },

    doCustomer_Save: function(action) {
        var me  = this;
        var form = Ext.getCmp('Customer_Info_form');
        var client = form.getValues();


        // 检查必填项目
        var fields = form.getFields();
        for(var name in fields) {
          field = fields[name];
          if(field.getRequired() && field.getValue()==='') {
              Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
              return;
          }
        }

        //验证邮政编码
        var postno = Ext.getCmp('Customer_add_postno').getValue();
        if(postno!=''){
            if(!postno.match(/^[0-9]{6}$/)){
                Ext.toast('邮政编码格式不正确！');
                return;
            }
        }

        //验证公司联络电话
        var phone = Ext.getCmp('Customer_add_phone').getValue();
        if(phone!=''){
            if(!global.isTelNo(phone)) {
                Ext.toast('电话号码格式不正确！');
                return;
            }
        }

        //验证传真
        var fax = Ext.getCmp('Customer_add_fax').getValue();
        if(fax!=''){
            if(!fax.match(/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/)){
                Ext.toast('传真格式不正确！');
                return;
            }
        }


        client.mugaddress = '';//保养电梯地址
        client.creatorid = global.getUserId();//创建人ID


        //处理跟进人
        var flowuserJSON = [];
        var flowuserIDS = Ext.getCmp('Customer_add_flowuserID').getValue();
        if(flowuserIDS){
            var floruserid = flowuserIDS.split(',');
            if(floruserid.length>0){
                for(var i=0;i<floruserid.length;i++){
                    var flowuserid = floruserid[i].split('#')[0];
                    var storageid = floruserid[i].split('#')[1];
                    flowuserJSON[i] = {
                        flowuserid  : flowuserid,
                        storageid	: storageid,
                        remark		: ''
                    };
                }
            }
        }
        console.log(flowuserJSON);
        client.flowuserlist = flowuserJSON;


        //处理联系人
        var linkerList = [];
        var linkerStore = Ext.getCmp('Customer_linker_list').getStore();
        linkerStore.getData().each(function(r) {
            linkerList.push({
                contractman: r.get('contractman'),
                mbphone: r.get('mbphone'),
                ob1: r.get('ob1'),
                othercontact:	r.get('othercontact'),
                remail:	r.get('remail')
            });
        });
        client.linkerbean = linkerList;

        var parm = {
            userid: global.getUserId(),
            client: client
        };
        console.log(parm);
        var store = dataUtil.createStore('cu_cuscens');
        loadMask.show();

        store.updateDat(
            function() {
                loadMask.hide();
                Ext.toast(action + '操作完成！');

                //刷新列表
                me.doCustomer_LoadList(1,20,'','refresh');
                viewUtil.goLast();
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('未能完成' + action + '操作，错误信息是：' + info);
            },
            parm
        );




    }

});