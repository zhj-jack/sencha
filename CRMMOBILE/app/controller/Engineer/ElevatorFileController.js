/*
 * File: app/controller/Engineer/ElevatorFileController.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('liftnet.controller.Engineer.ElevatorFileController', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "panel#EngElevatorFile": {
                initialize: 'onEngElevatorFileInitialize'
            },
            "button#EngElevatorFile_BtnReturn": {
                tap: 'onEngElevatorFile_BtnReturnTap'
            },
            "searchfield#EngElevatorFile_Search": {
                change: 'onEngElevatorFile_SearchChange'
            },
            "list#EngElevatorFile_List": {
                itemtap: 'onEngElevatorFile_ListItemTap'
            },
            "button#EngElevatorFile_NewBtn": {
                tap: 'onEngElevatorFile_NewBtnTap'
            },
            "button#ElevatorFile_BtnReturn": {
                tap: 'onElevatorFile_BtnReturnTap'
            },
            "button#ElevatorFile_SaveBtn": {
                tap: 'onElevatorFile_SaveBtnTap'
            },
            "textfield#ElevatorFile_typeid": {
                tap: 'onElevatorFile_typeidTap'
            },
            "panel#EngElevatorFile_Add": {
                initialize: 'onEngElevatorFile_AddInitialize'
            },
            "textfield#ElevatorFile_r1": {
                tap: 'onElevatorFile_r1Tap'
            },
            "textfield#ElevatorFile_elevatorid": {
                tap: 'onElevatorFile_elevatoridTap'
            },
            "selectfield#ElevatorFile_contype": {
                change: 'onElevatorFile_contypeChange'
            },
            "textfield#ElevatorFile_zzl": {
                change: 'onElevatorFile_zzlChange'
            },
            "textfield#ElevatorFile_speed": {
                change: 'onElevatorFile_speedChange'
            },
            "textfield#Elevator_high": {
                change: 'onElevator_highChange'
            },
            "textfield#ElevatorFile_fwlc": {
                change: 'onElevatorFile_fwlcChange'
            },
            "textfield#ElevatorFile_floor": {
                change: 'onElevatorFile_floorChange'
            },
            "textfield#ElevatorFile_stage": {
                change: 'onElevatorFile_stageChange'
            },
            "textfield#Elevator_door": {
                change: 'onElevator_doorChange'
            },
            "textfield#ElevatorFile_projectname": {
                tap: 'onElevatorFile_projectnameTap'
            },
            "textfield#ElevatorFie_r2": {
                tap: 'onElevatorFie_r2Tap'
            },
            "panel#EngElevatorFile_Map": {
                initialize: 'onEngElevatorFile_MapInitialize',
                destroy: 'onEngElevatorFile_MapDestroy'
            },
            "textfield#ElevatorFile_domainidStr": {
                tap: 'onElevatorFile_domainidStrTap'
            },
            "textfield#ElevatorFile_provinciallevelidStr": {
                tap: 'onElevatorFile_provinciallevelidStrTap'
            },
            "textfield#ElevatorFile_citylevelidStr": {
                tap: 'onElevatorFile_citylevelidStrTap'
            },
            "textfield#ElevatorFile_countylevelidStr": {
                tap: 'onElevatorFile_countylevelidStrTap'
            },
            "button#ElevatorFile_Camera": {
                tap: 'onElevatorFile_CameraTap'
            },
            "button#ElevatorFile_Album": {
                tap: 'onElevatorFile_AlbumTap'
            },
            "panel#EngElevatorFile_Photo": {
                initialize: 'onEngElevatorFile_PhotoInitialize'
            },
            "button#ElevatorFile_PhotoSave": {
                tap: 'onElevatorFile_PhotoSaveTap'
            },
            "button#ElevatorFile_DelBtn": {
                tap: 'onElevatorFile_DelBtnTap'
            },
            "image#ElevatortFile_photo": {
                tap: 'onElevatortFile_photoTap'
            },
            "image#ElevatorFile_Photo_camera": {
                tap: 'onElevatorFile_Photo_cameraTap'
            },
            "textfield#ElevatorFile_prono": {
                blur: 'onElevatorFile_pronoFocus'
            },
            "selectfield#ElevatorFile_typeid": {
                change: 'onElevatorFile_typeidChange'
            },
            "textfield#ElevatorFile_r9": {
                change: 'onElevatorFile_r9Change'
            },
            "textfield#ElevatorFile_controlnum": {
                change: 'onElevatorFile_controlnumChange'
            },
            "datepickerfield#ElevatorFile_r7": {
                change: 'onElevatorFile_r7Change'
            },
            "datepickerfield#ElevatorFile_speedcheckdate": {
                change: 'onElevatorFile_speedcheckdateChange'
            },
            "textfield#ElevatorFile_userlinkphone": {
                change: 'onElevatorFile_userlinkphoneChange'
            },
            "textfield#ElevatorFile_r5": {
                change: 'onElevatorFile_userlinkphoneChange1'
            }
        }
    },

    onEngElevatorFileInitialize: function(component, eOpts) {
        var me = this;
        var elevatorList = Ext.getCmp('EngElevatorFile_List');
        elevatorList.getStore().removeAll();
        curPage = 0;//全局变量
        pagesize = 20;

        updatejurisdiction = false;//修改权限
        deletejueisdiction = false;//删除权限





        elevatorList.setPlugins(
            [
                {
                    autoSnapBack: false,
                    lastUpdatedText: '上次刷新:&nbsp;',
                    loadedText: '已刷新',
                    loadingText: '正在刷新电梯档案...',
                    pullText: '下拉刷新...',
                    releaseText: '放开开始刷新...',
                    type: 'pullrefresh',
                    listeners : {
                        latestfetched : function() {

                            me.doEngElevatorFile_Search(
                            1, pagesize, {searchkey:Ext.getCmp('EngElevatorFile_Search').getValue()},
                                'refresh');
                        }
                    }
                },
                // 以下滑动按钮插件应从EngHomeController的onEngHomeInitial()中复制！
                {
                    xclass: 'ux.SlideActions',
                    openPosition: 150,
                    buttons:
                    [
                        // 按钮1
                        {
                            xtype: 'button',
                            baseCls: 'x-button liftnet-list-button liftnet-bgColor-blue',
                            text: '修改',
                            initial: function(btn) {
                                //初始化滑动按钮
                                me.doInitialNextStateButton(btn);
                            },
                            listeners: {
                                tap: function(button, e){
                                    e.stopPropagation();
                                    return false;
                                },
                                scope: this
                            },
                            handler: function(button, e) {
                                elevatorList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                liftnet.app.getController('Engineer.ElevatorFileController').
                                doElevatorFile_Process({
                                    record: button.getRecord(),
                                    operation: '修改'
                                });
                            },
                            width:200
                        },
                        // 按钮2
                        {
                            xtype: 'button',
                            baseCls: 'x-button liftnet-list-button liftnet-bgColor-red',
                            text: '删除',
                            initial: function(btn) {
                                //初始化滑动按钮
                                me.doInitialNextStateButton(btn);
                            },
                            listeners: {
                                tap: function(button, e){
                                    e.stopPropagation();
                                    return false;
                                },
                                scope: this
                            },
                            handler: function(button, e) {
                                elevatorList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                liftnet.app.getController('Engineer.ElevatorFileController').
                                doElevatorFile_Process({
                                    record: button.getRecord(),
                                    operation: '删除'
                                });
                            }
                        }
                    ]
                }
            ]
        );

        //监听滑动结束事件
        var scroller = elevatorList.getScrollable().getScroller();
        scroller.on('scrollend',function(scroll, x, y, eOpts){
            if(curPage===0){
                return;
            }
            //滑动到底部加载更多
            if(y+scroller.getContainerSize().y==scroller.getSize().y){
                loadMask.show();
                var scrollparm = {
                    scroller:scroller,
                    x:x,
                    y:y+80//Item的高度
                };
                if(!Ext.getCmp('EngElevatorFile_Search')){
                    loadMask.hide();
                    return;
                }
                var searchkeyParm = {
                    //关键字
                    searchkey:Ext.getCmp('EngElevatorFile_Search').getValue(),
                };
                me.doEngElevatorFile_Search(
                    ++curPage,
                    pagesize,
                    searchkeyParm,
                    'loadmore',
                    scrollparm
                );
            }
        });

        //初始化加载数据
        me.doEngElevatorFile_Search(
                            1, pagesize, {searchkey:Ext.getCmp('EngElevatorFile_Search').getValue()},
                                'refresh');

    },

    onEngElevatorFile_BtnReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngElevatorFile_SearchChange: function(textfield, newValue, oldValue, eOpts) {

        this.doEngElevatorFile_Search(1,pagesize,{searchkey:newValue},'search');
    },

    onEngElevatorFile_ListItemTap: function(dataview, index, target, record, e, eOpts) {
        if(!record.get('prono')){
            Ext.toast('电梯注册码为空</br></br>无法查看相关电梯档案');
            return;
        }
        viewUtil.goNext('Engineer.EngMonitorElevatorInfo',{prono:record.get('prono')});
    },

    onEngElevatorFile_NewBtnTap: function(button, e, eOpts) {
        //Ext.toast('电梯档案录入功能正在开发中</br></br>敬请期待！');

        // 右上角新增电梯按钮
        viewUtil.goNext('Engineer.EngElevatorFile_Add');


    },

    onElevatorFile_BtnReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onElevatorFile_SaveBtnTap: function(button, e, eOpts) {
        //电梯档案操作

        this.doEneElevatorFile_Save(button.getText());


    },

    onElevatorFile_typeidTap: function(textfield) {
        //电梯分类
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{typename}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_lifttypelist',
            storeparm: {
                userid: global.getUserId()
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: Ext.emptyFn,
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('typename');
                    textfield.setValue(value);
                }
            }
        });
        textfield.blur();
    },

    onEngElevatorFile_AddInitialize: function(component, eOpts) {
        var me = this;
        var form = Ext.getCmp('ElevatorFile_Info_Form');
        loadMask.show();

        // 初始化下拉选择项目
        dataUtil.createStore('eng_placelist').loadDat(Ext.emptyFn,Ext.emptyFn);
        dataUtil.createStore('eng_lifttypelist').loadDat(Ext.emptyFn,Ext.emptyFn);
        dataUtil.createStore('eng_kmfslist').loadDat(Ext.emptyFn,Ext.emptyFn);
        dataUtil.createStore('eng_kzfslist').loadDat(Ext.emptyFn,Ext.emptyFn);




        if(component.initialConfig.parm){
            if(component.initialConfig.parm.record) {//修改
                var prono = component.initialConfig.parm.record.get('prono');

                Ext.getCmp('ELevatorFile_Tbr').setTitle('修改电梯档案');

                var store = dataUtil.createStore('eng_elevatorinfo');

                store.loadDat(
                    function() {
                        loadMask.hide();
                        form.setRecord(store.getAt(0));
                        console.log(store.getAt(0).get('domainidstr'));

                        form.setValues({
                            r1name: store.getAt(0).get('facname'),
                            r12name: store.getAt(0).get('projectname'),
                            r12: store.getAt(0).get('projectid'),

                            leafacdate : (store.getAt(0).get('leafacdate')==''||!store.getAt(0).get('leafacdate'))?'':new Date(store.getAt(0).get('leafacdate')),
                            r7 : (store.getAt(0).get('r7')==''||!store.getAt(0).get('r7'))?'': new Date(store.getAt(0).get('r7')),
                            r8 : (store.getAt(0).get('r8')==''||!store.getAt(0).get('r8'))?'': new Date(store.getAt(0).get('r8')),
                            finishdate : (store.getAt(0).get('finishdate')==''||!store.getAt(0).get('finishdate'))?'': new Date(store.getAt(0).get('finishdate')),
                            firstuseliftdate : (store.getAt(0).get('firstuseliftdate')==''||!store.getAt(0).get('firstuseliftdate'))?'':new Date(store.getAt(0).get('firstuseliftdate')),
                            speedcheckdate : (store.getAt(0).get('speedcheckdate')==''||!store.getAt(0).get('speedcheckdate'))?'':new Date(store.getAt(0).get('speedcheckdate')),
                            speednextcheckdate : (store.getAt(0).get('speednextcheckdate')==''||!store.getAt(0).get('speednextcheckdate'))?'':new Date(store.getAt(0).get('speednextcheckdate')),

                        });



                        Ext.getCmp('ElevatorFile_NowProno').setValue(store.getAt(0).get('prono'));

                        var imagefile = store.getAt(0).get('imagefile');//附件JSON
                        if(imagefile!==null&&imagefile.length>0){
                            for(var z=0;z<imagefile.length;z++){
                                var index = z+1;
                                var ImgID = 'ElevatortFile_Photo_'+index;
                                var RemarkID = 'ElevatorFile_Remark_'+index;
                                var pictureBase64 = imagefile[z].file;
                                var Remark = imagefile[z].remark;
                                var ImgSrc = 'data:image/jpeg;base64,' +pictureBase64;

                                Ext.getCmp(ImgID).setSrc(ImgSrc);
                                Ext.getCmp(ImgID).setItemId('ElevatortFile_photo');
                                Ext.getCmp(RemarkID).setHtml(Remark);
                            }

                            var IngNum = imagefile.length+1;
                            Ext.getCmp('ElevatortFile_Photo_'+IngNum).setSrc('resources/images/camera.png');
                            Ext.getCmp('ElevatortFile_Photo_'+IngNum).setItemId('ElevatorFile_Photo_camera');
                        }



                    },
                    function() {
                        loadMask.hide();
                        Ext.toast('未能找到电梯档案资料，请稍候再试！');
                        viewUtil.goLast();
                    },
                    {prono:prono}
                );

            }
        }else{//新建
                // 新单
                //var date_l = Ext.Date.format(new Date(), 'Y-m-d');
                //console.log(date_l);
        //         form.setValues({
        //             leafacdate : new Date(),
        //             r7 : new Date(),
        //             r8 : new Date(),
        //             finishdate : new Date(),
        //             firstuseliftdate : new Date(),
        //             speedcheckdate : new Date(),
        //             speednextcheckdate : new Date(),


        //          });
            loadMask.hide();

            }
    },

    onElevatorFile_r1Tap: function(textfield) {
        //电梯品牌
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{facname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftfaclist',
            storeparm: {
                userid: global.getUserId(),
                searchname: textfield.getValue(),
                curpagenum: 1,
                pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: false,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.searchname = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                    Ext.getCmp('ElevatorFile_r1id').setValue('');
                } else {
                    textfield.setValue(record.get('facname'));
                    Ext.getCmp('ElevatorFile_r1id').setValue(record.get('facid'));
                }
            }
        });
        textfield.blur();
    },

    onElevatorFile_elevatoridTap: function(textfield) {
        //电梯型号
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{elevatorname}</div>'+
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{facname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftdtxhlist',
            storeparm: {
                userid: global.getUserId(),
                searchname: textfield.getValue(),
                curpagenum: 1,
                pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: false,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.searchname = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                    Ext.getCmp('ElevatorFile_elevator').setValue('');
                } else {
                    textfield.setValue(record.get('elevatorname'));
                    Ext.getCmp('ElevatorFile_elevator').setValue(record.get('elevatorid'));
                    Ext.getCmp('ElevatorFile_r1').setValue(record.get('facname'));
                    Ext.getCmp('ElevatorFile_r1id').setValue(record.get('facid'));

                }
            }
        });
        textfield.blur();
    },

    onElevatorFile_contypeChange: function(selectfield, newValue, oldValue, eOpts) {
        console.log('.........');
        console.log(newValue);
        if(newValue=='3'){
            Ext.getCmp('ElevatorFile_controlnum').setHidden(false);
        }else{
            Ext.getCmp('ElevatorFile_controlnum').setHidden(true);
        }
    },

    onElevatorFile_zzlChange: function(textfield, newValue, oldValue, eOpts) {
        //检测是否为数字
        if(!newValue) return;
        if(!newValue.match(/^[0-9]+(.[0-9]{1,2})?$/)){
            textfield.suspendEvents();
            Ext.toast(textfield.getLabel()+'必须填写数字(至多两位小数)！');
            textfield.resumeEvents(false);
            return;
        }
    },

    onElevatorFile_speedChange: function(textfield, newValue, oldValue, eOpts) {
        if(!newValue) return;
        //检测是否为数字
        if(!newValue.match(/^[0-9]+(.[0-9]{1,2})?$/)){
            textfield.suspendEvents();
            Ext.toast(textfield.getLabel()+'必须填写数字(至多两位小数)！');
            textfield.resumeEvents(false);
            return;
        }
    },

    onElevator_highChange: function(textfield, newValue, oldValue, eOpts) {
        if(!newValue) return;
        //检测是否为数字
        if(!newValue.match(/^[0-9]+(.[0-9]{1,2})?$/)){
            textfield.suspendEvents();
            Ext.toast(textfield.getLabel()+'必须填写数字(至多两位小数)！');
            textfield.resumeEvents(false);
            return;
        }
    },

    onElevatorFile_fwlcChange: function(textfield, newValue, oldValue, eOpts) {
        if(!newValue) return;
        //检测是否为数字
        if(!newValue.match(/^[0-9]+(.[0-9]{1,2})?$/)){
            textfield.suspendEvents();
            Ext.toast(textfield.getLabel()+'必须填写数字(至多两位小数)！');
            textfield.resumeEvents(false);
            return;
        }
    },

    onElevatorFile_floorChange: function(textfield, newValue, oldValue, eOpts) {
        if(!newValue) return;
        //检测是否为数字
        if(!newValue.match(/^[0-9]*$/)){
            textfield.suspendEvents();
            Ext.toast(textfield.getLabel()+'必须填写正整数！');
            textfield.resumeEvents(false);
            return;
        }
    },

    onElevatorFile_stageChange: function(textfield, newValue, oldValue, eOpts) {
        if(!newValue) return;
        //检测是否为数字
        if(!newValue.match(/^[0-9]*$/)){
            textfield.suspendEvents();
            Ext.toast(textfield.getLabel()+'必须填写正整数！');
            textfield.resumeEvents(false);
            return;
        }
    },

    onElevator_doorChange: function(textfield, newValue, oldValue, eOpts) {
        if(!newValue) return;
        //检测是否为数字
        if(!newValue.match(/^[0-9]*$/)){
            textfield.suspendEvents();
            Ext.toast(textfield.getLabel()+'必须填写正整数！');
            textfield.resumeEvents(false);
            return;
        }
    },

    onElevatorFile_projectnameTap: function(textfield) {
        //关联项目
        var tl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{r12}</div>'+
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{}</div>';


        var tpl =
            '<div class="liftnet-Maintenance-TaskRecList" style="margin-top:-20px;height:70px;padding-bottom:5px;">'+
                '<div class="liftnet-Maintenance-TaskRecList-left" style="padding-top:0px;margin-left:-25px; " >'+
                    '<div class="liftnet-font-size12 liftnet-fontColor-darkGray">{projectname}</div>'+
                    '<div class="liftnet-font-size12 liftnet-fontColor-darkGray">{pordid}</div>'+
                    '<div class="liftnet-font-size12 liftnet-fontColor-darkGray" >{eleuseaddress}</div>'+
                '</div>'+
                '<div class="liftnet-Maintenance-TaskRecList-right" style="padding-top:0px;right:14px" >'+
                    '<div class="liftnet-font-size12 liftnet-font-right liftnet-fontColor-darkGray">{ladderno}</div>'+
                    '<div class="liftnet-font-size12 liftnet-font-right liftnet-fontColor-darkGray">{r13}&nbsp;</div>'+
                '</div>'+
            '</div>';



        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftglproject',
            storeparm: {
               userid: global.getUserId(),
               searchkey: textfield.getValue(),
               curpagenum: 1,
               pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: false,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('projectname');
                    textfield.setValue(value);
                    Ext.getCmp('ElevatorFile_r12').setValue(record.get('r12'));
                    Ext.getCmp('ElevatorFile_r13').setValue(record.get('r13'));
                    Ext.getCmp('ElevatorFile_detailrowid').setValue(record.get('detailrowid'));
                }
            }
        });
        textfield.blur();
    },

    onElevatorFie_r2Tap: function(textfield) {
        //点击坐标进到地图界面
        var lng = '';
        var lat = '';
        if(textfield.getValue()!==''){
            lng = textfield.getValue().split(',')[0];
            lat = textfield.getValue().split(',')[1];
        }else{
            lng = map.getLocation().lng;
            lat = map.getLocation().lat;
        }


        viewUtil.goNext('Engineer.EngElevatorFile_Map',{lng:lng,lat:lat,fc:function(element, eOpts){
            var getlnglat = function(e){
                var map = new BMap.Map("ElevatorFile_MapPanel");
                var pointA = new BMap.Point(e.point.lng,e.point.lat);
                var pointB = new BMap.Point(lng,lat);
                //if((map.getDistance(pointA,pointB)).toFixed(2)>2000){
                //    Ext.toast('请选择离当前位置两公里范围的地点,'+(map.getDistance(pointA,pointB)).toFixed(2));
                //}else{
                //}

                console.log(e.point.lng+'____+__'+e.point.lat);
                var r2 = e.point.lng+','+e.point.lat;
                Ext.getCmp('ElevatorFie_r2').setValue(r2);

                var parm = {
                    lng:e.point.lng,
                    lat:e.point.lat
                };
                viewUtil.goLast();
            };

            map.create2('ElevatorFile_MapPanel',{lng:lng,lat:lat,zoom:18,fc:getlnglat});

        }});

    },

    onEngElevatorFile_MapInitialize: function(component, eOpts) {
        var lng = component.initialConfig.parm.lng;//当前经度
        var lat = component.initialConfig.parm.lat;//当前纬度



        Ext.getCmp('ElevatorFile_MapPanel').on('painted',component.initialConfig.parm.fc);

    },

    onEngElevatorFile_MapDestroy: function(eOpts) {
        map.destroyById('ElevatorFile_MapPanel');
    },

    onElevatorFile_domainidStrTap: function(textfield) {
        //地区区域切换时,取地区省份数据
        //if(!newValue || newValue==oldValue) return;
        //console.log('-----查询省份-----');
        //dataUtil.createStore('eng_liftprovinciallevelid').loadDat(Ext.emptyFn,Ext.emptyFn,{userid:global.getUserId(),areatype:'B',areaid:newValue});


        //获取区域
        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{areaname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftdomainid',
            storeparm: {
               userid: global.getUserId(),
               searchkey: textfield.getValue(),
               areatype: 'A',
               areaid: ''
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('areaname');
                    textfield.setValue(value);
                    Ext.getCmp('ElevatorFile_domainid').setValue(record.get('areaid'));

                    //清空省份、所在市、县区
                    Ext.getCmp('ElevatorFile_provinciallevelidStr').setValue();
                    Ext.getCmp('ElevatorFile_provinciallevelid').setValue();
                    Ext.getCmp('ElevatorFile_citylevelidStr').setValue();
                    Ext.getCmp('ElevatorFile_citylevelid').setValue();
                    Ext.getCmp('ElevatorFile_countylevelidStr').setValue();
                    Ext.getCmp('ElevatorFile_countylevelid').setValue();

                }
            }
        });
        textfield.blur();


    },

    onElevatorFile_provinciallevelidStrTap: function(textfield) {

        //获取省份
        var areaid = Ext.getCmp('ElevatorFile_domainid');//区域ID

        if(areaid.getValue()==''){
            Ext.toast('请先选择区域!');
            return;
        }

        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{areaname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftprovinciallevelid',
            storeparm: {
               userid: global.getUserId(),
               searchkey: textfield.getValue(),
               areatype: 'B',
               areaid: areaid.getValue()
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('areaname');
                    textfield.setValue(value);
                    Ext.getCmp('ElevatorFile_provinciallevelid').setValue(record.get('areaid'));

                    //清空所在市、县区
                    Ext.getCmp('ElevatorFile_citylevelidStr').setValue();
                    Ext.getCmp('ElevatorFile_citylevelid').setValue();
                    Ext.getCmp('ElevatorFile_countylevelidStr').setValue();
                    Ext.getCmp('ElevatorFile_countylevelid').setValue();
                }
            }
        });
        textfield.blur();


    },

    onElevatorFile_citylevelidStrTap: function(textfield) {

        //获取所在市
        var areaid = Ext.getCmp('ElevatorFile_provinciallevelid');//省份ID

        if(areaid.getValue()==''){
            Ext.toast('请先选择省份!');
            return;
        }

        if(areaid.getValue()=='110000' || areaid.getValue()=='120000' || areaid.getValue()=='310000'|| areaid.getValue()=='500000'|| areaid.getValue()=='810000'|| areaid.getValue()=='820000'){
            Ext.toast('直辖市或特别行政区请直接选择县区!');
            return;
        }

        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{areaname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftcitylevelid',
            storeparm: {
               userid: global.getUserId(),
               searchkey: textfield.getValue(),
               areatype: 'C',
               areaid: areaid.getValue()
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('areaname');
                    textfield.setValue(value);
                    Ext.getCmp('ElevatorFile_citylevelid').setValue(record.get('areaid'));

                    //清空县区
                    Ext.getCmp('ElevatorFile_countylevelidStr').setValue();
                    Ext.getCmp('ElevatorFile_countylevelid').setValue();
                }
            }
        });
        textfield.blur();


    },

    onElevatorFile_countylevelidStrTap: function(textfield) {

        //获取县区
        var areaid = Ext.getCmp('ElevatorFile_citylevelid');//所在市ID
        var provid = Ext.getCmp('ElevatorFile_provinciallevelid');//省份ID

        if(provid.getValue()!='110000' && provid.getValue()!='120000' && provid.getValue()!='310000'&& provid.getValue()!='500000'&& provid.getValue()!='810000'&& provid.getValue()!='820000'){
            if(areaid.getValue()==''){
                Ext.toast('请先选择所在市!');
                return;
            }
        }else{
            areaid = provid;
        }


        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{areaname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftcountylevelid',
            storeparm: {
               userid: global.getUserId(),
               searchkey: textfield.getValue(),
               areatype: 'D',
               areaid: areaid.getValue()
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('areaname');
                    textfield.setValue(value);
                    Ext.getCmp('ElevatorFile_countylevelid').setValue(record.get('areaid'));
                }
            }
        });
        textfield.blur();


    },

    onElevatorFile_CameraTap: function(button, e, eOpts) {
        console.log('-----进入相机');
        var parm = {
            callback :function(filename){
                for(var i=1;i<7;i++){
                    var ImgID = 'ElevatortFile_Photo_'+i;
                    var Img = Ext.getCmp(ImgID);
                    var ImgSrc = Ext.getCmp(ImgID).getSrc();

                    if(filename!==''){
                        if(ImgSrc==='resources/images/notPhoto.png'||ImgSrc==='resources/images/camera.png'){
                            //Img.setSrc(filename);
                            //Img.setItemId('ElevatortFile_photo');

                            //获取照片跳转至填写描述的界面
                            viewUtil.goNext('Engineer.EngElevatorFile_Photo',{ImgID:ImgID,ImgSrc:filename});
                            return;
                        }
                    }
                }
            },//回调函数
            source:'CAMEAR',// 相机或相册，CAMEAR/ALBUM
            direction:'FRONT',// 前镜头或后镜头，FRONT/BACK
            width:640,	//width
            height:640 // height
        };
        phone.takePhoto(parm);
    },

    onElevatorFile_AlbumTap: function(button, e, eOpts) {
        console.log('-----进入相册');
        var parm = {
            callback :function(filename){
                for(var i=1;i<7;i++){
                    var ImgID = 'ElevatortFile_Photo_'+i;
                    var Img = Ext.getCmp(ImgID);
                    var ImgSrc = Ext.getCmp(ImgID).getSrc();

                    if(filename!==''){
                        if(ImgSrc==='resources/images/notPhoto.png'||ImgSrc==='resources/images/camera.png'){
                            //Img.setSrc(filename);
                            //Img.setItemId('ElevatortFile_photo');

                            //获取照片跳转至填写描述的界面
                            viewUtil.goNext('Engineer.EngElevatorFile_Photo',{ImgID:ImgID,ImgSrc:filename,RemarkStr:'',Type:'B'});
                            return;
                        }
                    }
                }
            },//回调函数
            source:'ALBUM',// 相机或相册，CAMEAR/ALBUM
            direction:'FRONT',// 前镜头或后镜头，FRONT/BACK
            width:640,	//width
            height:640 // height
        };
        phone.takePhoto(parm);
    },

    onEngElevatorFile_PhotoInitialize: function(component, eOpts) {
        //初始化查看照片页面
        var ImgID = component.initialConfig.parm.ImgID; //上一页面的Image对象
        var ImgSrc = component.initialConfig.parm.ImgSrc; //拍得照片的路径
        var RemarkStr = component.initialConfig.parm.RemarkStr; //图片描述
        var Type = component.initialConfig.parm.Type;//判断是点击按钮进入还是点击图片进入


        Ext.getCmp('ElevatorFile_Photo').setSrc(ImgSrc);
        Ext.getCmp('ElevatorFile_Img').setValue(ImgID);
        Ext.getCmp('ElevatorFile_Remark').setValue(RemarkStr);

        if(Type=='A'){//点击图片进入,把删除按钮显示
            Ext.getCmp('ElevatorFile_DelBtn').setHidden(false);
        }


    },

    onElevatorFile_PhotoSaveTap: function(button, e, eOpts) {
        //添加图片至上一界面
        var imgSrc = Ext.getCmp('ElevatorFile_Photo').getSrc();
        var ImgID = Ext.getCmp('ElevatorFile_Img').getValue();
        Ext.getCmp(ImgID).setSrc(imgSrc);
        Ext.getCmp(ImgID).setItemId('ElevatortFile_photo');

        var Remark = Ext.getCmp('ElevatorFile_Remark').getValue();
        var RemarkNum = ImgID.split('_')[2];
        Ext.getCmp('ElevatorFile_Remark_'+RemarkNum).setHtml(Remark);

        for(var i=RemarkNum;i<6;i++){
            var NextNum = Number(i)+1;
            if(Ext.getCmp('ElevatortFile_Photo_'+NextNum).getSrc()=='resources/images/notPhoto.png'||Ext.getCmp('ElevatortFile_Photo_'+NextNum).getSrc()=='resources/images/camera.png'){
                Ext.getCmp('ElevatortFile_Photo_'+NextNum).setSrc('resources/images/camera.png');
                Ext.getCmp('ElevatortFile_Photo_'+NextNum).setItemId('ElevatorFile_Photo_camera');
                break;
            }

        }


        Ext.getCmp('ElevatorFile_ActionSheet').hide();
        viewUtil.goLast();

    },

    onElevatorFile_DelBtnTap: function(button, e, eOpts) {
        //删除图片至上一界面
        var ImgID = Ext.getCmp('ElevatorFile_Img').getValue();
        Ext.getCmp(ImgID).setSrc('resources/images/notPhoto.png');
        Ext.getCmp(ImgID).setItemId();

        var Remark = Ext.getCmp('ElevatorFile_Remark').getValue();
        var RemarkNum = ImgID.split('_')[2];
        Ext.getCmp('ElevatorFile_Remark_'+RemarkNum).setHtml('描述....');

        //判断是否存在相机照片
        var hasCamera = false;
        for(var i=1;i<7;i++){
            var imgID = 'ElevatortFile_Photo_'+i;
            var imgSrc = Ext.getCmp(imgID).getSrc();
            if(imgSrc==='resources/images/camera.png'){
                hasCamera = true;
            }
        }
            if(hasCamera){
                Ext.getCmp(ImgID).setSrc('resources/images/notPhoto.png');
                Ext.getCmp(ImgID).setItemId();
            }else{
                Ext.getCmp(ImgID).setSrc('resources/images/camera.png');
                Ext.getCmp(ImgID).setItemId('ElevatorFile_Photo_camera');
            }


            //冒泡排序
        for(var j=1;j<7;j++){
            for(var z=j+1;z<7;z++){
                var imgID2 = 'ElevatortFile_Photo_'+j;
                var imgSrc2 = Ext.getCmp(imgID2).getSrc();
                var remarkID2 = 'ElevatorFile_Remark_'+j;
                var remark2 = Ext.getCmp(remarkID2).getHtml();
                if(imgSrc2!=='resources/images/notPhoto.png'&&imgSrc3!=='resources/images/camera.png'){
                    continue;
                }else{
                    var imgID3 = 'ElevatortFile_Photo_'+z;
                    var imgSrc3 = Ext.getCmp(imgID3).getSrc();
                    var remarkID3 = 'ElevatorFile_Remark_'+z;
                    var remark3 = Ext.getCmp(remarkID3).getHtml();
                    if(imgSrc3!=='resources/images/notPhoto.png'&&imgSrc3!=='resources/images/camera.png'){
                        Ext.getCmp(imgID2).setSrc(imgSrc3);
                        Ext.getCmp(imgID2).setItemId('ElevatortFile_photo');
                        Ext.getCmp(imgID3).setSrc(imgSrc2);
                        Ext.getCmp(imgID3).setItemId();
                        Ext.getCmp(remarkID2).setHtml(remark3);
                        Ext.getCmp(remarkID3).setHtml(remark2);
                    }
                }
            }
        }

                //冒泡排序
        for(var j=1;j<7;j++){
            for(var z=j+1;z<7;z++){
                var imgID2 = 'ElevatortFile_Photo_'+j;
                var imgSrc2 = Ext.getCmp(imgID2).getSrc();
                var remarkID2 = 'ElevatorFile_Remark_'+j;
                var remark2 = Ext.getCmp(remarkID2).getHtml();
                if(imgSrc2!=='resources/images/camera.png' && imgSrc2!=='resources/images/notPhoto.png'){
                    continue;
                }else{
                    var imgID3 = 'ElevatortFile_Photo_'+z;
                    var imgSrc3 = Ext.getCmp(imgID3).getSrc();
                    var remarkID3 = 'ElevatorFile_Remark_'+z;
                    var remark3 = Ext.getCmp(remarkID3).getHtml();
                    if(imgSrc3==='resources/images/camera.png'){
                        Ext.getCmp(imgID2).setSrc(imgSrc3);
                        Ext.getCmp(imgID2).setItemId('ElevatorFile_Photo_camera');
                        Ext.getCmp(imgID3).setSrc(imgSrc2);
                        Ext.getCmp(imgID3).setItemId();
                        Ext.getCmp(remarkID2).setHtml(remark3);
                        Ext.getCmp(remarkID3).setHtml(remark2);
                    }
                }
            }
        }


        viewUtil.goLast();
    },

    onElevatortFile_photoTap: function(image, e, eOpts) {
        var ImgID = image.getId();
        var RemarkNum = ImgID.split('_')[2];
        var RemarkStr = Ext.getCmp('ElevatorFile_Remark_'+RemarkNum).getHtml();
        var filename = image.getSrc();
        //点击图片进入查看照片页面
        viewUtil.goNext('Engineer.EngElevatorFile_Photo',{ImgID:ImgID,ImgSrc:filename,RemarkStr:RemarkStr,Type:'A'});
    },

    onElevatorFile_Photo_cameraTap: function(image, e, eOpts) {
        Ext.getCmp('ElevatorFile_ActionSheet').show();
    },

    onElevatorFile_pronoFocus: function(textfield, e, eOpts) {
        if(!textfield.getValue()) return;


        var nowValue = Ext.getCmp('ElevatorFile_NowProno').getValue();
        console.log('nowvalue:'+nowValue);

        if(!textfield.getValue().match(/^(\d{4}-\d{6}-\d{6}-\d{1,8})$/)){
            Ext.Msg.alert('注意', '设备注册码的格式有误',Ext.emptyFn);
            textfield.setValue(nowValue);
            textfield.focus();
            return;
        }


        //后台检测该设备注册码是否已存在
        if(textfield.getValue()!==nowValue){
        var parm = {
            userid : global.getUserId(),
            prono : textfield.getValue()
        };

        var store = dataUtil.createStore('eng_elevatorfile_checkProno');
        loadMask.show();

        store.updateDat(
            function(liftstatus) {
                loadMask.hide();
                if(liftstatus=='1') {

                }else{
                    Ext.Msg.alert('注意', '该设备注册码已存在',Ext.emptyFn);
                    textfield.setValue(nowValue);
                    textfield.focus();
                }
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('检测设备注册码唯一性操作有误，错误信息是：' + info);
            },
            parm
        );

        }
    },

    onElevatorFile_typeidChange: function(selectfield, newValue, oldValue, eOpts) {
        console.log('----------分类');
        console.log(selectfield);
    },

    onElevatorFile_r9Change: function(textfield, newValue, oldValue, eOpts) {
        if(!newValue) return;
        //检测是否为数字
        if(!newValue.match(/^[0-9]*$/)){
            textfield.suspendEvents();
            Ext.toast(textfield.getLabel()+'必须填写正整数！');
            textfield.resumeEvents(false);
        }
    },

    onElevatorFile_controlnumChange: function(textfield, newValue, oldValue, eOpts) {
        if(!newValue) return;
        //检测是否为数字
        if(!newValue.match(/^[0-9]*$/)){
            textfield.suspendEvents();
            Ext.toast(textfield.getLabel()+'必须填写正整数！');
            textfield.resumeEvents(false);
        }
    },

    onElevatorFile_r7Change: function(datepickerfield, newDate, oldDate, eOpts) {
        var me = this;
        me.doSetNextDate(datepickerfield,'ElevatorFile_r8');
    },

    onElevatorFile_speedcheckdateChange: function(datepickerfield, newDate, oldDate, eOpts) {
        var me = this;
        me.doSetNextDate(datepickerfield,'ElevatorFile_speednextcheckdate');
    },

    onElevatorFile_userlinkphoneChange: function(textfield, newValue, oldValue, eOpts) {
        //联系电话
        if(!newValue) return;

        if(!global.isTelNo(newValue)) {
            textfield.suspendEvents();
            Ext.toast('电话号码格式不正确！');
            textfield.resumeEvents(false);
        }
    },

    onElevatorFile_userlinkphoneChange1: function(textfield, newValue, oldValue, eOpts) {
        //联系电话
        if(!newValue) return;

        if(!global.isTelNo(newValue)) {
            textfield.suspendEvents();
            Ext.toast('电话号码格式不正确！');
            textfield.resumeEvents(false);
        }
    },

    doEngElevatorFile_Search: function(page, pagesize, searchkeyParm, action, scrollparm) {

        var me = this;
        Ext.getCmp('EngElevatorFile_List').getStore().loadDat(
            function(ret,resetCurPage,jurisdiction){
                if(scrollparm){
                    scrollparm.scroller.scrollTo(scrollparm.x,scrollparm.y);
                }
                if(resetCurPage){
                    curPage = 1;//获取新数据成功，页数重置为1
                }

                var addjurisdiction = jurisdiction.addjurisdiction;//新建权限
                Ext.getCmp('EngElevatorFile_NewBtn').setHidden(addjurisdiction=='N');

                updatejurisdiction = jurisdiction.updatejurisdiction=='N';//修改权限
                deletejueisdiction = jurisdiction.deletejueisdiction=='N';//删除权限


                loadMask.hide();
            },
            function(info,cutOne){
                Ext.toast(info);
                if(cutOne){
                    curPage--;//加载更多数据失败，页数减一
                }
                if(info==='没有更多数据！'){
                    curPage = 0;//没有更多数据的时候重置页数为0，不触发上拉事件
                }
                loadMask.hide();

            },
            {
                curpagenum:page,
                pagesize:pagesize,
                searchkey:searchkeyParm.searchkey,
            },
            action
        );
    },

    doEneElevatorFile_Save: function(action) {
        //电梯档案操作-新建/修改
        var me = this;
        var form = Ext.getCmp('ElevatorFile_Info_Form');
        var lift = form.getValues();


        // 检查必填项目
        var fields = form.getFields();
        for(var name in fields) {
          field = fields[name];
          if(field.getRequired() && (field.getValue()===''||!field.getValue())) {
              Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
              return;
          }else{
              if(name=='prono'){// 检查设备注册码是否合法
                  if(!field.getValue().match(/^(\d{4}-\d{6}-\d{6}-\d{1,8})$/)){
                      Ext.Msg.alert('注意', '设备注册码的格式有误',Ext.emptyFn);
                      return;
                  }
              }else if(name=='zzl' || name==='speed' || name==='high' || name==='fwlc'){//检测载重量、速度、提升高度、倾斜角
                    if(field.getValue()!='' && !field.getValue().match(/^[0-9]+(.[0-9]{1,2})?$/)){
                        field.suspendEvents();
                        Ext.toast(field.getLabel()+'必须填写数字(至多两位小数)！');
                        field.resumeEvents(false);
                        return;
                    }
              }else if(name==='floor' || name==='stage' || name==='door' || name==='r9' || name==='controlnum'){//检测层、站、门、到期预警天数、群控台数
                    if(field.getValue()!='' && !field.getValue().match(/^[0-9]*$/)){
                        field.suspendEvents();
                        Ext.toast(field.getLabel()+'必须填写正整数！');
                        field.resumeEvents(false);
                        return;
                    }
              }else if(name==='userlinkphone' || name==='r5'){//检测联系电话
                  if(field.getValue()!='' && !global.isTelNo(field.getValue())) {
                    field.suspendEvents();
                    Ext.toast(field.getLabel()+'电话号码格式不正确！');
                    field.resumeEvents(false);
                    return;
                }
              }
          }
        }







        //保存图片信息
        var picturesJSON = [];
        for(var i=1;i<7;i++){
            var ImgID = 'ElevatortFile_Photo_'+i;
            var RemarkID = 'ElevatorFile_Remark_'+i;
            var Remark = Ext.getCmp(RemarkID).getHtml();

            var Img = Ext.getCmp(ImgID);
            if(Img){
            var ImgSrc = Ext.getCmp(ImgID).getSrc();
            if(ImgSrc!=='resources/images/notPhoto.png'&&ImgSrc!=='resources/images/camera.png'){
                console.log(ImgID);
                var pic = ImgSrc.split(',')[1];
                var picturesJSONSize = picturesJSON.length;
                var picIndex = picturesJSONSize+1;
                picturesJSON[picturesJSONSize]={
                    file : pic,
                    remark	: Remark
                };
            }
            }
        }
        console.log(picturesJSON);

        lift.imagefile = picturesJSON;
        if(!lift.citylevelid){
            lift.citylevelid='';
        }

        //处理时间
        lift.leafacdate = (!lift.leafacdate?'':Ext.Date.format(lift.leafacdate,'Y-m-d'));
        lift.r7 = (!lift.r7?'':Ext.Date.format(lift.r7,'Y-m-d'));
        lift.r8 = (!lift.r8?'':Ext.Date.format(lift.r8,'Y-m-d'));

        if(lift.finishdate){
            lift.finishdate = Ext.Date.format(lift.finishdate,'Y-m-d');
        }else{
            lift.finishdate = '';
        }

        if(lift.firstuseliftdate){
            lift.firstuseliftdate = Ext.Date.format(lift.firstuseliftdate,'Y-m-d');
        }else{
            lift.firstuseliftdate = '';
        }

        if(lift.speedcheckdate){
            lift.speedcheckdate = Ext.Date.format(lift.speedcheckdate,'Y-m-d');
        }else{
            lift.speedcheckdate = '';
        }

        if(lift.speednextcheckdate){
            lift.speednextcheckdate = Ext.Date.format(lift.speednextcheckdate,'Y-m-d');
        }else{
            lift.speednextcheckdate = '';
        }


        console.log(lift.finishdate);
        console.log(lift.firstuseliftdate);
        console.log(lift.speedcheckdate);
        console.log(lift.speednextcheckdate);

        var parm = {
            userid: global.getUserId(),
            lift: lift
        };
        console.log(parm);
        var store = dataUtil.createStore('eng_elevatorfile_scens');
        loadMask.show();

        store.updateDat(
            function(trno) {
                loadMask.hide();
                if(trno) {
                    Ext.toast(action + '操作完成！');
                } else {
                    Ext.toast(action + '操作完成！');
                }

                //刷新列表
                me.doEngElevatorFile_Search(1,20,{searchkey:''},'refresh');
                viewUtil.goLast();
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('未能完成' + action + '操作，错误信息是：' + info);
            },
            parm
        );



    },

    doShowDatePicker: function(textfield, fn) {
        // 新增电梯 - 日期选择初始化
        var y = new Date().getFullYear();
        var items = [
            {
                text: '现在',
                handler: function() {
                    picker.setValueAnimated(new Date());
                }
            }];
        var picker = Ext.create('ux.DateTime',
                                {
                                    yearFrom: y - 1,
                                    yearTo: y + 1,
                                    doneButton: {
                                        text: '确定',
                                        handler: function() {
                                            textfield.setValue(
                                                Ext.Date.format(picker.getValue(),'Y-m-d'));
                                            picker.hide();
                                            if(fn && typeof(fn)==='function') {
                                                fn();
                                            }
                                            picker.destroy();
                                        }
                                    },
                                    cancelButton: '取消',
                                    toolbar: {
                                        items : items
                                    }

                                });

        picker.setValue(Ext.Date.parse(textfield.getValue(), 'Y-m-d', true));
        picker.getToolbar().setTitle(textfield.getLabel());

        Ext.Viewport.add(picker);
        picker.show();
    },

    doElevatorFile_Process: function(parm) {
        //电梯修改/删除入口
        var me = this;

        var operation = parm.operation;
        var record = parm.record;//设备注册码

        switch(operation) {
            case '修改':

                viewUtil.goNext('Engineer.EngElevatorFile_Add',{record:record});

                break;
            case '删除':
                Ext.Msg.confirm("注意", "确认是否删除？", function(n) {
                    if(n=='no')return;

                    var userid = global.getUserId();

                    var adapter_parm = {
                        userid : userid,
                        prono  : record.get('prono')

                    };
                    var store = dataUtil.createStore('eng_elevatorfile_cl');
                    loadMask.show();
                    store.updateDat(
                        function(info) {
                            loadMask.hide();

                            Ext.toast(info);

                            // 刷新电梯档案列表
                            me.doEngElevatorFile_Search(1,20,{searchkey:''},'refresh');

                        },
                        function(info) {
                            loadMask.hide();
                            if(!info) info = '(未知)';
                            Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                        },
                        adapter_parm
                    );

                });
                return;

            default:
                Ext.toast('未知的操作:' + operation);
                return;
        }


    },

    doSetNextDate: function(obj, nextId) {
        var thisDate = obj.getValue();
        if(thisDate!==''){
            var t_date=new Date(thisDate);
            console.log(t_date);
            t_date.setDate(t_date.getDate()+365);
            var d=t_date.getDate();
            var m=t_date.getMonth()+1;
            var y=t_date.getFullYear();
            var t_day="";
            if(m<10){m='0'+m;}
            if(d<10){d='0'+d;}
            t_day=y+"-"+m+"-"+d;
            Ext.getCmp(nextId).setValue(new Date(t_day));
        }else{
            Ext.getCmp(nextId).setValue("");
        }
    },

    doInitialNextStateButton: function(button) {
        if(button.text=='修改'){
            button.hidden = updatejurisdiction;
        }else if(button.text=='删除'){
             button.hidden = deletejueisdiction;

        }
    }

});