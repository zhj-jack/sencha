/*
 * File: app/controller/Engineer/EngQualityCheckController.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('liftnet.controller.Engineer.EngQualityCheckController', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "panel#EngQualityCheckList": {
                initialize: 'onEngQualityCheckListInitialize'
            },
            "button#EngQualityCheckList_ButReturn": {
                tap: 'onEngQualityCheckList_ButReturnTap'
            },
            "list#EngQualityCheck_TodoList": {
                itemtap: 'onEngQualityCheck_TodoListItemTap'
            },
            "button#EngFirstCheck_ReturnButton": {
                tap: 'onEngFirstCheck_ReturnButtonTap'
            },
            "button#EngReformcheck_ReturnButton": {
                tap: 'onEngReformcheck_ReturnButtonTap'
            },
            "button#EngFirstCheck_BtnAdd": {
                tap: 'onEngFirstCheck_BtnAddTap'
            },
            "container#EngFirstCheck": {
                initialize: 'onEngFirstCheckInitialize'
            },
            "button#EngFirstCheck_LoadMoreJob": {
                tap: 'onEngFirstCheck_LoadMoreJobTap'
            },
            "button#EngFirstCheck_LoadMoreTask": {
                tap: 'onEngFirstCheck_LoadMoreTaskTap'
            },
            "searchfield#EngFirstCheckJob_Search": {
                change: 'onEngFirstCheckJob_SearchChange'
            },
            "searchfield#EngFirstCheckTask_Search": {
                change: 'onEngFirstCheckTask_SearchChange'
            },
            "button#EngFirstCheckJobAdd_ReturnButton": {
                tap: 'onEngFirstCheckJobAdd_ReturnButtonTap'
            },
            "button#EngReformcheckJobAdd_ReturnButton": {
                tap: 'onEngReformcheckJobAdd_ReturnButtonTap'
            },
            "button#EngFirstCheckJobShow_ReturnButton": {
                tap: 'onEngFirstCheckJobShow_ReturnButtonTap'
            },
            "panel#EngFirstCheckJobAdd": {
                initialize: 'onEngFirstCheckJobAddInitialize'
            },
            "panel#EngReformcheckJobAdd": {
                initialize: 'onEngReformcheckJobAddInitialize'
            },
            "panel#EngFirstCheckJobShow": {
                initialize: 'onEngFirstCheckJobShowInitialize'
            },
            "textfield#EngFirstCheckJobAdd_projectname": {
                tap: 'onEngFirstCheckJobAdd_projectnameFocus'
            },
            "textfield#EngFirstCheckJobAdd_checkednum": {
                tap: 'onEngFirstCheckJobAdd_checkednumFocus'
            },
            "textareafield#EngFirstCheckJobAdd_checkuserName": {
                tap: 'onEngFirstCheckJobAdd_checkuserNameFocus'
            },
            "button#EngFirstCheckJobAdd_BtnCommit": {
                tap: 'onEngFirstCheckJobAdd_BtnCommitTap'
            },
            "button#EngFirstCheckJobAdd_BtnCommit1": {
                tap: 'onEngFirstCheckJobAdd_BtnCommit1Tap'
            },
            "button#EngFirstCheckJobAdd_BtnSave": {
                tap: 'onEngFirstCheckJobAdd_BtnSaveTap'
            },
            "button#EngFirstCheckJobAdd_BtnSave1": {
                tap: 'onEngFirstCheckJobAdd_BtnSave1Tap'
            },
            "button#EngFirstCheckJobAdd_BtnUpdate": {
                tap: 'onEngFirstCheckJobAdd_BtnUpdateTap'
            },
            "button#EngFirstCheckJobAdd_BtnUpdate1": {
                tap: 'onEngFirstCheckJobAdd_BtnUpdate1Tap'
            },
            "list#EngFirstCheck_ListJob": {
                itemtap: 'onEngFirstCheck_ListJobItemTap'
            },
            "list#EngReformcheck_ListJob": {
                itemtap: 'onEngReformCheck_ListJobItemTap'
            },
            "list#EngFirstCheck_ListTask": {
                itemtap: 'onEngFirstCheck_ListTaskItemTap'
            },
            "list#EngReformcheck_ListTask": {
                itemtap: 'onEngReformcheck_ListTaskItemTap'
            },
            "list#EngFirstCheckTask_CheckProList": {
                itemtap: 'onEngFirstCheckTask_CheckProListItemTap'
            },
            "button#EngFirstCheckTask_ReturnButton": {
                tap: 'onEngFirstCheckTask_ReturnButtonTap'
            },
            "panel#EngFirstCheckTask": {
                initialize: 'onEngFirstCheckTaskInitialize'
            },
            "textfield#EngFirstCheckTask_elevatorname": {
                tap: 'onEngFirstCheckTask_elevatoridFocus'
            },
            "textfield#EngFirstCheckTask_facname": {
                tap: 'onEngFirstCheckTask_facnameFocus'
            },
            "textfield#EngFirstCheckTask_domainname": {
                tap: 'onEngFirstCheckTask_domainnameFocus'
            },
            "textfield#EngFirstCheckTask_provinciallevelname": {
                tap: 'onEngFirstCheckTask_provinciallevelnameFocus'
            },
            "textfield#EngFirstCheckTask_citylevelname": {
                tap: 'onEngFirstCheckTask_citylevelnameFocus'
            },
            "textfield#EngFirstCheckTask_countylevelname": {
                tap: 'onEngFirstCheckTask_countylevelnameFocus'
            },
            "textfield#EngFirstCheckTask_r2": {
                tap: 'onEngFirstCheckTask_r2Focus'
            },
            "textareafield#EngFirstCheckTask_checkuserName": {
                tap: 'onEngFirstCheckTask_checkuserNameFocus'
            },
            "selectfield#EngFirstCheckTask_contype": {
                change: 'onEngFirstCheckTask_contypeChange'
            },
            "button#EngFirstCheckTask_BtnSave": {
                tap: 'onEngFirstCheckTask_BtnSaveTap'
            },
            "button#EngFirstCheckTask_BtnSave2": {
                tap: 'onEngFirstCheckTask_BtnSave2Tap'
            },
            "button#EngFirstCheckTask_BtnCommit": {
                tap: 'onEngFirstCheckTask_BtnCommitTap'
            },
            "button#EngFirstCheckTask_BtnCancel": {
                tap: 'onEngFirstCheckTask_BtnCancelTap'
            },
            "button#EngFirstCheckTask_BtnCommit2": {
                tap: 'onEngFirstCheckTask_BtnCommit2Tap'
            },
            "button#EngFirstCheckTask_BtnAgree": {
                tap: 'onEngFirstCheckTask_BtnAgreeTap'
            },
            "button#EngFirstCheckTask_BtnDisagree": {
                tap: 'onEngFirstCheckTask_BtnDisagreeTap'
            },
            "button#EngFirstCheckTask_BtnAddParts": {
                tap: 'onEngFirstCheckTask_BtnAddPartsTap'
            },
            "list#EngFirstCheckTask_PartList": {
                itemtap: 'onEngFirstCheckTask_PartListTap'
            },
            "button#EngFirstCheckTaskAddParts_BtnReturn": {
                tap: 'onEngFirstCheckTaskAddParts_BtnReturnTap'
            },
            "panel#EngFirstCheckTaskAddParts": {
                initialize: 'onEngFirstCheckTaskAddPartsInitialize'
            },
            "textfield#EngFirstCheckTaskAddPart_Code": {
                change: 'onEngFirstCheckTaskAddPartsChange'
            },
            "button#EngFirstCheckTaskAddParts_Commit": {
                tap: 'onEngFirstCheckTaskAddParts_CommitButtonTap'
            },
            "button#EngFirstCheck_JobStatus": {
                tap: 'onEngFirstCheck_JobStatusButtonTap'
            },
            "button#EngFirstCheck_TaskStatus": {
                tap: 'onEngFirstCheck_TaskStatusButtonTap'
            },
            "button#EngFirstCheckJobStatus_0": {
                tap: 'onEngFirstCheckJobStatus_0ButtonTap'
            },
            "button#EngFirstCheckJobStatus_1": {
                tap: 'onEngFirstCheckJobStatus_1ButtonTap'
            },
            "button#EngFirstCheckJobStatus_2": {
                tap: 'onEngFirstCheckJobStatus_2ButtonTap'
            },
            "button#EngFirstCheckJobStatus_3": {
                tap: 'onEngFirstCheckJobStatus_3ButtonTap'
            },
            "button#EngFirstCheckTaskStatus_0": {
                tap: 'onEngFirstCheckTaskStatus_0ButtonTap'
            },
            "button#EngFirstCheckTaskStatus_1": {
                tap: 'onEngFirstCheckTaskStatus_1ButtonTap'
            },
            "button#EngFirstCheckTaskStatus_2": {
                tap: 'onEngFirstCheckTaskStatus_2ButtonTap'
            },
            "button#EngFirstCheckTaskStatus_3": {
                tap: 'onEngFirstCheckTaskStatus_3ButtonTap'
            },
            "button#EngFirstCheckTaskStatus_4": {
                tap: 'onEngFirstCheckTaskStatus_4ButtonTap'
            },
            "button#EngFirstCheckTaskStatus_5": {
                tap: 'onEngFirstCheckTaskStatus_5ButtonTap'
            },
            "button#EngFirstCheckTaskStatus_6": {
                tap: 'onEngFirstCheckTaskStatus_6ButtonTap'
            },
            "image#EngFirstCheckTaskAddParts_File": {
                tap: 'onEngFirstCheckTaskAddParts_FileTap'
            },
            "button#addpart_source_camear": {
                tap: 'onaddpart_source_camearTap'
            },
            "button#addpart_source_album": {
                tap: 'onaddpart_source_albumTap'
            },
            "panel#EngFirstCheckTask_AddPartPhoto": {
                initialize: 'onEngFirstCheckTask_AddPartPhotoInit'
            },
            "button#EngFirstCheckTask_AddPartPhoto_BtnDel": {
                tap: 'onEngFirstCheckTask_AddPartPhoto_BtnDelTap'
            },
            "button#EngFirstCheckTask_AddPartPhoto_BtnReturn": {
                tap: 'onEngFirstCheckTask_AddPartPhoto_BtnReturnTap'
            },
            "tabpanel#EngFirstCheck_TplList": {
                activeitemchange: 'onEngFirstCheck_TplListActiveItemChange'
            },
            "tabpanel#EngFirstCheckTask_TplList": {
                activeitemchange: 'onEngFirstCheckTask_TplListActiveItemChange'
            },
            "image#EngFirstCheckTask_camera": {
                tap: 'onEngFirstCheckTask_cameraImageTap'
            },
            "panel#EngTaskPhoto": {
                initialize: 'onEngTaskPhotoInit'
            },
            "button#EngTaskPhoto_BtnReturn": {
                tap: 'onEngTaskPhoto_BtnReturnTap'
            },
            "button#EngTaskPhoto_BtnDel": {
                tap: 'onEngTaskPhoto_BtnDelTap'
            },
            "button#EngTaskPhoto_BtnSave": {
                tap: 'onEngTaskPhoto_BtnSaveTap'
            },
            "image#EngFirstCheckTask_photo": {
                tap: 'onEngFirstCheckTask_photoTap'
            },
            "image#EngFirstCheckTask_photoX": {
                tap: 'onEngFirstCheckTask_photoXTap'
            },
            "button#task_source_camear": {
                tap: 'ontask_source_camearButtonTap'
            },
            "button#task_source_album": {
                tap: 'ontask_source_albumButtonTap'
            },
            "panel#EngFirstCheckTask_Map": {
                initialize: 'onEngFirstCheckTask_MapInitialize',
                destroy: 'onEngFirstCheckTask_MapDestory'
            },
            "button#EngFirstCheckTask_BtnReturn": {
                tap: 'onEngFirstCheckTask_BtnReturnTap'
            },
            "textfield#EngFirstCheckCheckUser2_username": {
                tap: 'onEngFirstCheckCheckUser2_usernameTap'
            },
            "button#EngFirstCheckCheckUser2_BtnReturn": {
                tap: 'onEngFirstCheckCheckUser2_BtnReturnTap'
            },
            "button#EngFirstCheckCheckUser_BtnReturn": {
                tap: 'onEngFirstCheckCheckUser_BtnReturnTap'
            },
            "button#EngFirstCheckCheckUser_BtnAdd": {
                tap: 'onEngFirstCheckCheckUser_BtnAddTap'
            },
            "button#EngFirstCheckCheckUser2_BtnSave": {
                tap: 'onEngFirstCheckCheckUser2_BtnSaveTap'
            },
            "button#EngFirstCheckCheckUser_BtnSave": {
                tap: 'onEngFirstCheckCheckUser_BtnSaveTap'
            },
            "button#EngFirstCheckCheckUser2_BtnDelete": {
                tap: 'onEngFirstCheckCheckUser2_BtnDeleteTap'
            },
            "list#EngFirstCheckCheckUser_List": {
                itemtap: 'onEngFirstCheckCheckUser_ListItemTap'
            },
            "panel#EngFirstCheckCheckUser2": {
                initialize: 'onEngFirstCheckCheckUser2Init'
            },
            "panel#EngFirstCheckCheckUser": {
                initialize: 'onEngFirstCheckCheckUserInit'
            },
            "container#EngReformcheck": {
                initialize: 'onEngReformcheckInitialize'
            }
        }
    },

    /* 读取质检任务列表 */
    onEngQualityCheckListInitialize: function(component, eOpts) {
        Ext.getCmp('EngQualityCheck_TodoList').getStore().loadDat(
            function() {
            },
            function(info) {
                Ext.toast(info);
            }
        );
    },

    onEngQualityCheckList_ButReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    /* 质检任务列表点击事件，跳转到相应界面 */
    onEngQualityCheck_TodoListItemTap: function(dataview, index, target, record, e, eOpts) {
        var targetViews = {
            0:'Engineer.EngFirstCheck',
            5:'Engineer.EngReformcheck',
        };
        // if(index===0){
        //     viewUtil.goNext(targetViews[index]);
        // }
        switch(index) {
            case 0:
                viewUtil.goNext('Engineer.EngFirstCheck');
                break;
            case 5:
                viewUtil.goNext('Engineer.EngReformcheck');
                break;

        }
    },

    onEngFirstCheck_ReturnButtonTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngReformcheck_ReturnButtonTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    /* 新增首检派工单，派工单tab前台显示时才响应 */
    onEngFirstCheck_BtnAddTap: function(button, e, eOpts) {
        viewUtil.goNext('Engineer.EngFirstCheckJobAdd',{record:''});
        // var activeItem = Ext.getCmp('EngFirstCheck_TplList').getActiveItem();
        // if(activeItem._itemId=='EngFirstCheck_CtnJobList'){

        // }else {

        // }

    },

    /*
        首检任务界面初始化
        初始化list下拉刷新、滑动按钮插件
    */
    onEngFirstCheckInitialize: function(component, eOpts) {

        var me = this;
        var jobList = Ext.getCmp('EngFirstCheck_ListJob');
        var taskList = Ext.getCmp('EngFirstCheck_ListTask');
        //清空store数据
        taskList.getStore().removeAll();

        jobaddjurisdiction = false;
        console.log('init');
        jobupdatejurisdiction = false;
        taskUpdatejurisdiction = false;

        jobCurPage = 0;//全局变量
        taskCurPage = 0;
        pagesize = 20;
        //获取状态
        getFlowstatus = {
            '全部':'%',
            '未接收':'1',
            '已接收':'2',
            '退回':'3',
        };

        getTaskstatus = {
            '全部':'%',
            '新建':'0',
            '待审':'1',
            '审批中':'2',
            '通过':'3',
            '不通过':'4',
            '作废':'5'
        };

        // 初始化派工单列表下拉刷新、滑动按钮插件
        jobList.setPlugins(
             [
              {
                            autoSnapBack: false,
                            lastUpdatedText: '上次刷新:&nbsp;',
                            loadedText: '已刷新',
                            loadingText: '正在刷新派工单...',
                            pullText: '下拉刷新...',
                            releaseText: '放开开始刷新...',
                            type: 'pullrefresh',
                            listeners : {
                                latestfetched : function() {

                                    console.log('执行清空STORE。。。');
                                    Ext.getCmp('EngFirstCheck_ListJob').getStore().removeAll();
                                    console.log('执行清空STORE。。。');

                                    me.doEngFirstCheck_LoadJobList(
                                        1,
                                        pagesize,
                                        {
                                            searchkey:Ext.getCmp('EngFirstCheckJob_Search').getValue()||'',
                                            flowstatus:
                                                getFlowstatus[Ext.getCmp('EngFirstCheck_JobStatus').getText()]
                                        },
                                        'refresh'
                                    );
                            	}
                            }
                        },
                        // 以下滑动按钮插件应从EngHomeController的onEngHomeInitial()中复制！
                        {
                            xclass: 'ux.SlideActions',
                            openPosition: 150,
                            buttons:
                                [
                                    // 按钮1
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-blue',
                                        text: '1',
                                        initial: function(button) {
                                            //初始化滑动按钮
                                                me.doEngFirstCheck_InitialNextStateButton(button, 0);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            jobList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                            //处理点击事件
                                            me.doSlideShowAlertDialog({
        //                                     me.doEngFirstCheckJob_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 0
                                                });
                                        }
                                    },
                                    // 按钮2
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-green',
                                        text: '2',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 1);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            jobList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doSlideShowAlertDialog({
        //                                     me.doEngFirstCheckJob_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 1
                                                });
                                        }
                                    },
                                    // 按钮3
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-orange',
                                        text: '3',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 2);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            jobList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doSlideShowAlertDialog({
        //                                     me.doEngFirstCheckJob_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 2
                                                });
                                        }
                                    }
                            ]
                        }
                    ]
                );

        // 初始化首检任务列表下拉刷新、滑动按钮插件

                taskList.setPlugins(
                    [
                        {
                            autoSnapBack: false,
                            lastUpdatedText: '上次刷新:&nbsp;',
                            loadedText: '已刷新',
                            loadingText: '正在刷新首检任务...',
                            pullText: '下拉刷新...',
                            releaseText: '放开开始刷新...',
                            type: 'pullrefresh',
                            listeners : {
                                latestfetched : function() {
                                            console.log('执行清空STORE。。。');
                                    Ext.getCmp('EngFirstCheck_ListTask').getStore().removeAll();
                                    console.log('执行清空STORE。。。');

                                    me.doEngFirstCheck_LoadTaskList(
                                        1,
                                        pagesize,
                                        {

                                            searchkey:Ext.getCmp('EngFirstCheckTask_Search').getValue()||'',
                                            flowstatus:
                                                getTaskstatus[Ext.getCmp('EngFirstCheck_TaskStatus').getText()]
                                        },
                                        'refresh'
                                    );
                            	}
                            }
                        },
                        // 以下滑动按钮插件应从EngHomeController的onEngHomeInitial()中复制！
                        {
                            xclass: 'ux.SlideActions',
                            openPosition: 100,
                            buttons:
                                [
                                    // 按钮1
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-blue',
                                        text: '1',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 0);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            taskList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doTaskHanderShowAlertDialog({
        //                                     me.doEngFirstCheckTask_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 0
                                                });
                                        }
                                    },
                                    // 按钮2
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-green',
                                        text: '2',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 1);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            taskList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doTaskHanderShowAlertDialog({
        //                                     me.doEngFirstCheckTask_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 1
                                                });
                                        }
                                    },
                                    // 按钮3
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-orange',
                                        text: '3',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 2);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            taskList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doTaskHanderShowAlertDialog({
        //                                     me.doEngFirstCheckTask_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 2
                                                });
                                        }
                                    }
                            ]
                        }
                    ]
                );
        loadMask.show();
        //进来自动加载第一页
        me.doEngFirstCheck_LoadJobList(
                                        1,
                                        pagesize,
                                        {
                                            searchkey:Ext.getCmp('EngFirstCheckJob_Search').getValue()||'',
                                            flowstatus:
                                                getTaskstatus[Ext.getCmp('EngFirstCheck_JobStatus').getText()]
                                        },
                                        'firstload'
        );
        me.doEngFirstCheck_LoadTaskList(
                                        1,
                                        pagesize,
                                        {
                                            searchkey:Ext.getCmp('EngFirstCheckTask_Search').getValue()||'',
                                            flowstatus:
                                                getTaskstatus[Ext.getCmp('EngFirstCheck_TaskStatus').getText()]
                                        },
                                        'firstload'
                                    );
    },

    onEngFirstCheck_LoadMoreJobTap: function(button, e, eOpts) {
        var me = this;
        if(jobCurPage===0){
                return;
            }
            loadMask.show();
                var scrollparm = {
        //             scroller:jobScroller,
        //             x:x,
                    jobCurPage:jobCurPage
                };
                if(!Ext.getCmp('EngFirstCheckJob_Search')){
                    loadMask.hide();
                    return;
                }
                var keyword = Ext.getCmp('EngFirstCheckJob_Search').getValue()||'';

                me.doEngFirstCheck_LoadJobList(
                    ++jobCurPage,
                    pagesize,
                    {
                        searchkey:Ext.getCmp('EngFirstCheckJob_Search').getValue()||'',
                        flowstatus:
                             getFlowstatus[Ext.getCmp('EngFirstCheck_JobStatus').getText()]
                    },
                    'loadmore',
                    scrollparm
                );
    },

    onEngFirstCheck_LoadMoreTaskTap: function(button, e, eOpts) {
        var me = this;
        if(taskCurPage===0){
                return;
            }
            loadMask.show();
                var scrollparm = {
        //             scroller:taskScroller,
        //             x:x,
                    taskCurPage:taskCurPage
                };
                if(!Ext.getCmp('EngFirstCheckTask_Search')){
                    loadMask.hide();
                    return;
                }
                var keyword = Ext.getCmp('EngFirstCheckTask_Search').getValue()||'';

                me.doEngFirstCheck_LoadTaskList(
                    ++taskCurPage,
                    pagesize,
                    {
                        searchkey:Ext.getCmp('EngFirstCheckTask_Search').getValue()||'',
                        flowstatus:
                                getTaskstatus[Ext.getCmp('EngFirstCheck_TaskStatus').getText()]
                                        },
                    'loadmore',
                    scrollparm
                );
    },

    /* 搜索派工单 */
    onEngFirstCheckJob_SearchChange: function(textfield, newValue, oldValue, eOpts) {
        this.doEngFirstCheck_Job_Search(Ext.getCmp('EngFirstCheck_JobStatus'));
    },

    /* 搜索首检任务 */
    onEngFirstCheckTask_SearchChange: function(textfield, newValue, oldValue, eOpts) {

        this.doEngFirstCheck_Task_Search(Ext.getCmp('EngFirstCheck_TaskStatus'));
        // this.doEngFirstCheck_LoadTaskList(
        //                                 1,
        //                                 pagesize,
        //                                 Ext.getCmp('EngFirstCheckTask_Search').getValue()||'',
        //                                 'search'
        //                             );
    },

    onEngFirstCheckJobAdd_ReturnButtonTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngReformcheckJobAdd_ReturnButtonTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngFirstCheckJobShow_ReturnButtonTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    /*
        新增派工单界面初始化
        初始化相应数据（获取自动生成的jnl、当前用户的部门id）
    */
    onEngFirstCheckJobAddInitialize: function(component, eOpts) {
        //新增派工单界面初始化

        checkuserArr = [];

        //处理派工单用
        jobStates={};
        jobSlideAction ='';
        // 初始化数据
        var me = this;
        var form = Ext.getCmp('EngFirstCheckJobAdd_Form');
        var store;
        var button1 = Ext.getCmp('EngFirstCheckJobAdd_BtnUpdate');
        var button2 = Ext.getCmp('EngFirstCheckJobAdd_BtnSave');
        var button3 = Ext.getCmp('EngFirstCheckJobAdd_BtnCommit');

        loadMask.show();
        //获取当前用户部门
        dataUtil.createStore('first_check_job_add_deptid').loadDat(Ext.emptyFn,Ext.emptyFn);


        if(!component.initialConfig.parm.record) {
            // 新单
            console.log('新派工单');
            // 操作：保存、提交
            button1.setText('保存');
            button2.setText('提交');
            button1.setHidden(false);
            button2.setHidden(false);
            button3.setHidden(true);

            store = dataUtil.createStore('first_check_job_sj');

        //     var createdeptid;
            var createid = global.getUserId();


            var jnlStore = dataUtil.createStore('first_check_job_add_jnl');
            console.log(global.getUserName());
            jnlStore.loadDat(
                function(ret){
                    store.add({
                        jnl:				ret[0].jnl,
                        creatorname:		global.getUserName(),
                        status:				'',
                        projectid:			'',
                        contractid:			'',
                        projectname:		'',
                        projectaddress:		'',
                        liftnum:			'',
                        dispatchtype:		'',
                        remark:				'',
                        planstartdate:		new Date(),
                        planenddate:		new Date(),
                        createid:			createid,
        //                 createdeptid:		createdeptid,
                        elevator:	 		'',
                        checkuser:			'',
                    });
                    form.setRecord(store.getAt(0));
                    loadMask.hide();
                },
                function(){
                    loadMask.hide();
                }
            );

        } else {

            // 首检派工修改
            console.log('旧单');

        //     button1.setHidden(true);
        //     button2.setHidden(true);
        //     button3.setHidden(true);

            jobSlideAction = component.initialConfig.parm.action;
            updatejurisdiction = component.initialConfig.parm.updatejurisdiction;
            var jnl = component.initialConfig.parm.record.get('jnl');
            //从待办点进来才有这个值，用于设置底部按钮
            var nextstateFromTodo = component.initialConfig.parm.nextstate;
            var status = component.initialConfig.parm.record.get('status');
        //     Ext.getCmp('EngFirstCheckJobAdd_Tbar').setTitle(jnl);

        //     if(updatejurisdiction===false){
        //        Ext.getCmp('EngFirstCheckJobAdd_BtnPanel').setHidden(true);
        //     }
            if(updatejurisdiction===true){
               button1.setHidden(false);
               button2.setHidden(true);
               button3.setHidden(false);
               button1.setText('保存');
               button3.setText('提交');
               Ext.getCmp('EngFirstCheckJobAdd_BtnPanel').setHidden(false);
            }else{
               Ext.getCmp('EngFirstCheckJobAdd_BtnPanel').setHidden(true);
            }
        //     me.doEngFirstCheckJobAdd_setReadOnly(updatejurisdiction);

            store = dataUtil.createStore('first_check_job_detail');
            //获取旧单信息
            store.loadDat(
                function() {
                    var record = store.getAt(0);
                    form.setRecord(record);

                    me.doEngFirstCheckTask_setArray(record,form,true);

                    checkuserArr = record.get('checkuser');

                    var nextstates = record.get('nextstate');
                    if(nextstateFromTodo){
                        nextstates = nextstateFromTodo;
                        record.set('nextstate',nextstates);
                    }
                    if(nextstates){
                        for(var j = 0;j<nextstates.length;j++){
                            jobStates[nextstates[j].name] = nextstates[j].state+'';
                        }
                        //处理按钮显示
                        button1.record = record;
                        button2.record = record;
                        button3.record = record;
                        me.doEngFirstCheck_InitialNextStateButton(button1, 0);
                        me.doEngFirstCheck_InitialNextStateButton(button2, 1);
                        me.doEngFirstCheck_InitialNextStateButton(button3, 2);

                        Ext.getCmp('EngFirstCheckJobAdd_BtnPanel')
                            .setHidden(button1.getText()==='');

                    }

                    //根据操作权限设置是否只读
                    me.doEngFirstCheckJobAdd_setReadOnly(nextstates);

                    loadMask.hide();
                },
                function() {
                    loadMask.hide();
                    Ext.toast('未能找到派工单资料，请稍候再试！');
                    viewUtil.goLast();
                },
                {
                    userid:global.getUserId(),
                    jnl:jnl,
                    url:component.initialConfig.parm.url
                }
            );
        }

        // 特殊操作直接滚动到页末
        if(jobSlideAction==='审核' || jobSlideAction==='退回') {
            var task = Ext.create('Ext.util.DelayedTask', function() {
                Ext.getCmp('EngFirstCheckJobAdd_Form').getScrollable().getScroller().scrollToEnd(true);
                task.cancel();
            });
            task.delay(300);
        }
    },

    /*
        新增派工单界面初始化
        初始化相应数据（获取自动生成的jnl、当前用户的部门id）
    */
    onEngReformcheckJobAddInitialize: function(component, eOpts) {
        //新增派工单界面初始化

        checkuserArr = [];

        //处理派工单用
        jobStates={};
        jobSlideAction ='';
        // 初始化数据
        var me = this;
        var form = Ext.getCmp('EngReformcheckJobAdd_Form');
        var store;
        var button1 = Ext.getCmp('EngReformcheckJobAdd_BtnUpdate');
        var button2 = Ext.getCmp('EngReformcheckJobAdd_BtnSave');
        var button3 = Ext.getCmp('EngReformcheckJobAdd_BtnCommit');

        loadMask.show();
        //获取当前用户部门
        dataUtil.createStore('first_check_job_add_deptid').loadDat(Ext.emptyFn,Ext.emptyFn);


        if(!component.initialConfig.parm.record) {
            // 新单
            console.log('新派工单');
            // 操作：保存、提交
            button1.setText('保存');
            button2.setText('提交');
            button1.setHidden(false);
            button2.setHidden(false);
            button3.setHidden(true);

            store = dataUtil.createStore('first_check_job_sj');

        //     var createdeptid;
            var createid = global.getUserId();


            var jnlStore = dataUtil.createStore('first_check_job_add_jnl');
            console.log(global.getUserName());
            jnlStore.loadDat(
                function(ret){
                    store.add({
                        jnl:				ret[0].jnl,
                        creatorname:		global.getUserName(),
                        status:				'',
                        projectid:			'',
                        contractid:			'',
                        projectname:		'',
                        projectaddress:		'',
                        liftnum:			'',
                        dispatchtype:		'',
                        remark:				'',
                        planstartdate:		new Date(),
                        planenddate:		new Date(),
                        createid:			createid,
        //                 createdeptid:		createdeptid,
                        elevator:	 		'',
                        checkuser:			'',
                    });
                    form.setRecord(store.getAt(0));
                    loadMask.hide();
                },
                function(){
                    loadMask.hide();
                }
            );

        } else {

            // 首检派工修改
            console.log('旧单');

        //     button1.setHidden(true);
        //     button2.setHidden(true);
        //     button3.setHidden(true);

            jobSlideAction = component.initialConfig.parm.action;
            updatejurisdiction = component.initialConfig.parm.updatejurisdiction;
            var jnl = component.initialConfig.parm.record.get('jnl');
            //从待办点进来才有这个值，用于设置底部按钮
            var nextstateFromTodo = component.initialConfig.parm.nextstate;
            var status = component.initialConfig.parm.record.get('status');
        //     Ext.getCmp('EngFirstCheckJobAdd_Tbar').setTitle(jnl);

        //     if(updatejurisdiction===false){
        //        Ext.getCmp('EngFirstCheckJobAdd_BtnPanel').setHidden(true);
        //     }
            if(updatejurisdiction===true){
               button1.setHidden(false);
               button2.setHidden(true);
               button3.setHidden(false);
               button1.setText('保存');
               button3.setText('提交');
               Ext.getCmp('EngReformcheckJobAdd_BtnPanel').setHidden(false);
            }else{
               Ext.getCmp('EngReformcheckJobAdd_BtnPanel').setHidden(true);
            }
        //     me.doEngFirstCheckJobAdd_setReadOnly(updatejurisdiction);

            store = dataUtil.createStore('first_check_job_detail');
            //获取旧单信息
            store.loadDat(
                function() {
                    var record = store.getAt(0);
                    form.setRecord(record);

                    me.doEngFirstCheckTask_setArray(record,form,true);

                    checkuserArr = record.get('checkuser');

                    var nextstates = record.get('nextstate');
                    if(nextstateFromTodo){
                        nextstates = nextstateFromTodo;
                        record.set('nextstate',nextstates);
                    }
                    if(nextstates){
                        for(var j = 0;j<nextstates.length;j++){
                            jobStates[nextstates[j].name] = nextstates[j].state+'';
                        }
                        //处理按钮显示
                        button1.record = record;
                        button2.record = record;
                        button3.record = record;
                        me.doEngAllCheck_InitialNextStateButton(button1, 0);
                        me.doEngAllCheck_InitialNextStateButton(button2, 1);
                        me.doEngAllCheck_InitialNextStateButton(button3, 2);

                        Ext.getCmp('EngReformcheckJobAdd_BtnPanel')
                            .setHidden(button1.getText()==='');

                    }

                    //根据操作权限设置是否只读
                    me.doEngAllCheckJobAdd_setReadOnly(nextstates,'EngReformcheck');

                    loadMask.hide();
                },
                function() {
                    loadMask.hide();
                    Ext.toast('未能找到派工单资料，请稍候再试！');
                    viewUtil.goLast();
                },
                {
                    userid:global.getUserId(),
                    jnl:jnl,
                    url:component.initialConfig.parm.url
                }
            );
        }

        // 特殊操作直接滚动到页末
        if(jobSlideAction==='审核' || jobSlideAction==='退回') {
            var task = Ext.create('Ext.util.DelayedTask', function() {
                Ext.getCmp('EngReformcheckJobAdd_Form').getScrollable().getScroller().scrollToEnd(true);
                task.cancel();
            });
            task.delay(300);
        }
    },

    /*
        派工单(旧单)查看界面初始化
        初始化底部按钮、获取派工单详细信息
    */
    onEngFirstCheckJobShowInitialize: function(component, eOpts) {
        //派工单处理界面初始化

        // 初始化数据
        var me = this;
        var form = Ext.getCmp('EngFirstCheckJobAdd_Form1');
        var store;
        jobStates={};
        var button1 = Ext.getCmp('EngFirstCheckJobAdd_BtnUpdate1');
        var button2 = Ext.getCmp('EngFirstCheckJobAdd_BtnSave1');
        var button3 = Ext.getCmp('EngFirstCheckJobAdd_BtnCommit1');
        var action = component.initialConfig.parm.action;
        if(!component.initialConfig.parm.record) {
            //不会执行的
            Ext.toast('未能找到派工单资料，请稍候再试！');
            loadMask.hide();
            viewUtil.goLast();
        } else {
            // 首检派工审批查看

            var action = component.initialConfig.parm.action;
            var jnl = component.initialConfig.parm.record.get('jnl');
            var status = component.initialConfig.parm.record.get('status');
            Ext.getCmp('EngFirstCheckJobAdd_Tbar1').setTitle(jnl);

            loadMask.show();

            store = dataUtil.createStore('first_check_job_detail');
            store.loadDat(
                function() {
                    var record = store.getAt(0);
                    console.log(record);
                    var nextstates = record.get('nextstate');
                    if(nextstates){

                    for(var j = 0;j<nextstates.length;j++){
                        jobStates[nextstates[j].name] = nextstates[j].state+'';
                    }
                }


                    form.setRecord(record);
                    me.doEngFirstCheckTask_setArray(record,form,false);
                    if(action=='查看'){
                        Ext.getCmp('EngFirstCheckJobShow_BtnPanel').setHidden(true);
                    }else{
                    // 根据待办指示决定明细页面操作按钮个数
                        button1.record = component.initialConfig.parm.record;
                        button2.record = component.initialConfig.parm.record;
                        button3.record = component.initialConfig.parm.record;
                        me.doEngFirstCheck_InitialNextStateButton(button1, 0);
                        me.doEngFirstCheck_InitialNextStateButton(button2, 1);
                        me.doEngFirstCheck_InitialNextStateButton(button3, 2);
                    }/* 使用上面标准做法，废弃用状态决定操作的方式：
                    Ext.getCmp('EngFaultAdd_BtnSave').setText('修改');
                    if(state==='已退回') {
                        Ext.getCmp('EngFaultAdd_BtnClose').setText('关闭');
                    }
                    */
                    loadMask.hide();
                },
                function() {
                    loadMask.hide();
                    Ext.toast('未能找到派工单资料，请稍候再试！');
                    viewUtil.goLast();
                },
                {
                    userid:global.getUserId(),
                    jnl:jnl
                }
            );
        }


        // 特殊操作直接滚动到页末
        if(action==='审核' || action==='退回') {
            var task = Ext.create('Ext.util.DelayedTask', function() {
                Ext.getCmp('EngFirstCheckJobAdd_Form1').getScrollable().getScroller().scrollToEnd(true);
                task.cancel();
            });
            task.delay(300);
        }
    },

    /*
        新增派工单时选择项目
        跳转至选择界面，选择完毕在当前界面表单回显相应数据
    */
    onEngFirstCheckJobAdd_projectnameFocus: function(textfield) {
        // 新增派工单 - 选择项目

        var tpl =
            '<div clear:both>'+
            '<div style="float:right" class="liftnet-font-size12 liftnet-fontColor-darkGray">{elevatornum}台</div>'+
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{projectname}</div>'+
            '<div>'+
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{projectname}</div>'+
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{projectaddress}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'firstcheck_sjfpxmlist',
            //store获取数据时需要的参数
            storeparm: {
                userid: global.getUserId(),
                curpagenum: 1,
                pagesize: 20,
                projectname:textfield.getValue(),
            },
            itemtpl: tpl,
            paging: true,
            allowedit: false,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.projectname = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        projectname: record
                    });
                } else {
                    Ext.getCmp('EngFirstCheckJobAdd_Form').setValues({
                        projectname: record.get('projectname'),
                        projectid: record.get('projectid'),
                        contractid: record.get('contractid'),
                        projectaddress: record.get('projectaddress'),
                        liftnum: record.get('elevatornum'),
                        checkednum: 0,

        //                 checkednum: record.get('elevatornum'),
                        dispatchtype: record.get('dispatchtype')
                    });
                }
            }
        });
        textfield.blur();
    },

    /*
        新增派工单时选择电梯(多选)
        回显选择台数、已选择电梯的相关信息
    */
    onEngFirstCheckJobAdd_checkednumFocus: function(textfield) {
        var projectName = Ext.getCmp('EngFirstCheckJobAdd_projectname').getValue();
        if(!projectName||projectName===''){
            Ext.toast('请先选择项目');
            return;
        }
        // 新增派工单 - 选择电梯
        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{prodno}</div>' +
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{facname}</div>'+
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{elevatorid}</div>'+
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{FSD}</div>'
            ;
        //var storageid = Ext.getCmp('EngFaultAdd_storageid').getValue();
        var contractid = Ext.getCmp('EngFirstCheckJobAdd_contractid').getValue();
        viewUtil.goNext('Common.ComMultiSelect', {
            textfield: textfield,
            storeid: 'firstcheck_sjfpdtlist',
            //store获取电梯数据所需参数
            storeparm: {
                userid: global.getUserId(),
                contractid:contractid,
                //storageid: storageid
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            allowselectall:true,//显示全选按钮
            fnSetFilter: Ext.emptyFn,
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFirstCheckJobAdd_Form').setValues({
                        elevator: record
                    });
                } else {
                     var elevator = '';
                     for(var i = 0; i < record.length; i++){
                         if(i!==0){
                             elevator+=',';
                         }
                         elevator+=record[i].get('prodno')+'_'+record[i].get('liftautono')+'_'+record[i].get('detailrowid');
                     }
                     console.log(elevator);
                     Ext.getCmp('EngFirstCheckJobAdd_elevator').setValue(elevator);
                     textfield.setValue(record.length);


                 }
             }
         });
        textfield.blur();
    },

    /* 新增派工单界面选择检查人员(多选) */
    onEngFirstCheckJobAdd_checkuserNameFocus: function(textareafield) {

        viewUtil.goNext('Engineer.EngFirstCheckCheckUser',
                        {
                            checkuserArr:checkuserArr,
                            show:Ext.getCmp('EngFirstCheckJobAdd_checkuserName'),
                            hide:Ext.getCmp('EngFirstCheckJobAdd_checkuser'),
                            flag:'Job'
                        });

    },

    /* 新增派工单界面按钮点击事件处理 */
    onEngFirstCheckJobAdd_BtnCommitTap: function(button, e, eOpts) {
        var btnText = button.getText();

        if(jobSlideAction==="退回修改"){//退回修改调用审批接口
            this.doHanderShowAlertDialog(btnText);
            return;
        }


        if(btnText==='保存' || btnText==='提交'){
        //     this.doEngFirstCheckJobAdd_Process(btnText);
            this.doAddShowAlertDialog(btnText);
            return;
        }
        // this.doEngFirstCheckJobShow_Process(btnText);
        this.doHanderShowAlertDialog(btnText);
    },

    onEngFirstCheckJobAdd_BtnCommit1Tap: function(button, e, eOpts) {
        // this.doEngFirstCheckJobAdd_Process(button.getText());
        this.doEngFirstCheckJobShow_Process(button.getText());
    },

    onEngFirstCheckJobAdd_BtnSaveTap: function(button, e, eOpts) {
        // this.doEngFirstCheckJobAdd_Process(button.getText());
        var btnText = button.getText();

        if(jobSlideAction==="退回修改"){//退回修改调用审批接口
            this.doHanderShowAlertDialog(btnText);
            return;
        }


        if(btnText==='保存' || btnText==='提交'){
        //     this.doEngFirstCheckJobAdd_Process(btnText);
            this.doAddShowAlertDialog(btnText);
            return;
        }
        // this.doEngFirstCheckJobShow_Process(btnText);
        this.doHanderShowAlertDialog(btnText);
    },

    /* 派工单查看界面按钮点击事件处理 */
    onEngFirstCheckJobAdd_BtnSave1Tap: function(button, e, eOpts) {
        // this.doEngFirstCheckJobAdd_Process(button.getText());
        this.doEngFirstCheckJobShow_Process(button.getText());
    },

    onEngFirstCheckJobAdd_BtnUpdateTap: function(button, e, eOpts) {
        // this.doEngFirstCheckJobAdd_Process(button.getText());
        var btnText = button.getText();

        if(jobSlideAction==="退回修改"){//退回修改调用审批接口
            this.doHanderShowAlertDialog(btnText);
            return;
        }

        if(btnText==='保存' || btnText==='提交'){
        //     this.doEngFirstCheckJobAdd_Process(btnText);
            this.doAddShowAlertDialog(btnText);
            return;
        }
        // this.doEngFirstCheckJobShow_Process(btnText);
        this.doHanderShowAlertDialog(btnText);
    },

    onEngFirstCheckJobAdd_BtnUpdate1Tap: function(button, e, eOpts) {
        // this.doEngFirstCheckJobAdd_Process(button.getText());
        this.doEngFirstCheckJobShow_Process(button.getText());
    },

    onEngFirstCheck_ListJobItemTap: function(dataview, index, target, record, e, eOpts) {
        var actions = {
            "退回":{action:'修改',view:'Engineer.EngFirstCheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "新建":{action:'修改',view:'Engineer.EngFirstCheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "待审":{action:'查看',view:'Engineer.EngFirstCheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "审批中":{action:'查看',view:'Engineer.EngFirstCheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "通过":{action:'查看',view:'Engineer.EngFirstCheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "不通过":{action:'查看',view:'Engineer.EngFirstCheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "作废":{action:'查看',view:'Engineer.EngFirstCheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
        };
        // var targetViews = {
        //     "新建":"Engineer.EngFirstCheckJobAdd",
        //     "待审":"Engineer.EngFirstCheckJobShow",
        //     "通过":"Engineer.EngFirstCheckJobShow",
        //     "不通过":"Engineer.EngFirstCheckJobShow",
        // };

        var action = record.get('status');
        viewUtil.goNext(actions[action].view,
                        {record:record,
                         action:actions[action].action,
                         url:actions[action].url,
        //                  updatejurisdiction:updatejurisdiction
                         updatejurisdiction:jobupdatejurisdiction&&(action==='新建'||action==='退回')
                        });

        //跳转到只读界面(派工单查看-->审核)
        // viewUtil.goNext('Engineer.EngFirstCheckJobShow',{record:record,action:'查看'});

    },

    onEngReformCheck_ListJobItemTap: function(dataview, index, target, record, e, eOpts) {
        var actions = {
            "退回":{action:'修改',view:'Engineer.EngReformcheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "新建":{action:'修改',view:'Engineer.EngReformcheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "待审":{action:'查看',view:'Engineer.EngReformcheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "审批中":{action:'查看',view:'Engineer.EngReformcheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "通过":{action:'查看',view:'Engineer.EngReformcheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "不通过":{action:'查看',view:'Engineer.EngReformcheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
            "作废":{action:'查看',view:'Engineer.EngReformcheckJobAdd',
                  url:'/adapters/firstcheck/api/1.0/fcddetail'},
        };
        // var targetViews = {
        //     "新建":"Engineer.EngFirstCheckJobAdd",
        //     "待审":"Engineer.EngFirstCheckJobShow",
        //     "通过":"Engineer.EngFirstCheckJobShow",
        //     "不通过":"Engineer.EngFirstCheckJobShow",
        // };

        var action = record.get('status');
        viewUtil.goNext(actions[action].view,
                        {record:record,
                         action:actions[action].action,
                         url:actions[action].url,
        //                  updatejurisdiction:updatejurisdiction
                         updatejurisdiction:jobupdatejurisdiction&&(action==='新建'||action==='退回')
                        });

        //跳转到只读界面(派工单查看-->审核)
        // viewUtil.goNext('Engineer.EngFirstCheckJobShow',{record:record,action:'查看'});

    },

    onEngFirstCheck_ListTaskItemTap: function(dataview, index, target, record, e, eOpts) {
        var actions = {
            "新建":"修改",
            "待审":"查看",
            "通过":"查看",
            "不通过":"查看",
            "查看":"查看"
        };
        var action = record.get('status');

        // viewUtil.goNext('Engineer.EngFirstCheckTask',{record:record,action:actions[action]});
        // viewUtil.goNext('Engineer.EngFirstCheckTask',{record:record,action:'action'});

        var urls = {
            "新建":"/adapters/firstcheck/api/1.0/fcinputdetail",
            "待审":"/adapters/firstcheck/api/1.0/fcinputdetail",
            "通过":"/adapters/firstcheck/api/1.0/fcinputdetail",
            "不通过":"/adapters/firstcheck/api/1.0/fcinputdetail",
            "查看":"/adapters/firstcheck/api/1.0/fcinputdetail"
        };

        viewUtil.goNext('Engineer.EngFirstCheckTask',{record:record,action:actions[action],url:urls[action]});
    },

    onEngReformcheck_ListTaskItemTap: function(dataview, index, target, record, e, eOpts) {
        var actions = {
            "新建":"修改",
            "待审":"查看",
            "通过":"查看",
            "不通过":"查看",
            "查看":"查看"
        };
        var action = record.get('status');

        // viewUtil.goNext('Engineer.EngFirstCheckTask',{record:record,action:actions[action]});
        // viewUtil.goNext('Engineer.EngFirstCheckTask',{record:record,action:'action'});

        var urls = {
            "新建":"/adapters/firstcheck/api/1.0/fcinputdetail",
            "待审":"/adapters/firstcheck/api/1.0/fcinputdetail",
            "通过":"/adapters/firstcheck/api/1.0/fcinputdetail",
            "不通过":"/adapters/firstcheck/api/1.0/fcinputdetail",
            "查看":"/adapters/firstcheck/api/1.0/fcinputdetail"
        };

        viewUtil.goNext('Engineer.EngFirstCheckTask',{record:record,action:actions[action],url:urls[action]});
    },

    onEngFirstCheckTask_CheckProListItemTap: function(dataview, index, target, record, e, eOpts) {
        //只读
        // if(readActions.indexOf(action)!=-1){
        if(isReadOnly){
            return;
        }

        // 如果点击了列表的图标区域，则改变状态
        if(e.target.id==='clickArea'||e.target.id==='statusArea') {
            switch(record.get('checkverdict')) {
                case '√':
                    newStatus = '×';
                    break;
                case '×':
                    newStatus = '/';
                    break;
                case '/':
                    newStatus = '√';
                    break;
            }
            // 更改数据记录
            record.set('checkverdict', newStatus);
            this.doEngFirstCheckTask_showCount();

        }else{
            //填写检验结果
            Ext.Msg.prompt('检验结果', null,
                function(buttonId,value) {
                        if(buttonId=='ok'){
                            record.set('checkresult', value);
                        }
                    },
                    null,
                    true,
                    record.get('checkresult') || '',
                    {
                        autoCapitalize: true,
                        placeHolder: '请输入检验结果',

                    }
                );
            }
    },

    onEngFirstCheckTask_ReturnButtonTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngFirstCheckTaskInitialize: function(component, eOpts) {
        var me = this;
        // 初始化下拉选择项目
        //开门方式列表
        dataUtil.createStore('eng_kmfslist').loadDat(Ext.emptyFn,Ext.emptyFn);
        //控制方式列表
        dataUtil.createStore('eng_kzfslist').loadDat(Ext.emptyFn,Ext.emptyFn);
        //使用场所
        dataUtil.createStore('eng_placelist').loadDat(Ext.emptyFn,Ext.emptyFn);
        //区域
        // dataUtil.createStore('eng_liftdomainid').loadDat(Ext.emptyFn,Ext.emptyFn,{userid:global.getUserId(),areatype:'A',areaid:''});
        //电梯分类
        dataUtil.createStore('eng_lifttypelist').loadDat(Ext.emptyFn,Ext.emptyFn);

        //清空检验项目
        Ext.getCmp('EngFirstCheckTask_CheckProList').
                        getStore().setData([]);
        //清空配件
        Ext.getCmp('EngFirstCheckTask_PartList').
                        getStore().setData([]);

        action = component.initialConfig.parm.action;
        url = component.initialConfig.parm.url;
        isReadOnly = false;
        taskcheckuserArr=[];

        var button1 = Ext.getCmp('EngFirstCheckTask_BtnSave');
        var button2 = Ext.getCmp('EngFirstCheckTask_BtnCommit');
        var button3 = Ext.getCmp('EngFirstCheckTask_BtnCancel');
        button1.setHidden(true);
        button2.setHidden(true);
        button3.setHidden(true);

        //只读的Action
        readActions = [
            '查看','审核','同意','不同意'
        ];

        // switch(action){
        //     case '审核':
        //         //只读
        //         me.doEngFirstCheckTask_setReadOnly();
        //         Ext.getCmp('EngFirstCheck_Panel2').setHidden(false);
        //         Ext.getCmp('EngFirstCheck_Panel1').setHidden(true);
        //         break;
        //     case '修改':
        //     case '保存':
        //     case '提交':

        //         Ext.getCmp('EngFirstCheck_Panel2').setHidden(true);
        //         Ext.getCmp('EngFirstCheck_Panel1').setHidden(false);
        //         break;
        //     case '查看':
        //         //只读
        //         me.doEngFirstCheckTask_setReadOnly();
        //         Ext.getCmp('EngFirstCheck_Panel2').setHidden(true);
        //         Ext.getCmp('EngFirstCheck_Panel1').setHidden(true);
        //         break;
        // }

        // var url = {
        //     '修改':'/adapters/firstcheck/api/1.0/fcinputdetail',
        //     '保存':'/adapters/firstcheck/api/1.0/fcinputdetail',
        //     '提交':'/adapters/firstcheck/api/1.0/fcinputdetail',
        //     '审核':'/adapters/firstcheck/api/1.0/fcaduitdetail',//首检任务审批查看
        //     '查看':'/adapters/firstcheck/api/1.0/fcinputdetail'//首检任务录入查看
        // };

        var jnlno = component.initialConfig.parm.record.get('jnlno');
        var store = dataUtil.createStore('first_check_task_sj');
        taskStates = {};

        typeid = '';
        nowtypeid = '';
        checkProjects=[];
        isFirstLoad = false;

        loadMask.show();
        store.loadDat(
            function(){
                isFirstLoad = true;
                var record = store.getAt(0);
                var nextstates = record.get('nextstate');
                if(nextstates.length>0){
                    for(var j = 0;j<nextstates.length;j++){
                        taskStates[nextstates[j].name] = nextstates[j].state+'';
                    }
                }else{
                    Ext.getCmp('EngFirstCheck_Panel1').setHidden(true);
                }
                //处理按钮显示
                button1.record = record;
                button2.record = record;
                button3.record = record;
                me.doEngFirstCheck_InitialNextStateButton(button1, 0);
                me.doEngFirstCheck_InitialNextStateButton(button2, 1);
                me.doEngFirstCheck_InitialNextStateButton(button3, 2);

                me.doEngFirstCheckTask_setReadOnly(nextstates);

                Ext.getCmp('EngFirstCheckTask_Form').setRecord(record);

                typeid = record.get('typeid');
                nowtypeid = typeid;
                checkProjects = record.get('checkproject');

                //处理时间
                var items = Ext.getCmp('EngFirstCheckTask_Form').getItems().items;
                for(var k = 0,length = items.length;k <length; k++){
                    if(items[k].getXTypes().indexOf('datepickerfield')!=-1){
                        var dateStr = record.get(items[k].getName());
                        items[k].setValue(dateStr===''?'':new Date(dateStr));
                    }
                }
                //处理群控台数
                if(record.get('contype')===3 || record.get('contype')==='3'){
                    Ext.getCmp('EngFirstCheckTask_controlnum').setHidden(false);
                }

                if(record.get('isreformflag')=='Y'){
                    Ext.getCmp('EngFirstCheckTask_isreformflag').setValue(1);
                }else{
                    Ext.getCmp('EngFirstCheckTask_isreformflag').setValue(0);
                }

                taskcheckuserArr = record.get('checkuser');
                //处理检验人员
                var checkusers = record.get('checkuser');
                var checkuserStr="";
                var checkeduser = "";
                //处理数组
                for(var i = 0; i < checkusers.length; i++){
                    checkuserStr = checkuserStr + checkusers[i].username + '('+
                        checkusers[i].usertypename+')';
                    if(i!=checkusers.length-1){
                        checkuserStr = checkuserStr +',';
                    }
                    if(i!==0){
                         checkeduser+=',';
                     }
                     checkeduser+=checkusers[i].userid+'_'+checkusers[i].departmentid+'_'+checkusers[i].usertype;
                 }
                Ext.getCmp('EngFirstCheckTask_checkuserName').setValue(checkuserStr);
                Ext.getCmp('EngFirstCheckTask_checkuser').setValue(checkeduser);

                //检查项目
                if(record.data.checkproject.length===0){
                    //没有检验项目时要获取检验项目
                    Ext.getCmp('EngFirstCheckTask_CheckProList').getStore().loadDat(
                        function(){
                            //检查项目统计
                            me.doEngFirstCheckTask_showCount();
                        },
                        function(){
                            Ext.toast('获取检验项目失败');
                        },
                        {
                            typeid:Ext.getCmp('EngFirstCheckTask_typeid').getValue()
                        }
                    );
                }else{

                    Ext.getCmp('EngFirstCheckTask_CheckProList').
                        getStore().setData(record.data.checkproject);

                }




                //检查项目统计
                me.doEngFirstCheckTask_showCount();

                if(record.data.firstcheckparts.length===0){
                    //只读时才显示无配件
        //             if(readActions.indexOf(action)!=-1){
                    if(isReadOnly){
                        Ext.getCmp('EngFirstCheckTask_NoPartInfo').setHidden(false);
                        Ext.getCmp('EngFirstCheckTask_PartList').suspendEvents();
                    }
                }
                //零部件
                Ext.getCmp('EngFirstCheckTask_PartList').
                    getStore().setData(record.data.firstcheckparts);


                //现场信息显示照片
                var pictures = record.get('sitephoto');//照片信息
                if(pictures!==null&&pictures.length>0){
                    for(var z=0;z<pictures.length;z++){
                        var index = z+1;
                        var ImgID = 'EngFirstCheckTask_photo_'+index;
                        var pictureBase64 = pictures[z].pic;
                        var ImgSrc = 'data:image/jpeg;base64,' +pictureBase64;
                        Ext.getCmp(ImgID).setSrc(ImgSrc);
                        //设置label
                        for(var q = 1;q<=pictures.length;q++){
                            var LabelID1 ='EngFirstCheckTask_photo_'+index+'_label_1';
                            Ext.getCmp(LabelID1).setHtml(pictures[z].takeremark);
                        }
        //                 for(var p = 1;p<pictures.length;p++){
        //                     var LabelID2 ='EngFirstCheckTask_photo_'+index+'_label_2';
        //                     Ext.getCmp(LabelID2).setHtml(pictures[z].remark);
        //                 }

        //                 if(action!='修改'){
                        if(isReadOnly){
                            Ext.getCmp(ImgID).setItemId('EngFirstCheckTask_photoX');
                        }else{
                            //修改
                            Ext.getCmp(ImgID).setItemId('EngFirstCheckTask_photo');
                            //显示相机图标
                            if(index==pictures.length){
                                Ext.getCmp('EngFirstCheckTask_photo_'+(index+1))
                                    .setSrc('resources/images/camera.png');
                                //设itemid响应点击事件
                                Ext.getCmp('EngFirstCheckTask_photo_'+(index+1))
                                    .setItemId('EngFirstCheckTask_camera');
                            }
                        }

                    }
                    //修改的时候不需要隐藏
        //             if(action!='修改'){
                    if(isReadOnly){
                        //没图片信息就把图片隐藏
                            for(k=1;k<7;k++){
                                var img = 'EngFirstCheckTask_photo_'+k;
                                var imgsrc = Ext.getCmp(img).getSrc();
                                if(imgsrc==='resources/images/camera.png'||imgsrc=='resources/images/notPhoto.png'){
                                    Ext.getCmp(img).setHidden(true);
                                }
                            }
                    }
                }else{
        //             if(action!='修改'){
                    if(isReadOnly){
                        //没图片信息就把图片隐藏
                        Ext.getCmp('EngFirstCheckTask_ImgCtn').setHidden(true);
                        Ext.getCmp('EngFirstCheckTask_NoSceneInfo').setHidden(false);
                    }
                }
                loadMask.hide();
            },

            function(){
                loadMask.hide();
                Ext.toast('获取首检任务单信息失败');
            },
            {jnlno:jnlno,url:url}
        );

        if(!isReadOnly){

            //初始化零部件列表滑动效果
            var partList = Ext.getCmp('EngFirstCheckTask_PartList');
            partList.setPlugins(
                [
                    {
                        xclass: 'ux.SlideActions',
                        openPosition: 75,
                        buttons:
                        [
                            // 删除按钮
                            {
                                xtype: 'button',
                                baseCls: 'x-button liftnet-list-button liftnet-bgColor-red',
                                text: '<i class="fa fa-lg fa-trash-o"></i>',
                                listeners: {
                                    tap: function(button, e){
                                        e.stopPropagation();
                                        return false;
                                    },
                                    scope: this
                                },
                                handler: function(button, e) {
                                    partList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                    Ext.Msg.confirm("注意", "是否确认删除?", function(n) {
                                                if(n=='no')return;
                                                partList.getStore().remove(button.getRecord());
                                            });

                                }
                            }
                        ]
                    }
                ]
            );

        }

        // 特殊操作直接滚动到页末
        // if(action==='审核'||action==='同意'||action==='不同意') {
        //     var task = Ext.create('Ext.util.DelayedTask', function() {
        //         Ext.getCmp('EngFirstCheckTask_Form').getScrollable().getScroller().scrollToEnd(true);
        //         task.cancel();
        //     });
        //     task.delay(300);
        // }
    },

    onEngFirstCheckTask_elevatoridFocus: function(textfield) {
        //电梯型号选择
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{elevatorname}</div>' +
        '<div class="liftnet-font-size12 liftnet-fontColor-gray">{facname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftdtxhlist',
            storeparm: {
                userid: global.getUserId(),
                searchname: textfield.getValue(),
                curpagenum: 1,
                pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: true,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.searchname = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFirstCheckTask_Form').setValues({
                        elevatorname: record
                    });

                    //需要判断输入的型号是否存在、不存在要提示
                    dataUtil.createStore('first_check_elevatorname').loadDat(
                        function(existence){
                            if(existence==='N'){
                                Ext.toast('未存在该型号,将自动新建');
                            }
                        },function(){
                            console.log('Adapter facil....');
                        },{
                            userid:global.getUserId(),
                            elevatorname: record,
                            opr:'elevator'
                        }
                    );


                } else {
                    Ext.getCmp('EngFirstCheckTask_Form').setValues({
                        elevatorid:record.get('elevatorid'),
                        elevatorname: record.get('elevatorname'),
                        facname:record.get('facname'),
                        makeunit:record.get('facname'),
                        r1:record.get('facid')
                    });
                }
            }
        });
        textfield.blur();


    },

    onEngFirstCheckTask_facnameFocus: function(textfield) {
        //电梯品牌选择

        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{facname}</div>' +
        '<div class="liftnet-font-size12 liftnet-fontColor-gray">{facid}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftfaclist',
            storeparm: {
                userid: global.getUserId(),
                searchname: textfield.getValue(),
                curpagenum: 1,
                pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: true,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.searchname = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFirstCheckTask_Form').setValues({
                        facname: record
                    });

                    //需要判断输入的品牌是否存在、不存在要提示
                    dataUtil.createStore('first_check_elevatorname').loadDat(
                        function(existence){
                            if(existence==='N'){
                                Ext.toast('未存在该品牌,将自动新建');
                            }
                        },function(){
                            console.log('Adapter facil....');
                        },{
                            userid:global.getUserId(),
                            facname: record,
                            opr:'facname'
                        }
                    );
                } else {
                    Ext.getCmp('EngFirstCheckTask_Form').setValues({
                        r1: record.get('facid'),
                        facname : record.get('facname')
                    });
                }
            }
        });
        textfield.blur();
    },

    onEngFirstCheckTask_domainnameFocus: function(textfield) {
        //获取区域
        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{areaname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftdomainid',
            storeparm: {
               userid: global.getUserId(),
               searchkey: textfield.getValue(),
               areatype: 'A',
               areaid: ''
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('areaname');
                    textfield.setValue(value);
                    Ext.getCmp('EngFirstCheckTask_domainid').setValue(record.get('areaid'));

                    //清空省份、所在市、县区
                    Ext.getCmp('EngFirstCheckTask_provinciallevelname').setValue();
                    Ext.getCmp('EngFirstCheckTask_provinciallevelid').setValue();
                    Ext.getCmp('EngFirstCheckTask_citylevelname').setValue();
                    Ext.getCmp('EngFirstCheckTask_citylevelid').setValue();
                    Ext.getCmp('EngFirstCheckTask_countylevelname').setValue();
                    Ext.getCmp('EngFirstCheckTask_countylevelid').setValue();

                }
            }
        });
        textfield.blur();

    },

    onEngFirstCheckTask_provinciallevelnameFocus: function(textfield) {

        //获取省份
        var areaid = Ext.getCmp('EngFirstCheckTask_domainid');//区域ID

        if(areaid.getValue()===''){
            Ext.toast('请先选择区域!');
            return;
        }

        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{areaname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftprovinciallevelid',
            storeparm: {
               userid: global.getUserId(),
               searchkey: textfield.getValue(),
               areatype: 'B',
               areaid: areaid.getValue()
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('areaname');
                    textfield.setValue(value);
                    Ext.getCmp('EngFirstCheckTask_provinciallevelid').setValue(record.get('areaid'));

                    //清空所在市、县区
                    Ext.getCmp('EngFirstCheckTask_citylevelname').setValue();
                    Ext.getCmp('EngFirstCheckTask_citylevelid').setValue();
                    Ext.getCmp('EngFirstCheckTask_countylevelname').setValue();
                    Ext.getCmp('EngFirstCheckTask_countylevelid').setValue();
                }
            }
        });
        textfield.blur();

    },

    onEngFirstCheckTask_citylevelnameFocus: function(textfield) {

        //获取所在市
        var areaid = Ext.getCmp('EngFirstCheckTask_provinciallevelid');//省份ID

        if(areaid.getValue()===''){
            Ext.toast('请先选择省份!');
            return;
        }

        if(areaid.getValue()=='110000' || areaid.getValue()=='120000' || areaid.getValue()=='310000'|| areaid.getValue()=='500000'|| areaid.getValue()=='810000'|| areaid.getValue()=='820000'){
            Ext.toast('直辖市或特别行政区请直接选择县区!');
            return;
        }

        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{areaname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftcitylevelid',
            storeparm: {
               userid: global.getUserId(),
               searchkey: textfield.getValue(),
               areatype: 'C',
               areaid: areaid.getValue()
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('areaname');
                    textfield.setValue(value);
                    Ext.getCmp('EngFirstCheckTask_citylevelid').setValue(record.get('areaid'));

                    //清空县区
                    Ext.getCmp('EngFirstCheckTask_countylevelname').setValue();
                    Ext.getCmp('EngFirstCheckTask_countylevelid').setValue();
                }
            }
        });
        textfield.blur();

    },

    onEngFirstCheckTask_countylevelnameFocus: function(textfield) {

        //获取县区
        var areaid = Ext.getCmp('EngFirstCheckTask_citylevelid');//所在市ID
        var provid = Ext.getCmp('EngFirstCheckTask_provinciallevelid');//省份ID

        if(provid.getValue()!='110000' && areaid.getValue()!='120000' && areaid.getValue()!='310000'&& areaid.getValue()!='500000'&& areaid.getValue()!='810000'&& areaid.getValue()!='820000'){
            if(areaid.getValue()===''){
                Ext.toast('请先选择所在市!');
                return;
            }
        }


        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{areaname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_liftcountylevelid',
            storeparm: {
               userid: global.getUserId(),
               searchkey: textfield.getValue(),
               areatype: 'D',
               areaid: areaid.getValue()
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    var value = record.get('areaname');
                    textfield.setValue(value);
                    Ext.getCmp('EngFirstCheckTask_countylevelid').setValue(record.get('areaid'));
                }
            }
        });
        textfield.blur();

    },

    onEngFirstCheckTask_r2Focus: function(textfield) {
        //坐标选择
        //点击坐标进到地图界面
        var lng = '';
        var lat = '';
        if(textfield.getValue()!==''){
            lng = textfield.getValue().split(',')[0];
            lat = textfield.getValue().split(',')[1];
        }else{
            lng = map.getLocation().lng;
            lat = map.getLocation().lat;
        }
        console.log(lng,lat);

        viewUtil.goNext('Engineer.EngFirstCheckTask_Map',{lng:lng,lat:lat,fc:function(element, eOpts){
            var getlnglat = function(e){
                var map = new BMap.Map("EngFirstCheckTask_MapPanel");
                var pointA = new BMap.Point(e.point.lng,e.point.lat);
                var pointB = new BMap.Point(lng,lat);
                //if((map.getDistance(pointA,pointB)).toFixed(2)>2000){
                //    Ext.toast('请选择离当前位置两公里范围的地点,'+(map.getDistance(pointA,pointB)).toFixed(2));
                //}else{
                //}

                console.log(e.point.lng+'____+__'+e.point.lat);
                var r2 = e.point.lng+','+e.point.lat;
                Ext.getCmp('EngFirstCheckTask_r2').setValue(r2);

                var parm = {
                    lng:e.point.lng,
                    lat:e.point.lat
                };
                viewUtil.goLast();
            };

            map.create2('EngFirstCheckTask_MapPanel',{lng:lng,lat:lat,zoom:18,fc:getlnglat});

        }});
    },

    onEngFirstCheckTask_checkuserNameFocus: function(textareafield) {
        //检验人员选择

        // 首检任务单 - 选择检查人员

        viewUtil.goNext('Engineer.EngFirstCheckCheckUser',
                        {
                            checkuserArr:taskcheckuserArr,
                            show:Ext.getCmp('EngFirstCheckTask_checkuserName'),
                            hide:Ext.getCmp('EngFirstCheckTask_checkuser'),
                            flag:'Task'
                        });

        // var tpl =
        //     '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{username}</div>' +
        //     '<div class="liftnet-font-size12 liftnet-fontColor-gray">{department}</div>'
        //     ;

        // viewUtil.goNext('Common.ComMultiSelect', {
        //     textfield: textfield,
        //     storeid: 'firstcheck_checkmanlist',
        //     storeparm: {
        //         userid: global.getUserId(),
        //         curpagenum:1,
        //         pagesize:20,
        //         searchkey:textfield.getValue(),
        //     },
        //     itemtpl: tpl,
        //     paging: true,
        //     allowedit: false,
        //     allowsearch: false,
        // //     fnSetFilter: Ext.emptyFn,
        //     fnSetFilter: function(parm, text) {
        //                 parm.searchkey = text;
        //                 return parm;
        //             },
        //     fnSelected: function(record) {
        //         if(typeof(record)==='string') {
        //             Ext.getCmp('EngFirstCheckTask_Form').setValues({
        //                 checkeduser: record
        //             });
        //         } else {
        //              var username='';
        //              var checkusers = '';
        //              for(var i = 0; i < record.length; i++){
        //                 username = username + record[i].data.username;
        //                 if(i!=record.length-1){
        //                     username = username +',';
        //                 }
        //                  if(i!==0){
        //                      checkusers+=',';
        //                  }
        //                  checkusers+=record[i].get('userid')+'_'+record[i].get('departmentid')+'_'+record[i].get('usertype');
        //              }
        //              console.log(checkusers);
        //              Ext.getCmp('EngFirstCheckTask_Form').setValues({
        //                 checkuser:checkusers,
        //                 checkuserName: username,
        //             });
        //         }
        //     }
        // });
        // textfield.blur();
    },

    onEngFirstCheckTask_contypeChange: function(selectfield, newValue, oldValue, eOpts) {

        if(newValue==3){
            Ext.getCmp('EngFirstCheckTask_controlnum').setHidden(false);
        }else{
            Ext.getCmp('EngFirstCheckTask_controlnum').setHidden(true);
        }
    },

    onEngFirstCheckTask_BtnSaveTap: function(button, e, eOpts) {
        var btnText = button.getText();

        if(btnText==='保存'||btnText==='提交'){
        //     this.doEngFirstCheckTask_Show_Process(button);
            this.doTaskUpdateShowAlertDialog(button);
            return;
        }else {
            this.doTaskHanderShowAlertDialog({operationIndex:button.getText(),
        //     this.doEngFirstCheckTask_Process({operationIndex:button.getText(),
                                          state:'',
                                          jnl:Ext.getCmp('EngFirstCheckTask_jnlno').getValue()});
        }
        // this.doEngFirstCheckTask_Show_Process(button);
    },

    onEngFirstCheckTask_BtnSave2Tap: function(button, e, eOpts) {
        this.doEngFirstCheckTask_Show_Process(button);
    },

    onEngFirstCheckTask_BtnCommitTap: function(button, e, eOpts) {
        // this.doEngFirstCheckTask_Show_Process(button);
        var btnText = button.getText();

        if(btnText==='保存'||btnText==='提交'){
        //     this.doEngFirstCheckTask_Show_Process(button);
            this.doTaskUpdateShowAlertDialog(button);
            return;
        }else {
            this.doTaskHanderShowAlertDialog({operationIndex:button.getText(),
        //     this.doEngFirstCheckTask_Process({operationIndex:button.getText(),
                                          state:'',
                                          jnl:Ext.getCmp('EngFirstCheckTask_jnlno').getValue()});
        }

    },

    onEngFirstCheckTask_BtnCancelTap: function(button, e, eOpts) {
        // this.doEngFirstCheckTask_Show_Process(button);
        var btnText = button.getText();

        if(btnText==='保存'||btnText==='提交'){

        //     this.doEngFirstCheckTask_Show_Process(button);
            this.doTaskUpdateShowAlertDialog(button);
            return;
        }else {
            this.doTaskHanderShowAlertDialog({operationIndex:button.getText(),
        //     this.doEngFirstCheckTask_Process({operationIndex:button.getText(),
                                          state:'',
                                          jnl:Ext.getCmp('EngFirstCheckTask_jnlno').getValue()});
        }

    },

    onEngFirstCheckTask_BtnCommit2Tap: function(button, e, eOpts) {
        this.doEngFirstCheckTask_Show_Process(button);
    },

    onEngFirstCheckTask_BtnAgreeTap: function(button, e, eOpts) {
        this.doEngFirstCheckTask_Process({operationIndex:button.getText(),
                                          state:'',
                                          jnl:Ext.getCmp('EngFirstCheckTask_jnlno').getValue()});
    },

    onEngFirstCheckTask_BtnDisagreeTap: function(button, e, eOpts) {
        var me = this;
        var sj = me.doEngFirstCheck_GetSJForm();

        Ext.Msg.prompt('原因', null,
        	function(buttonId,value) {
        		if(buttonId=='ok'){
        			if(value===''){
        				Ext.toast('审核操作失败,请输入不同意原因');
        				return;
        			}else{
        				remark=value;
        				//首检任务单处理(不同意)
                        loadMask.show();
                        var adapterParm = {
                                            userid:global.getUserId(),
                                            jnlno:sj.jnlno,
                                            state:'不同意',
                                            remark:remark,
                                            sj:sj
                                        };
                        var store = dataUtil.createStore('first_check_job_sj');
                        store.updateDat(
                            function(jnl) {
                                loadMask.hide();
                                if(jnl) {
                                    Ext.toast('操作完成！单号是：' + jnl);
                                } else {
                                    Ext.toast('操作完成！');
                                }

                        // 刷新首检任务列表
                                me.doEngFirstCheck_Task_Search(Ext.getCmp('EngFirstCheck_TaskStatus'));
        //                         me.doEngFirstCheck_LoadTaskList(
        //                             1,
        //                             pagesize,
        //                             Ext.getCmp('EngFirstCheckTask_Search').getValue()||'',
        //                             'refresh'
        //                         );
                                viewUtil.goLast();
                            },
                            function(info) {
                                loadMask.hide();
                                if(!info) info = '(未知)';
                                Ext.toast('未能完成' + action + '操作，错误信息是：' + info);
                            },
                            adapterParm
                        );

                    }

        		}
        		},
        		null,
        		true,
        		null,
        		{
        			autoCapitalize: true,
        			placeHolder: '请输入审核原因'
        		}
        	);
        // this.doEngFirstCheckTask_Process({operationIndex:button.getText(),
        //                                   jnl:Ext.getCmp('EngFirstCheckTask_jnlno').getValue()});
    },

    onEngFirstCheckTask_BtnAddPartsTap: function(button, e, eOpts) {
        //跳转到添加零部件页面
        viewUtil.goNext('Engineer.EngFirstCheckTaskAddParts',{});
    },

    onEngFirstCheckTask_PartListTap: function(dataview, index, target, record, e, eOpts) {
        if(isReadOnly){
            return;
        }
        //跳转到添加零部件页面
        viewUtil.goNext('Engineer.EngFirstCheckTaskAddParts',
                        {record:record,index:index});
    },

    onEngFirstCheckTaskAddParts_BtnReturnTap: function(button, e, eOpts) {

        viewUtil.goLast();
    },

    onEngFirstCheckTaskAddPartsInitialize: function(component, eOpts) {
        //零部件类型.
        partsid = "";
        dataUtil.createStore('eng_partstypelist').loadDat(Ext.emptyFn,Ext.emptyFn);
        var record = component.initialConfig.parm.record;
        partStoreIndex = component.initialConfig.parm.index;
        if(record){
            partsid =record.get('partsid');
            //设置数据
            Ext.getCmp('EngFirstCheckTaskAddParts_Form').setRecord(record);
            if(record.get('iscore')==='Y'){
                Ext.getCmp('EngFirstCheckTaskAddParts_IsCore').setValue(1);
            }else{
                Ext.getCmp('EngFirstCheckTaskAddParts_IsCore').setValue(0);
            }
            var src = record.get('partsfile');
            if(src !== "resources/images/camera.png"){
                src = 'data:image/jpeg;base64,'+src;
            }
            //设置图片
            Ext.getCmp('EngFirstCheckTaskAddParts_File').setSrc(src);
            console.log(src);
            return;
        }

    },

    onEngFirstCheckTaskAddPartsChange: function(textfield, newValue, oldValue, eOpts) {

    },

    onEngFirstCheckTaskAddParts_CommitButtonTap: function(button, e, eOpts) {

        //零部件编码判断(后台校验，前台校验)
        var partStore = Ext.getCmp('EngFirstCheckTask_PartList').getStore();
        var code = Ext.getCmp('EngFirstCheckTaskAddPart_Code').getValue();

        //修改时不需要校验
        if(partsid!==code){//没有修改零部件编码时不需要校验
            //前台校验
            if(partStore.isExist(code)){
                Ext.toast('零部件编码已存在，请重新输入');
                return;
            }
            //后台校验
            var checkStore = dataUtil.createStore('eng_firstcheck_checkpart');
            checkStore.isExist(
                function(ret){
                    if(ret){
                        Ext.toast('零部件编码已存在，请重新输入');
                    }else{
                        fn();
                    }
                },
                function(info){
                    Ext.toast(info);
                },
                code);

        }else{
            fn();
        }

        function fn(){
            //检查必填项目
            var form = Ext.getCmp('EngFirstCheckTaskAddParts_Form');
            var fields = form.getFields();
            for(var name in fields) {
                field = fields[name];
                if(field.getRequired() && field.getValue()==='') {
                    Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
                    return;
                }
            }
            //处置Y/N
            var part = form.getValues();
            var iscore = {"1":"Y","0":"N"};
            var iscoreShow = {"Y":"核心零件","N":"非核心零件"};
            var textcolor = {"Y":"liftnet-fontColor-red","N":"liftnet-fontColor-darkGray"};
            part.iscore = iscore[part.iscore];
            part.iscoreShow = iscoreShow[part.iscore];
            part.textcolor = textcolor[part.iscore];

            //处置图片
            part.partsfilename='';
            var partsfile = Ext.getCmp('EngFirstCheckTaskAddParts_File').getSrc();
            console.log(partsfile);
            if(partsfile===undefined){
                part.partsfile = '';
            }
            if(partsfile ==='resources/images/camera.png'){
                part.partsfile = '';
            }else{
                part.partsfile = partsfile.split(',')[1] || partsfile;
            }

            var store = Ext.getCmp('EngFirstCheckTask_PartList').getStore();
            if(partStoreIndex!==undefined){
                store.getAt(partStoreIndex).set(part);//更新
            }else{
                store.add(part);//添加
            }

            // Ext.getCmp('EngFirstCheckTask_PartList').getStore().add(part);
            Ext.getCmp('EngFirstCheckTask_PartList').refresh();

            viewUtil.goLast();
        }


    },

    onEngFirstCheck_JobStatusButtonTap: function(button, e, eOpts) {
        popMenu.show('Engineer.EngFirstCheckJobStatus', button);
    },

    onEngFirstCheck_TaskStatusButtonTap: function(button, e, eOpts) {
        popMenu.show('Engineer.EngFirstCheckTaskStatus', button);
    },

    onEngFirstCheckJobStatus_0ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Job_Search(button);
    },

    onEngFirstCheckJobStatus_1ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Job_Search(button);
    },

    onEngFirstCheckJobStatus_2ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Job_Search(button);
    },

    onEngFirstCheckJobStatus_3ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Job_Search(button);
    },

    onEngFirstCheckTaskStatus_0ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Task_Search(button);
    },

    onEngFirstCheckTaskStatus_1ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Task_Search(button);
    },

    onEngFirstCheckTaskStatus_2ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Task_Search(button);
    },

    onEngFirstCheckTaskStatus_3ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Task_Search(button);
    },

    onEngFirstCheckTaskStatus_4ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Task_Search(button);
    },

    onEngFirstCheckTaskStatus_5ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Task_Search(button);
    },

    onEngFirstCheckTaskStatus_6ButtonTap: function(button, e, eOpts) {
        loadMask.show();
        this.doEngFirstCheck_Task_Search(button);
    },

    onEngFirstCheckTaskAddParts_FileTap: function(image, e, eOpts) {
        //添加附件
        var me = this;
        if(Ext.getCmp('EngFirstCheckTaskAddParts_File').getSrc()==='resources/images/camera.png'){
            //没有照片弹出拍照对话框
            Ext.getCmp('addpart_camera_show').show();
        }else{
            //有照片则查看大图
            viewUtil.goNext('Engineer.EngFirstCheckTask_AddPartPhoto',
                            {src:Ext.getCmp('EngFirstCheckTaskAddParts_File').getSrc()}
                           );
        }

    },

    onaddpart_source_camearTap: function(button, e, eOpts) {
        //相机
        Ext.getCmp('addpart_camera_show').hide();
        console.log('-----进入相机');
        var parm = {
            callback :function(filename){
                //完成拍照后回调

                //判断是否有相片返回
                if(filename!==''){
                    Ext.getCmp('EngFirstCheckTaskAddParts_File').setSrc(
                        filename
                    );
                }
            },//回调函数
            source:'CAMEAR',// 相机或相册，CAMEAR/ALBUM
            direction:'FRONT',// 前镜头或后镜头，FRONT/BACK
            width:640,	//width
            height:640 // height
        };
        phone.takePhoto(parm);
    },

    onaddpart_source_albumTap: function(button, e, eOpts) {
        //相册
        Ext.getCmp('addpart_camera_show').hide();
        console.log('-----进入相机');
        var parm = {
            callback :function(filename){
                //选择图片后回调
                //判断是否有照片返回

                if(filename!==''){
                    Ext.getCmp('EngFirstCheckTaskAddParts_File').setSrc(
                        filename
                    );
                }
            },//回调函数
            source:'ALBUM',// 相机或相册，CAMEAR/ALBUM
            direction:'FRONT',// 前镜头或后镜头，FRONT/BACK
            width:640,	//width
            height:640 // height
        };
        phone.takePhoto(parm);
    },

    onEngFirstCheckTask_AddPartPhotoInit: function(component, eOpts) {

        var src = component.initialConfig.parm.src;
        Ext.getCmp('EngFirstCheckTask_AddPartPhoto_show').setSrc(src);

    },

    onEngFirstCheckTask_AddPartPhoto_BtnDelTap: function(button, e, eOpts) {
        //删除
        Ext.Msg.confirm("注意", "是否确认删除此图片?", function(n) {
                    if(n=='no')return;
                    Ext.getCmp('EngFirstCheckTaskAddParts_File').setSrc('resources/images/camera.png');
                    viewUtil.goLast();
                });
    },

    onEngFirstCheckTask_AddPartPhoto_BtnReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngFirstCheck_TplListActiveItemChange: function(container, value, oldValue, eOpts) {
        if(!Ext.getCmp('EngFirstCheck_BtnAdd')){
            return;
        }
        //当前界面为派工单列表界面同时有新增权限
        var isShowAddBtn = !(value._itemId=='EngFirstCheck_CtnJobList'&&jobaddjurisdiction);
        Ext.getCmp('EngFirstCheck_BtnAdd').setHidden(isShowAddBtn);
    },

    onEngFirstCheckTask_TplListActiveItemChange: function(container, value, oldValue, eOpts) {

        var me = this;
        if(value._itemId==='EngFirstCheckTask_CtnCheckProject'){
            var newTypeId = Ext.getCmp('EngFirstCheckTask_typeid').getValue();
            //没有值不执行任何操作
            if(!newTypeId){
                return;
            }
            //当前typeid与新的typeid一致，不执行任何操作
            if(nowtypeid==newTypeId){
                return;
            }
            //有值但是不变，加载原来的数据
            if(typeid==newTypeId){
                Ext.getCmp('EngFirstCheckTask_CheckProList').getStore().setData(checkProjects);
                //检查项目统计
                me.doEngFirstCheckTask_showCount();
            }else{
                nowtypeid=newTypeId;
                //值改变后获取新检验项目
                loadMask.show();
                Ext.getCmp('EngFirstCheckTask_CheckProList').getStore().loadDat(
                    function(){
                        loadMask.hide();
                        //检查项目统计
                        me.doEngFirstCheckTask_showCount();
                    },
                    function(){
                        loadMask.hide();
                        Ext.toast('获取检验项目失败');
                    },
                    {
                        typeid:newTypeId
                    }
                );
            }
        }
    },

    onEngFirstCheckTask_cameraImageTap: function(image, e, eOpts) {
        var me = this;
        Ext.getCmp('task_camera_show').show();
    },

    onEngTaskPhotoInit: function(component, eOpts) {

        var ImgID = component.initialConfig.parm.ImgID;
        var flag = component.initialConfig.parm.flag;
        var NextImgId = component.initialConfig.parm.NextImgId;
        var fcname = component.initialConfig.parm.fcname;
        console.log(flag);
        if(flag=='Y'){
            Ext.getCmp('EngTaskPhoto_BtnDel').setHidden(true);
            Ext.getCmp('EngTaskPhoto_PanelBtnSave').setHidden(true);
            Ext.getCmp('EngTaskPhoto_remark').setReadOnly(true);
        }
        Ext.getCmp('EngTaskPhoto_ImgID').setValue(ImgID);
        Ext.getCmp('EngTaskPhotoNextImgId').setValue(NextImgId);
        Ext.getCmp('EngTaskPhotofcname').setValue(fcname);
        var ImgSrc = Ext.getCmp(ImgID).getSrc();
        Ext.getCmp('EngTaskPhoto_show').setSrc(ImgSrc);

        Ext.getCmp('EngTaskPhoto_remark').setValue(
            Ext.getCmp(ImgID+'_label_1').getHtml()
        );

        //跟Panel注册左右滑动事件
        // Ext.get('EngTaskPhoto_Panel').on('swipe', 'onFaultPhotoSwipe', this);


    },

    onEngTaskPhoto_BtnReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngTaskPhoto_BtnDelTap: function(button, e, eOpts) {
        //删除该照片
        var ImgID = Ext.getCmp('EngTaskPhoto_ImgID').getValue();

        var NextImgId = Ext.getCmp('EngTaskPhotoNextImgId').getValue();
        var fcname = Ext.getCmp('EngTaskPhotofcname').getValue();
        var fcname2 = NextImgId.substring(0,NextImgId.length-1);


        //判断是否存在相机照片
        var hasCamera = false;
        for(var i=1;i<7;i++){
            var imgID = NextImgId+i;
            var imgSrc = Ext.getCmp(imgID).getSrc();
            if(imgSrc==='resources/images/camera.png'){
                hasCamera = true;
            }
        }
        console.log(hasCamera);
        if(Ext.getCmp(ImgID)){
            if(hasCamera){
                Ext.getCmp(ImgID).setSrc('resources/images/notPhoto.png');
                Ext.getCmp(ImgID).setItemId();
            }else{
                Ext.getCmp(ImgID).setSrc('resources/images/camera.png');
                Ext.getCmp(ImgID).setItemId(fcname);
            }


            //冒泡排序
        for(var j=1;j<7;j++){
            for(var z=j+1;z<7;z++){
                var imgID2 = NextImgId+j;
                var imgSrc2 = Ext.getCmp(imgID2).getSrc();
        //         console.log(imgSrc2);
                if(imgSrc2!=='resources/images/camera.png' && imgSrc2!=='resources/images/notPhoto.png'){
                    continue;
                }else{
                    var imgID3 = NextImgId+z;
                    var imgSrc3 = Ext.getCmp(imgID3).getSrc();
                    if(imgSrc3!=='resources/images/camera.png' && imgSrc3!=='resources/images/notPhoto.png'){
                        Ext.getCmp(imgID2).setSrc(imgSrc3);
                        Ext.getCmp(imgID2).setItemId(fcname2);
                        Ext.getCmp(imgID3).setSrc(imgSrc2);
                        Ext.getCmp(imgID3).setItemId();
                        //修改label
                        Ext.getCmp(imgID2+'_label_1').setHtml(Ext.getCmp(imgID3+'_label_1').getHtml());
                        Ext.getCmp(imgID3+'_label_1').setHtml('');

                    }
                }
            }
        }
                //冒泡排序
        for(var j=1;j<7;j++){
            for(var z=j+1;z<7;z++){
                var imgID2 = NextImgId+j;
                var imgSrc2 = Ext.getCmp(imgID2).getSrc();
        //         console.log(imgSrc2);
                if(imgSrc2!=='resources/images/camera.png' && imgSrc2!=='resources/images/notPhoto.png'){
                    continue;
                }else{
                    var imgID3 = NextImgId+z;
                    var imgSrc3 = Ext.getCmp(imgID3).getSrc();
                    if(imgSrc3==='resources/images/camera.png'){
                        Ext.getCmp(imgID2).setSrc(imgSrc3);
                        Ext.getCmp(imgID2).setItemId(fcname);
                        Ext.getCmp(imgID3).setSrc(imgSrc2);
                        Ext.getCmp(imgID3).setItemId();
                        //修改label
                        Ext.getCmp(imgID2+'_label_1').setHtml(Ext.getCmp(imgID3+'_label_1').getHtml());
                        Ext.getCmp(imgID3+'_label_1').setHtml('');

                    }
                }
            }
        }

        }

        viewUtil.goLast();
    },

    onEngTaskPhoto_BtnSaveTap: function(button, e, eOpts) {
        //保存
        var imgid = Ext.getCmp('EngTaskPhoto_ImgID').getValue();
        Ext.getCmp(imgid+'_label_1').setHtml(
            Ext.getCmp('EngTaskPhoto_remark').getValue()
        );

        viewUtil.goLast();
    },

    onEngFirstCheckTask_photoTap: function(image, e, eOpts) {
        //EngFirstCheckTask_photo_1_label_1


        //点击图片时进入另一页面显示图片
        console.log('----ImgID----');
        var ImgID = image.getId();
        console.log(ImgID);
        console.log('----ImgID----');
        viewUtil.goNext('Engineer.EngTaskPhoto',{ImgID:ImgID,flag:'N',NextImgId:'EngFirstCheckTask_photo_',fcname:'EngFirstCheckTask_camera'});
    },

    onEngFirstCheckTask_photoXTap: function(image, e, eOpts) {
        //点击图片时进入另一页面显示图片
        console.log('----ImgID----');
        var ImgID = image.getId();
        console.log(ImgID);
        console.log('----ImgID----');
        viewUtil.goNext('Engineer.EngTaskPhoto',{ImgID:ImgID,flag:'Y',NextImgId:'EngFirstCheckTask_photo_',fcname:'EngFirstCheckTask_camera'});
    },

    ontask_source_camearButtonTap: function(button, e, eOpts) {
        Ext.getCmp('task_camera_show').hide();
        console.log('-----进入相机');
        var parm = {
            callback :function(filename){
                for(var i=1;i<7;i++){
                    var ImgID = 'EngFirstCheckTask_photo_'+i;
                    var Img = Ext.getCmp(ImgID);
                    var ImgSrc = Ext.getCmp(ImgID).getSrc();

                    if(filename!==''){
                        if(ImgSrc==='resources/images/camera.png'||ImgSrc==='resources/images/notPhoto.png'){
                            Img.setSrc(filename);
                            Img.setItemId('EngFirstCheckTask_photo');

                            if(i!==6){

                                var z = i+1;
                                var NextImgID = 'EngFirstCheckTask_photo_'+z;
                                console.log(NextImgID);
                                var NextImg = Ext.getCmp(NextImgID);
                                var NextImgSrc = Ext.getCmp(NextImgID).getSrc();
                                if(NextImgSrc=='resources/images/notPhoto.png' ){
                                    var IMGSHOW = true;
                                    for(var j=1;j<7;j++){
                                        var PID = 'EngFirstCheckTask_photo_'+j;
                                        var P = Ext.getCmp(PID);
                                        var PSrc = Ext.getCmp(PID).getSrc();
                                        if(PSrc==='resources/images/camera.png'){
                                            IMGSHOW = false;
                                        }

                                    }
                                    if(IMGSHOW){
                                        NextImg.setItemId('EngFirstCheckTask_camera');
                                        NextImg.setSrc('resources/images/camera.png');
                                    }
                                }
                            }

                            return;
                        }
                    }
                }
            },//回调函数
            source:'CAMEAR',// 相机或相册，CAMEAR/ALBUM
            direction:'FRONT',// 前镜头或后镜头，FRONT/BACK
            width:640,	//width
            height:640 // height
        };
        phone.takePhoto(parm);
    },

    ontask_source_albumButtonTap: function(button, e, eOpts) {
        Ext.getCmp('task_camera_show').hide();
        console.log('-----进入相册');
        var parm = {
            callback :function(filename){
                for(var i=1;i<7;i++){
                    var ImgID = 'EngFirstCheckTask_photo_'+i;
                    var Img = Ext.getCmp(ImgID);
                    var ImgSrc = Ext.getCmp(ImgID).getSrc();


                    if(filename!==''){
                        if(ImgSrc==='resources/images/camera.png'||ImgSrc==='resources/images/notPhoto.png'){
                            Img.setSrc(filename);
                            Img.setItemId('EngFirstCheckTask_photo');

                            if(i!==6){
                                var z = i+1;
                                var NextImgID = 'EngFirstCheckTask_photo_'+z;
                                console.log(NextImgID);
                                var NextImg = Ext.getCmp(NextImgID);
                                var NextImgSrc = Ext.getCmp(NextImgID).getSrc();
                                if(NextImgSrc=='resources/images/notPhoto.png' ){
                                    var IMGSHOW = true;
                                    for(var j=1;j<7;j++){
                                        var PID = 'EngFirstCheckTask_photo_'+j;
                                        var P = Ext.getCmp(PID);
                                        var PSrc = Ext.getCmp(PID).getSrc();
                                        if(PSrc==='resources/images/camera.png'){
                                            IMGSHOW = false;
                                        }

                                    }
                                    if(IMGSHOW){
                                        NextImg.setItemId('EngFirstCheckTask_camera');
                                        NextImg.setSrc('resources/images/camera.png');
                                    }
                                }
                            }

                            return;
                        }
                    }
                }
            },//回调函数
            source:'ALBUM',// 相机或相册，CAMEAR/ALBUM
            direction:'FRONT',// 前镜头或后镜头，FRONT/BACK
            width:640,	//width
            height:640 // height
        };
        phone.takePhoto(parm);
    },

    onEngFirstCheckTask_MapInitialize: function(component, eOpts) {
        var lng = component.initialConfig.parm.lng;//当前经度
        var lat = component.initialConfig.parm.lat;//当前纬度

        Ext.getCmp('EngFirstCheckTask_MapPanel').on('painted',component.initialConfig.parm.fc);

    },

    onEngFirstCheckTask_BtnReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngFirstCheckTask_MapDestory: function(eOpts) {
        map.destroyById('EngFirstCheckTask_MapPanel');
    },

    onEngFirstCheckCheckUser2_usernameTap: function(textfield) {
        //跳转到选择人员界面
        // 新增派工单 - 选择检查人员
        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{username}</div>' +
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{department}</div>'
            ;

        var items = Ext.getCmp('EngFirstCheckCheckUser_List').getStore().getData().items;
        var usernames=[];
        for(var i = 0,length = items.length; i<length;i++){
            usernames[i] = items[i].data.username;
        }
        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'firstcheck_checkmanlist',
            storeparm: {
                userid: global.getUserId(),
                curpagenum:1,
                pagesize:20,
                searchkey:textfield.getValue(),
            },
            itemtpl: tpl,
            paging: true,
            allowedit: false,
            allowsearch: false,
        //     fnSetFilter: Ext.emptyFn,
            fnSetFilter: function(parm, text) {
                parm.searchkey = text;
                return parm;
            },
            filterData:{'field':'username','value':usernames},
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFirstCheckCheckUser2_Form').setValues({
                        checkeduser: record
                    });
                } else {
                    var userid = record.get('userid');
                    if(Ext.getCmp('EngFirstCheckCheckUser_List').getStore()
                        .isExist(userid)){
                        Ext.toast('不能选择重复的检查人员');
                    }else{
                        Ext.getCmp('EngFirstCheckCheckUser2_Form').setRecord(record);
                    }
                 }
             }
         });
        textfield.blur();
    },

    onEngFirstCheckCheckUser2_BtnReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngFirstCheckCheckUser_BtnReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngFirstCheckCheckUser_BtnAddTap: function(button, e, eOpts) {
        //跳转到添加检验人员界面
        viewUtil.goNext('Engineer.EngFirstCheckCheckUser2',{});
    },

    onEngFirstCheckCheckUser2_BtnSaveTap: function(button, e, eOpts) {
        //跳转到添加检验人员界面
        var form = Ext.getCmp('EngFirstCheckCheckUser2_Form');
        var fields = form.getFields();
        for(var name in fields) {
            field = fields[name];
            if(field.getRequired() && field.getValue()==='') {
                Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
                return;
            }
        }
        var record = form.getValues();
        var usertypename = {"0":"负责人","1":"检验人员","2":"实习生","3":"其他人员"};
        record.usertypename = usertypename[record.usertype];
        var store = Ext.getCmp('EngFirstCheckCheckUser_List').getStore();

        if(index!==undefined){
            store.getAt(index).set(record);//更新
        }else{
            store.add(record);//添加
        }

        // store.addOrUpdate(record);

        Ext.getCmp('EngFirstCheckCheckUser_List').refresh();
        viewUtil.goLast();
    },

    onEngFirstCheckCheckUser_BtnSaveTap: function(button, e, eOpts) {
        //跳转回添加界面
        var store = Ext.getCmp("EngFirstCheckCheckUser_List").getStore();

        //检查是否有人
        if(store.getAllCount()<=0){
            Ext.toast("请选择至少一名检验人员");
            return;
        }

        //检查负责人
        if(store.getPrincipal()===0){
            Ext.toast("请指定一个负责人");
            return;
        }else if(store.getPrincipal()>1){
            Ext.toast("只能指定一个负责人");
            return;
        }

        //回显名字
        var checkuserName = "";
        var items = store.getData().items;
        for(var i in items){
            checkuserName+=items[i].data.username+'('+items[i].data.usertypename+'),';
        }
        checkuserName = checkuserName.substring(0,checkuserName.length-1);
        // Ext.getCmp('EngFirstCheckJobAdd_checkuserName').setValue(checkuserName);
        show.setValue(checkuserName);
        //设置数组
        var checkusers = items;
        var checkeduser='';
        var usertypename = {"0":"负责人","1":"检验人员","2":"实习生","3":"其他人员"};
        for(var i = 0; i < checkusers.length; i++){
            if(flag==='Job'){
               checkuserArr[i]={
                userid:checkusers[i].data.userid,
                username:checkusers[i].data.username,
                departmentid:checkusers[i].data.departmentid,
                departmentname:checkusers[i].data.departmentname,
                usertype:checkusers[i].data.usertype,
                usertypename:usertypename[checkusers[i].data.usertype]
                };
            }

            if(flag==="Task"){
                taskcheckuserArr[i]={
                userid:checkusers[i].data.userid,
                username:checkusers[i].data.username,
                departmentid:checkusers[i].data.departmentid,
                departmentname:checkusers[i].data.departmentname,
                usertype:checkusers[i].data.usertype,
                usertypename:usertypename[checkusers[i].data.usertype]
                };
            }

            if(i!==0){
                 checkeduser+=',';
             }
             checkeduser+=checkusers[i].data.userid+'_'+checkusers[i].data.departmentid+'_'+checkusers[i].data.usertype;
         }
        // Ext.getCmp('EngFirstCheckJobAdd_checkuser').setValue(checkeduser);
        hide.setValue(checkeduser);
        viewUtil.goLast();
    },

    onEngFirstCheckCheckUser2_BtnDeleteTap: function(button, e, eOpts) {
        Ext.getCmp('EngFirstCheckCheckUser_List').getStore().removeAt(index);
        if(flag==='Task'){
            taskcheckuserArr.splice(index, 1);
        }
        if(flag==='Job'){
            checkuserArr.splice(index, 1);
        }
        viewUtil.goLast();
    },

    onEngFirstCheckCheckUser_ListItemTap: function(dataview, index, target, record, e, eOpts) {
        //跳转到添加检验人员界面
        viewUtil.goNext('Engineer.EngFirstCheckCheckUser2',{record:record,index:index});
    },

    onEngFirstCheckCheckUser2Init: function(component, eOpts) {
        //添加检验人员初始化
        var record = component.initialConfig.parm.record;
        index = component.initialConfig.parm.index;

        if(record){
            Ext.getCmp('EngFirstCheckCheckUser2_Form').setRecord(record);
            Ext.getCmp('EngFirstCheckCheckUser2_BtnDelete').setHidden(false);
        }
    },

    onEngFirstCheckCheckUserInit: function(component, eOpts) {
        //添加检验人员初始化
        var checkuserArr = component.initialConfig.parm.checkuserArr;
        show = component.initialConfig.parm.show;
        hide = component.initialConfig.parm.hide;
        flag = component.initialConfig.parm.flag;
        if(checkuserArr){
            Ext.getCmp('EngFirstCheckCheckUser_List').getStore().setData(checkuserArr);
        }else{
            Ext.getCmp('EngFirstCheckCheckUser_BtnSave').setHidden(true);
            Ext.getCmp('EngFirstCheckCheckUser_List').getStore().removeAll();
        }
    },

    onEngReformcheckInitialize: function(component, eOpts) {

        var me = this;
        var jobList = Ext.getCmp('EngReformcheck_ListJob');
        var taskList = Ext.getCmp('EngReformcheck_ListTask');
        //清空store数据
        taskList.getStore().removeAll();

        jobaddjurisdiction = false;
        console.log('init');
        jobupdatejurisdiction = false;
        taskUpdatejurisdiction = false;

        jobCurPage = 0;//全局变量
        taskCurPage = 0;
        pagesize = 20;
        //获取状态
        getFlowstatus = {
            '全部':'%',
            '未接收':'1',
            '已接收':'2',
            '退回':'3',
        };

        getTaskstatus = {
            '全部':'%',
            '新建':'0',
            '待审':'1',
            '审批中':'2',
            '通过':'3',
            '不通过':'4',
            '作废':'5'
        };

        // 初始化派工单列表下拉刷新、滑动按钮插件
        jobList.setPlugins(
             [
              {
                            autoSnapBack: false,
                            lastUpdatedText: '上次刷新:&nbsp;',
                            loadedText: '已刷新',
                            loadingText: '正在刷新派工单...',
                            pullText: '下拉刷新...',
                            releaseText: '放开开始刷新...',
                            type: 'pullrefresh',
                            listeners : {
                                latestfetched : function() {

                                    console.log('执行清空STORE。。。');
                                    Ext.getCmp('EngReformcheck_ListJob').getStore().removeAll();
                                    console.log('执行清空STORE。。。');

                                    me.doEngAllCheck_LoadJobList(
                                        1,
                                        pagesize,
                                        {
                                            searchkey:Ext.getCmp('EngReformcheckJob_Search').getValue()||'',
                                            flowstatus:
                                                getFlowstatus[Ext.getCmp('EngReformcheck_JobStatus').getText()]
                                        },
                                        'refresh',
                                        null,
                                        'EngReformcheck'
                                    );
                            	}
                            }
                        },
                        // 以下滑动按钮插件应从EngHomeController的onEngHomeInitial()中复制！
                        {
                            xclass: 'ux.SlideActions',
                            openPosition: 150,
                            buttons:
                                [
                                    // 按钮1
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-blue',
                                        text: '1',
                                        initial: function(button) {
                                            //初始化滑动按钮
                                                me.doEngFirstCheck_InitialNextStateButton(button, 0);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            jobList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                            //处理点击事件
                                            me.doSlideShowAlertDialog({
        //                                     me.doEngFirstCheckJob_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 0
                                                });
                                        }
                                    },
                                    // 按钮2
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-green',
                                        text: '2',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 1);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            jobList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doSlideShowAlertDialog({
        //                                     me.doEngFirstCheckJob_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 1
                                                });
                                        }
                                    },
                                    // 按钮3
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-orange',
                                        text: '3',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 2);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            jobList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doSlideShowAlertDialog({
        //                                     me.doEngFirstCheckJob_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 2
                                                });
                                        }
                                    }
                            ]
                        }
                    ]
                );

        // 初始化首检任务列表下拉刷新、滑动按钮插件

                taskList.setPlugins(
                    [
                        {
                            autoSnapBack: false,
                            lastUpdatedText: '上次刷新:&nbsp;',
                            loadedText: '已刷新',
                            loadingText: '正在刷新首检任务...',
                            pullText: '下拉刷新...',
                            releaseText: '放开开始刷新...',
                            type: 'pullrefresh',
                            listeners : {
                                latestfetched : function() {
                                            console.log('执行清空STORE。。。');
                                    Ext.getCmp('EngReformcheck_ListTask').getStore().removeAll();
                                    console.log('执行清空STORE。。。');

                                    me.doEngAllCheck_LoadTaskList(
                                        1,
                                        pagesize,
                                        {

                                            searchkey:Ext.getCmp('EngReformcheckTask_Search').getValue()||'',
                                            flowstatus:
                                                getTaskstatus[Ext.getCmp('EngReformcheck_TaskStatus').getText()]
                                        },
                                        'refresh'
                                    );
                            	}
                            }
                        },
                        // 以下滑动按钮插件应从EngHomeController的onEngHomeInitial()中复制！
                        {
                            xclass: 'ux.SlideActions',
                            openPosition: 100,
                            buttons:
                                [
                                    // 按钮1
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-blue',
                                        text: '1',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 0);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            taskList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doTaskHanderShowAlertDialog({
        //                                     me.doEngFirstCheckTask_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 0
                                                });
                                        }
                                    },
                                    // 按钮2
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-green',
                                        text: '2',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 1);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            taskList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doTaskHanderShowAlertDialog({
        //                                     me.doEngFirstCheckTask_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 1
                                                });
                                        }
                                    },
                                    // 按钮3
                                    {
                                        xtype: 'button',
                                        baseCls: 'x-button liftnet-list-button liftnet-bgColor-orange',
                                        text: '3',
                                        initial: function(button) {
                                                me.doEngFirstCheck_InitialNextStateButton(button, 2);
                                        },
                                        listeners: {
                                            tap: function(button, e){
                                                e.stopPropagation();
                                                return false;
                                            },
                                            scope: this
                                        },
                                        handler: function(button, e) {
                                            taskList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                               me.doTaskHanderShowAlertDialog({
        //                                     me.doEngFirstCheckTask_Process({
                                                    record: button.getRecord(),
                                                    operationIndex: 2
                                                });
                                        }
                                    }
                            ]
                        }
                    ]
                );
        loadMask.show();
        //进来自动加载第一页
        me.doEngAllCheck_LoadJobList(
                                        1,
                                        pagesize,
                                        {
                                            searchkey:Ext.getCmp('EngReformcheckJob_Search').getValue()||'',
                                            flowstatus:
                                                getTaskstatus[Ext.getCmp('EngReformcheck_JobStatus').getText()]
                                        },
                                        'firstload',
            null,
            'EngReformcheck'
        );
        me.doEngAllCheck_LoadTaskList(
                                        1,
                                        pagesize,
                                        {
                                            searchkey:Ext.getCmp('EngReformcheckTask_Search').getValue()||'',
                                            flowstatus:
                                                getTaskstatus[Ext.getCmp('EngReformcheck_TaskStatus').getText()]
                                        },
                                        'firstload',
             null,
            'EngReformcheck'
                                    );
    },

    /* 加载派工单列表 */
    doEngFirstCheck_LoadJobList: function(page, pagesize, searchkeyParm, action, scrollparm) {

        // 派工单标签页 - 派工单列表刷新
        var me = this;
        // 读取“派工单”列表
        Ext.getCmp('EngFirstCheck_ListJob').getStore().loadDat(
            function(ret,resetCurPage,jurisdiction) {
                loadMask.hide();
                if(scrollparm){
        //             scrollparm.scroller.scrollTo(scrollparm.x,(ret-1)*scrollparm.jobCurPage*80);
        //             loadMask.hide();
                    var store = Ext.getCmp('EngFirstCheck_ListJob').getStore();
                    var record = store.getAt(store.getAllCount() - ret);
                    Ext.getCmp('EngFirstCheck_ListJob').scrollToRecord(record,{type: 'slide'});
                }

                if(resetCurPage){//重新加载数据时
                    jobCurPage = 1;//获取新数据成功，页数重置为1
                    jobaddjurisdiction = jurisdiction.addjurisdiction==='Y';
                    //能不能新建
                    Ext.getCmp('EngFirstCheck_BtnAdd').setHidden(!jobaddjurisdiction);
                    //能不能修改
                    jobupdatejurisdiction = jurisdiction.updatejurisdiction==='Y';
                }
             },

            function(info,cutOne) {
                Ext.toast(info);
                if(cutOne){
                    jobCurPage--;//加载更多数据失败，页数减一
                }
                if(info==='没有更多数据！'){
        //             jobCurPage = 0;//没有更多数据的时候重置页数为0，不触发上拉事件
                    jobCurPage--;
                }
                loadMask.hide();

            },
            {
                curpagenum:page,
                pagesize:pagesize,
                searchkey:searchkeyParm.searchkey || '',
                flowstatus:searchkeyParm.flowstatus || '%',
        //         startdate:searchkeyParm.startdate,
        //         enddate:searchkeyParm.enddate
            },
            action
        );
    },

    /* 加载派工单列表 */
    doEngAllCheck_LoadJobList: function(page, pagesize, searchkeyParm, action, scrollparm, obj) {

        // 派工单标签页 - 派工单列表刷新
        var me = this;
        // 读取“派工单”列表
        Ext.getCmp(obj+'_ListJob').getStore().loadDat(
            function(ret,resetCurPage,jurisdiction) {
                loadMask.hide();
                if(scrollparm){
        //             scrollparm.scroller.scrollTo(scrollparm.x,(ret-1)*scrollparm.jobCurPage*80);
        //             loadMask.hide();
                    var store = Ext.getCmp(obj+'_ListJob').getStore();
                    var record = store.getAt(store.getAllCount() - ret);
                    Ext.getCmp(obj+'_ListJob').scrollToRecord(record,{type: 'slide'});
                }

                if(resetCurPage){//重新加载数据时
                    jobCurPage = 1;//获取新数据成功，页数重置为1
                    jobaddjurisdiction = jurisdiction.addjurisdiction==='Y';
                    //能不能新建
                    Ext.getCmp(obj+'_BtnAdd').setHidden(!jobaddjurisdiction);
                    //能不能修改
                    jobupdatejurisdiction = jurisdiction.updatejurisdiction==='Y';
                }
             },

            function(info,cutOne) {
                Ext.toast(info);
                if(cutOne){
                    jobCurPage--;//加载更多数据失败，页数减一
                }
                if(info==='没有更多数据！'){
        //             jobCurPage = 0;//没有更多数据的时候重置页数为0，不触发上拉事件
                    jobCurPage--;
                }
                loadMask.hide();

            },
            {
                curpagenum:page,
                pagesize:pagesize,
                searchkey:searchkeyParm.searchkey || '',
                flowstatus:searchkeyParm.flowstatus || '%',
        //         startdate:searchkeyParm.startdate,
        //         enddate:searchkeyParm.enddate
            },
            action
        );
    },

    /* 加载首检任务列表 */
    doEngFirstCheck_LoadTaskList: function(page, pagesize, searchkeyParm, action, scrollparm) {

        var me = this;
        // 读取“首检任务”列表
        Ext.getCmp('EngFirstCheck_ListTask').getStore().loadDat(
            function(ret,resetCurPage) {
                loadMask.hide();
                if(scrollparm){
        //             scrollparm.scroller.scrollTo(scrollparm.x,(ret-1)*scrollparm.taskCurPage*80);
        //             loadMask.hide();
                    var store = Ext.getCmp('EngFirstCheck_ListTask').getStore();
                    var record = store.getAt(store.getAllCount() - ret);
                    Ext.getCmp('EngFirstCheck_ListTask').scrollToRecord(record,{type: 'slide'});
                }
                if(resetCurPage){
                    taskCurPage = 1;//获取新数据成功，页数重置为1
                    //首检任务能不能修改
        //             taskUpdatejurisdiction = jurisdiction.updatejurisdiction==='Y';
                }

            },

            function(info,cutOne) {
                Ext.toast(info);
                if(cutOne){
                    taskCurPage--;//加载更多数据失败，页数减一
                }
                if(info==='没有更多数据！'){
        //             taskCurPage = 0;//没有更多数据的时候重置页数为0，不触发上拉事件
                    taskCurPage--;
                }
                loadMask.hide();

            },
            {
                curpagenum:page,
                pagesize:pagesize,
                searchkey:searchkeyParm.searchkey || '',
                flowstatus:searchkeyParm.flowstatus || '%'
            },
            action
        );

    },

    /* 加载首检任务列表 */
    doEngAllCheck_LoadTaskList: function(page, pagesize, searchkeyParm, action, scrollparm, obj) {

        var me = this;
        // 读取“首检任务”列表
        Ext.getCmp(obj+'_ListTask').getStore().loadDat(
            function(ret,resetCurPage) {
                loadMask.hide();
                if(scrollparm){
        //             scrollparm.scroller.scrollTo(scrollparm.x,(ret-1)*scrollparm.taskCurPage*80);
        //             loadMask.hide();
                    var store = Ext.getCmp(obj+'_ListTask').getStore();
                    var record = store.getAt(store.getAllCount() - ret);
                    Ext.getCmp(obj+'_ListTask').scrollToRecord(record,{type: 'slide'});
                }
                if(resetCurPage){
                    taskCurPage = 1;//获取新数据成功，页数重置为1
                    //首检任务能不能修改
        //             taskUpdatejurisdiction = jurisdiction.updatejurisdiction==='Y';
                }

            },

            function(info,cutOne) {
                Ext.toast(info);
                if(cutOne){
                    taskCurPage--;//加载更多数据失败，页数减一
                }
                if(info==='没有更多数据！'){
        //             taskCurPage = 0;//没有更多数据的时候重置页数为0，不触发上拉事件
                    taskCurPage--;
                }
                loadMask.hide();

            },
            {
                curpagenum:page,
                pagesize:pagesize,
                searchkey:searchkeyParm.searchkey || '',
                flowstatus:searchkeyParm.flowstatus || '%'
            },
            action
        );

    },

    /*
        初始化滑动按钮
        根据nextstate
    */
    doEngFirstCheck_InitialNextStateButton: function(button, index) {
        // 初始化处理按钮
        // 参数：按钮对象、按钮索引号
        var b = button.record.get('nextstate');
        if(!b) return;

        if(b[index]&&b[index].text!=='') {
            if(button.setHidden) {
                button.setHidden(false);
                button.setText(b[index].name);
            } else {
                button.hidden = false;
                button.text = b[index].name;
            }
        } else {
            if(button.setHidden) {
                button.setHidden(true);
            } else {
                button.hidden = true;
            }
        }
    },

    /*
        初始化滑动按钮
        根据nextstate
    */
    doEngAllCheck_InitialNextStateButton: function(button, index, obj) {
        // 初始化处理按钮
        // 参数：按钮对象、按钮索引号
        var b = button.record.get('nextstate');
        if(!b) return;

        if(b[index]&&b[index].text!=='') {
            if(button.setHidden) {
                button.setHidden(false);
                button.setText(b[index].name);
            } else {
                button.hidden = false;
                button.text = b[index].name;
            }
        } else {
            if(button.setHidden) {
                button.setHidden(true);
            } else {
                button.hidden = true;
            }
        }
    },

    /* 首检派工处理(审批和接收共用接口) */
    doEngFirstCheckJob_Process: function(parm) {
        /*
           左滑按钮点击事件处理
           派工单处理入口
           参数
           {
               record:派工单待办记录,
               operationIndex:操作索引号(数字)/操作名(字符串),
               fn:回调函数，通常用于关闭故障详细信息页面
           }
        */
        var me = this;
        var operation;
        var fn = parm.fn;
        var jnl = parm.record.get('jnl');//首检分派单号
        var state;						 //审核状态: 接收,退回,同意，不同意，提交，作废，删除等
        var remark;						 //审核原因
        var deptid;						 //当前人所属部门ID
        var sj;

        if(parm.record){
        var thisState = {};
        //获取nextstate的值，用于提交
        var nextstates = parm.record.get('nextstate');
             if(nextstates){
                 for(var j = 0;j<nextstates.length;j++){
                      thisState[nextstates[j].name] = nextstates[j].state+'';
                    }
             }
        }

        if(typeof(parm.operationIndex)==='string') {
            operation = parm.operationIndex;
        } else {
            operation = parm.record.get('nextstate')[parm.operationIndex].name;
        }

        switch(operation) {
        //     case "修改":
            case "退回":
                 state = thisState["退回"];
                 Ext.Msg.prompt('原因', null,
                 function(buttonId,value) {
                     if(buttonId=='ok'){
                         if(value===''){
                             Ext.toast('退回操作失败,请输入退回原因');
                             return;
                         }else{
                             remark=value;
                             //首检派工单退回
                             loadMask.show();
                             var adapterParm = {
                                             userid:global.getUserId(),
                                             jnl:jnl,
                                             state:state,
                                             remark:remark || '',
                                             deptid:deptid || '',
                                             sj:{}
                                         };
                             console.log(adapterParm);
                             var store = dataUtil.createStore('first_check_job_sj');
                             store.handerDat(
                                 function(jnl) {
                                     loadMask.hide();
                                     if(jnl) {
                                         Ext.toast(operation+'操作完成！单号是：' + jnl);
                                     } else {
                                         Ext.toast(operation+'操作完成！');
                                     }

                                     // 刷新派工单列表
                                     me.doEngFirstCheck_Job_Search(Ext.getCmp('EngFirstCheck_JobStatus'));
                             //                 viewUtil.goLast();
                                     },
                                     function(info) {
                                         loadMask.hide();
                                         if(!info) info = '(未知)';
                                         Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                                     },
                                     adapterParm
                                 );
                         }

                     }
                     },
                     null,
                     true,
                     null,
                     {
                         autoCapitalize: true,
                         placeHolder: '请输入退回原因'
                     }
                 );
                 return;
        //     case "保存":
        //     case "提交":
        //         viewUtil.goNext('Engineer.EngFirstCheckJobAdd',
        //                         {record:parm.record,state:'修改',
        //                          url:'/adapters/firstcheck/api/1.0/fcddetail'
        //                         });
        //         break;

            case "接收":

                state = thisState["接收"];
                break;

            case "修改":

                state = thisState["修改"];
        //         viewUtil.goNext('Engineer.EngFirstCheckJobShow',{record:parm.record,action:'退回'});
                viewUtil.goNext('Engineer.EngFirstCheckJobAdd',
                                {record:parm.record,
                                 action:'退回修改',
                                 url:'/adapters/firstcheck/api/1.0/fcdaduitdetail'
                                });
                return;

            case "删除":
                //已退回的分派单允许删除，删除后分派单消失
                state = thisState["删除"];
                break;

            case "审核":
        //     case "同意":
        //     case "不同意":
        //         viewUtil.goNext('Engineer.EngFirstCheckJobShow',{record:parm.record,action:'审核'});
                viewUtil.goNext('Engineer.EngFirstCheckJobAdd',
                                {record:parm.record,
                                 action:'审核',
                                 url:'/adapters/firstcheck/api/1.0/fcdaduitdetail'
                                });
                return;

            default:
                Ext.toast('未知的操作:' + opertaion);
                return;
        }

        //首检派工处理(接收、删除)
        loadMask.show();
        var adapterParm = {
                        userid:global.getUserId(),
                        jnl:jnl,
                        state:state,
                        remark:remark || '',
                        deptid:deptid || '',
                        sj:{}
                    };
        console.log(adapterParm);
        var store = dataUtil.createStore('first_check_job_sj');
        store.handerDat(
            function(jnl) {
                loadMask.hide();
                if(jnl) {
                    Ext.toast(operation+'操作完成！单号是：' + jnl);
                } else {
                    Ext.toast(operation+'操作完成！');
                }

                // 刷新派工单列表
                me.doEngFirstCheck_Job_Search(Ext.getCmp('EngFirstCheck_JobStatus'));
        //                 viewUtil.goLast();
                },
                function(info) {
                    loadMask.hide();
                    if(!info) info = '(未知)';
                    Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                },
                adapterParm
            );
    },

    doEngFirstCheckTask_Process: function(parm) {
        /*

           首检任务单处理入口
           参数
           {
               record:首检任务单待办记录,
               operationIndex:操作索引号(数字)/操作名(字符串),
               fn:回调函数，通常用于关闭首检任务单详细信息页面
           }
        */
        var me = this;
        var operation;
        var fn = parm.fn;
        var jnl = parm.jnl || parm.record.get('jnlno') ;
        var state;
        var remark;

        if(parm.record){
            var thisState = {};
        var nextstates = parm.record.get('nextstate');
                if(nextstates){
                    for(var j = 0;j<nextstates.length;j++){
                        thisState[nextstates[j].name] = nextstates[j].state+'';
                    }
                }
        }


        if(typeof(parm.operationIndex)==='string') {
            operation = parm.operationIndex;
        } else {
            operation = parm.record.get('nextstate')[parm.operationIndex].name;
        }
        switch(operation) {
            case "审核":
                //跳转到查看界面进行审核
                viewUtil.goNext('Engineer.EngFirstCheckTask',{record:parm.record,action:'审核',
                                                              url:'/adapters/firstcheck/api/1.0/fcaduitdetail'});
                return;

        //     case "保存":
        //     case "提交":
            case "修改":
                //跳转到查看界面进行修改
                viewUtil.goNext('Engineer.EngFirstCheckTask',{record:parm.record,action:'修改',
                                                              url:'/adapters/firstcheck/api/1.0/fcinputdetail'});
                return;

            case "删除":
                state = thisState["删除"];
                break;

            case "作废":
                state = taskStates["作废"];
                break;

            case "同意":
                state = taskStates["同意"];
                break;

            case "不同意":
                state = taskStates["不同意"];
                var sj = me.doEngFirstCheck_GetSJForm();
                Ext.Msg.prompt('原因', null,
                function(buttonId,value) {
                    if(buttonId=='ok'){
                        if(value===''){
                            Ext.toast('审核操作失败,请输入不同意原因');
                            return;
                        }else{
                            remark=value;
                            //首检任务单处理(不同意)
                            loadMask.show();
                        var adapterParm = {
                                            userid:global.getUserId(),
                                            jnl:jnl,
                                            state:state,
                                            remark:remark,
                                            sj:sj
                                        };
                        var store = dataUtil.createStore('first_check_task_sj');
                        store.auditDat(
                            function(jnl) {
                                loadMask.hide();
                                if(jnl) {
                                    Ext.toast(operation+'操作完成！单号是：' + jnl);
                                } else {
                                    Ext.toast(operation+'操作完成！');
                                }

                        // 刷新首检任务列表
                                me.doEngFirstCheck_Task_Search(Ext.getCmp('EngFirstCheck_TaskStatus'));
                                viewUtil.goLast();

                            },
                            function(info) {
                                loadMask.hide();
                                if(!info) info = '(未知)';
                                Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                            },
                            adapterParm
                        );

                        }

                    }
                    },
                    null,
                    true,
                    null,
                    {
                        autoCapitalize: true,
                        placeHolder: '请输入审核原因'
                    }
                );
                return;

            default:
                Ext.toast('未知的操作:' + opertaion);
                return;
        }

        //首检任务单处理
        loadMask.show();
        var adapterParm = {
                            userid:global.getUserId(),
                            jnl:jnl,
                            state:state,
                            remark:remark||'',
                            sj:{}
                        };
        var store = dataUtil.createStore('first_check_task_sj');
        store.auditDat(
            function(jnl) {
                loadMask.hide();
                if(jnl) {
                    Ext.toast(operation+'操作完成！单号是：' + jnl);
                } else {
                    Ext.toast(operation+'操作完成！');
                }

        // 刷新首检任务列表
                me.doEngFirstCheck_Task_Search(Ext.getCmp('EngFirstCheck_TaskStatus'));

                if(operation==='同意'){
                    viewUtil.goLast();
                }
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
            },
            adapterParm
        );
    },

    doEngFirstCheckTask_Show_Process: function(parm) {

        var me = this;
        var state;
        var sj = me.doEngFirstCheck_GetSJForm();
        var form = Ext.getCmp('EngFirstCheckTask_Form');

        // 检查必填项目
        var fields = form.getFields();
        for(var name in fields) {
            field = fields[name];
            if(field.getRequired() && field.getValue()==='') {
                Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
                return;
            }else{
              if(name=='prono'){// 检查设备注册码是否合法
                  if(!field.getValue().match(/^(\d{4}-\d{6}-\d{6}-\d{1,8})$/)){
                      Ext.Msg.alert('注意', '设备注册码的格式有误',Ext.emptyFn);
                      return;
                  }
              }else if(name=='zzl' || name==='speed' || name==='high' || name==='fwlc'){//检测载重量、速度、提升高度、倾斜角
                    if(field.getValue()!=='' && !field.getValue().match(/^[0-9]+(.[0-9]{1,2})?$/)){
                        field.suspendEvents();
                        Ext.toast(field.getLabel()+'必须填写数字(至多两位小数)！');
                        field.resumeEvents(false);
                        return;
                    }
              }else if(name==='floor' || name==='stage' || name==='door' || name==='r9' || name==='controlnum'){//检测层、站、门、到期预警天数、群控台数
                    if(field.getValue()!=='' && !field.getValue().match(/^[0-9]*$/)){
                        field.suspendEvents();
                        Ext.toast(field.getLabel()+'必须填写正整数！');
                        field.resumeEvents(false);
                        return;
                    }
              }
          }

        }



        var action = parm.getText();
        switch(action) {


            case "保存":
                state = '0';
                break;
            case "提交":
                state = '1';
                break;

            default:
                Ext.toast('未知的操作:' + parm.getText());
                return;
        }

        //首检任务单录入
        loadMask.show();
        var adapterParm = {
                            userid:global.getUserId(),
                            state:state,
                            sj:sj
                        };
        var store = dataUtil.createStore('first_check_task_sj');
        store.inputDat(
            function(jnl) {
                loadMask.hide();
                if(jnl) {
                    Ext.toast(action+'操作完成！单号是：' + jnl);
                } else {
                    Ext.toast(action+'操作完成！');
                }

                // 刷新首检任务列表
                me.doEngFirstCheck_Task_Search(Ext.getCmp('EngFirstCheck_TaskStatus'));

                viewUtil.goLast();
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('未能完成' + action + '操作，错误信息是：' + info);
            },
            adapterParm
        );
    },

    doEngFirstCheckJobAdd_Process: function(state) {

        // 派工单操作 - 保存/提交
        var me = this;
        var form = Ext.getCmp('EngFirstCheckJobAdd_Form');

        // 检查必填项目
        var fields = form.getFields();
        for(var name in fields) {
            field = fields[name];
            if(field.getRequired() && field.getValue()==='') {
                Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
                return;
            }
        }

        //获取表单数据
        var sj = me.doEngFirstCheck_GetJobForm(form);
        //检查是否已经选择电梯
        if(sj.checkednum===0 ||sj.checkednum==='0'){
            Ext.Msg.alert('注意', '必须选择电梯', Ext.emptyFn);
            return;
        }

        switch(state) {
            case "保存":
                sj.status='0';
                break;
            case "提交":
                sj.status='1';
                break;
        }

        var parm = {
            userid: global.getUserId(),
            sj: sj
        };
        console.log(parm);
        var store = dataUtil.createStore('first_check_job_sj');
        //首检派工新建/修改
        loadMask.show();
        store.updateDat(
            function(jnl) {
                loadMask.hide();
                if(jnl) {
                    Ext.toast(state+'操作完成！单号是：' + jnl);
                } else {
                    Ext.toast(state+'操作完成！');
                }
                // 刷新派工单列表
                me.doEngFirstCheck_Job_Search(Ext.getCmp('EngFirstCheck_JobStatus'));
                viewUtil.goLast();
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('未能完成' + state + '操作，错误信息是：' + info);
            },
            parm
        );
    },

    doEngFirstCheckJobShow_Process: function(state) {

        // 派工单操作 - /同意/不同意/接收/退回
        var me = this;
        // var form = Ext.getCmp('EngFirstCheckJobAdd_Form1');
        var form = Ext.getCmp('EngFirstCheckJobAdd_Form');

        var remark;
        var newstate;
        var deptid = '';

        var sj = me.doEngFirstCheck_GetJobForm(form);
        // 检查必填项目
        var fields = form.getFields();
        for(var name in fields) {
            field = fields[name];
            if(field.getRequired() && field.getValue()==='') {
                Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
                return;
            }
        }

        if(sj.checkednum===0 ||sj.checkednum==='0'){
            Ext.Msg.alert('注意', '必须选择电梯', Ext.emptyFn);
            return;
        }

        var deptidStore = dataUtil.createStore('first_check_job_add_deptid');
                            deptidStore.loadDat(
        //                         function(){
        //                             deptid = deptidStore.getAt(0).data.storageid;
        //                         },
                                handerJob,
                                function(){
                                    Ext.toast('未能完成' + state + '操作,请稍候再试');
                                }
                            );

        function handerJob(){

            deptid = deptidStore.getAt(0).data.storageid;

            var jnl = sj.jnl;

             // 派工单标志
            switch(state) {
                case "作废":
                    newstate = jobStates['作废'];
                    break;

                case "提交":
                    newstate = jobStates['提交'];
                    break;

                case "通过":
                    newstate = jobStates['通过'];
                    break;

                case "不通过":
                    newstate = jobStates['不通过'];
                    break;

                case "同意":
                    newstate = jobStates['同意'];
                    break;

                case "不同意":
                    newstate = jobStates['不同意'];
                    Ext.Msg.prompt('不同意', null,
                    function(buttonId,value) {
                        if(buttonId=='ok'){
                            if(value===''){
                                Ext.toast('审核操作失败,请输入审核原因');
                                return;
                            }else{
                                remark=value;
                                loadMask.show();
                                var adapterParm = {
                                                userid:global.getUserId(),
                                                jnl:sj.jnl,
                                                state:newstate,
                                                remark:remark,
                                                deptid:deptid,
                                                sj:sj
                                };
                                var store = dataUtil.createStore('first_check_job_sj');
        //                         var store = dataUtil.createStore('first_check_job_detail');
        //                         store.updateDat(
                                store.handerDat(
                                    function(jnl) {
                                        loadMask.hide();
                                        if(jnl) {
                                            Ext.toast('审核操作完成！单号是：' + jnl);
                                        } else {
                                            Ext.toast('审核操作完成！');
                                        }
                                        //刷新待办列表
                                        liftnet.app.getController('Engineer.EngHomeController')
                                            .doEngHome_LoadTodoAll();
                                        // 刷新派工单列表
                                        me.doEngFirstCheck_Job_Search(Ext.getCmp('EngFirstCheck_JobStatus'));
                                        viewUtil.goLast();
                                    },
                                    function(info) {
                                        loadMask.hide();
                                        if(!info) info = '(未知)';
                                        Ext.toast('未能完成' + state + '操作，错误信息是：' + info);
                                    },
                                    adapterParm
                                );


                            }

                        }
                        },
                        null,
                        true,
                        null,
                        {
                            autoCapitalize: true,
                            placeHolder: '请输入不同意原因'
                        }
                    );
                    return;

                case "接收":

                    newstate = jobStates['接收'];
                    break;

                case "删除":
                    newstate = jobStates['删除'];
                    break;

                case '退回':
                Ext.Msg.prompt('退回', null,
                    function(buttonId,value) {
                        if(buttonId=='ok'){
                            if(value===''){
                                Ext.toast('退回操作失败,请输入退回原因');
                                return;
                            }else{
                                remark=value;
                                loadMask.show();
                                var adapterParm = {
                                                userid:global.getUserId(),
                                                jnl:sj.jnl,
                                                state:jobStates['退回'],
                                                remark:remark,
                                                deptid:deptid || '',
                                                sj:sj
                                };
                                var store = dataUtil.createStore('first_check_job_sj');
        //                         var store = dataUtil.createStore('first_check_job_detail');
        //                         store.updateDat(
                                store.handerDat(
                                    function(jnl) {
                                        loadMask.hide();
                                        if(jnl) {
                                            Ext.toast('退回操作完成！单号是：' + jnl);
                                        } else {
                                            Ext.toast('退回操作完成！');
                                        }
                                        //刷新待办列表
                                        liftnet.app.getController('Engineer.EngHomeController')
                                            .doEngHome_LoadTodoAll();

                                        //从待办任务进来退回不刷新派工单列表
                                        // 刷新派工单列表
        //                                 me.doEngFirstCheck_Job_Search(Ext.getCmp('EngFirstCheck_JobStatus'));
                                        viewUtil.goLast();
                                    },
                                    function(info) {
                                        loadMask.hide();
                                        if(!info) info = '(未知)';
                                        Ext.toast('未能完成' + state + '操作，错误信息是：' + info);
                                    },
                                    adapterParm
                                );


                            }

                        }
                        },
                        null,
                        true,
                        null,
                        {
                            autoCapitalize: true,
                            placeHolder: '请输入退回原因'
                        }
                    );

                    return;
        }

        var adapterParm = {
            userid: global.getUserId(),
            jnl:jnl,
            state:newstate,
            remark:remark || '',
            deptid:deptid || '',
            sj: sj
        };
        loadMask.show();
        // var store = dataUtil.createStore('first_check_job_detail');
        var store = dataUtil.createStore('first_check_job_sj');
        //         store.updateDat(
            store.handerDat(
                       function(jnl) {
                           loadMask.hide();
                           if(jnl) {
                               Ext.toast(state+'操作完成！单号是：' + jnl);
                           } else {
                               Ext.toast(state+'操作完成！');
                           }
                           //从待办任务进来接收不刷新派工单列表
                           if(state!=='接收'){
                              // 刷新派工单列表
                               me.doEngFirstCheck_Job_Search(Ext.getCmp('EngFirstCheck_JobStatus'));
                           }
                           //刷新待办列表
                           liftnet.app.getController('Engineer.EngHomeController')
                                    .doEngHome_LoadTodoAll();
                           viewUtil.goLast();
                           },
                       function(info) {
                             loadMask.hide();
                             if(!info) info = '(未知)';
                                 Ext.toast('未能完成' + state + '操作，错误信息是：' + info);
                             },
                             adapterParm
                );
        }

    },

    doEngFirstCheckJobAdd_ShowDatePicker: function(textfield, fn) {
        // 日期选择初始化
        var y = new Date().getFullYear();
        var items = [
            {
                text: '现在',
                handler: function() {
                    picker.setValueAnimated(new Date());
                }
            }];
        var picker = Ext.create('ux.DateTime',
                                {
                                    yearFrom: y - 1,
                                    yearTo: y + 1,
                                    doneButton: {
                                        text: '确定',
                                        handler: function() {
                                            textfield.setValue(
                                                Ext.Date.format(picker.getValue(),'Y-m-d'));
                                            picker.hide();
                                            if(fn && typeof(fn)==='function') {
                                                fn();
                                            }
                                            picker.destroy();
                                        }
                                    },
                                    cancelButton: '取消',
                                    toolbar: {
                                        items : items
                                    }
                                });

        picker.setValue(Ext.Date.parse(textfield.getValue(), 'Y-m-d', true));
        picker.getToolbar().setTitle(textfield.getLabel());

        Ext.Viewport.add(picker);
        picker.show();
    },

    doEngFirstCheck_Job_Search: function(button) {
        //搜索数据
        if(button != Ext.getCmp('EngFirstCheck_JobStatus')){
            popMenu.getShowBy().setText(button.getText());
            popMenu.hide();
        }
        var searchkeyParm = {
            //关键字
            searchkey : Ext.getCmp('EngFirstCheckJob_Search').getValue(),
          //流程状态
            flowstatus:
                getFlowstatus[Ext.getCmp('EngFirstCheck_JobStatus').getText()]
        };

        this.doEngFirstCheck_LoadJobList(1,pagesize,searchkeyParm,'search');
    },

    doEngFirstCheck_Task_Search: function(button) {
        //搜索数据
        if(button != Ext.getCmp('EngFirstCheck_TaskStatus')){
            popMenu.getShowBy().setText(button.getText());
            popMenu.hide();
        }
        var searchkeyParm = {
            //关键字
            searchkey : Ext.getCmp('EngFirstCheckTask_Search').getValue(),
           //流程状态
            flowstatus:
                getTaskstatus[Ext.getCmp('EngFirstCheck_TaskStatus').getText()]
        };

        this.doEngFirstCheck_LoadTaskList(1,pagesize,searchkeyParm,'search');
    },

    doEngFirstCheck_GetSJForm: function() {
        var form = Ext.getCmp('EngFirstCheckTask_Form');
        var sj = form.getValues();

        //处理时间

        var items = form.getItems().items;
        for(var i = 0,length = items.length;i <length; i++){
            if(items[i].getXTypes().indexOf('datepickerfield')!=-1){
                sj[items[i].getName()] = !sj[items[i].getName()]?'':Ext.Date.format(items[i].getValue(),'Y-m-d');
            }

            if(items[i].getXTypes().indexOf('numberfield')!=-1){
                sj[items[i].getName()] = sj[items[i].getValue()] || '';
            }
        }
        // sj.checkdate = (!sj.checkdate?'':Ext.Date.format(sj.checkdate,'Y-m-d'));
        // sj.leafacdate = (!sj.leafacdate?'':Ext.Date.format(sj.leafacdate,'Y-m-d'));
        // sj.r7 = (!sj.r7?'':Ext.Date.format(sj.r7,'Y-m-d'));
        // sj.r8 = (!sj.r8?'':Ext.Date.format(sj.r8,'Y-m-d'));
        // sj.speedcheckdate = (!sj.speedcheckdate?'':Ext.Date.format(sj.speedcheckdate,'Y-m-d'));
        // sj.speednextcheckdate = (!sj.speednextcheckdate?'':Ext.Date.format(sj.speednextcheckdate,'Y-m-d'));
        // sj.finishdate = (!sj.finishdate?'':Ext.Date.format(sj.finishdate,'Y-m-d'));

        //处理数组
        var checkeduserArr = [];
        var checkeduser = sj.checkuser;
        var checkeduserStr = sj.checkuserStr;
        if(checkeduserStr!==''&&checkeduser!==''){
              var checkedusers = checkeduser.split(',');
              for(var i=0,length = checkedusers.length;i<length;i++){
                  var Checkeduser = checkedusers[i];
                  var result = Checkeduser.split('_');
                  checkeduserArr[i]={
                        userid: result[0],
                        departmentid: result[1],
                        usertype: result[2]
                      };
                   }
                }

        sj.checkuser = checkeduserArr;
        //处理toggle
        if(Ext.getCmp('EngFirstCheckTask_isreformflag').getValue()=='1'){
            sj.isreformflag = 'Y';
        }else{
            sj.isreformflag = 'N';
        }



        //处理配件
        var firstcheckpartsArr = [];
        var items = Ext.getCmp('EngFirstCheckTask_PartList').getStore().getData().items;
        for(var i =0,length = items.length;i<length;i++){
           firstcheckpartsArr[i] = items[i].data;
        }
        sj.firstcheckparts=firstcheckpartsArr;

        //处理检查项目
        var firstcheckProjectArr = [];
        var items = Ext.getCmp('EngFirstCheckTask_CheckProList').getStore().getData().items;
        for(var i =0,length = items.length;i<length;i++){
           firstcheckProjectArr[i] = items[i].data;
        }
        sj.checkproject=firstcheckProjectArr;

        //处理现场信息图片
        var picturesJSON = [];
        for(var i=1;i<7;i++){
            var ImgID = 'EngFirstCheckTask_photo_'+i;

            var Img = Ext.getCmp(ImgID);
            if(Img){
            var ImgSrc = Ext.getCmp(ImgID).getSrc();
            if(ImgSrc!=='resources/images/camera.png' && ImgSrc!=='resources/images/notPhoto.png'){
                console.log(ImgID);
                var pic = ImgSrc.split(',')[1];
                var picturesJSONSize = picturesJSON.length;
                var picIndex = picturesJSONSize+1;
                picturesJSON[picturesJSONSize]={
                    pic : pic,
                    takeremark	: Ext.getCmp(ImgID+'_label_1').getHtml() || "",
                };
            }
            }
        }

        sj.sitephoto = picturesJSON;

        return sj;
    },

    doEngFirstCheck_GetJobForm: function(form) {
        // var form = Ext.getCmp(form);
        var sj = form.getValues();

        //处理日期
        sj.planenddate = (!sj.planenddate?'':Ext.Date.format(sj.planenddate,'Y-m-d'));
        sj.planstartdate = (!sj.planstartdate?'':Ext.Date.format(sj.planstartdate,'Y-m-d'));

        //处理数组
        var checkeduserArr = [];
        var checkeduser = sj.checkuser;
        var checkeduserStr = sj.checkuserStr;

        if(checkeduserStr!==''&&checkeduser!==''){
              var checkedusers = checkeduser.split(',');
              for(var i=0;i<checkedusers.length;i++){
                  var Checkeduser = checkedusers[i];
                  var result = Checkeduser.split('_');
                  checkeduserArr[i]={
                        userid: result[0],
                        departmentid: result[1],
                        usertype: result[2]
                      };
                   }
                }

        sj.checkuser = checkeduserArr;

        var elevatorArr = [];
        var elevator = sj.elevator;
        var elevatorStr = sj.elevatorStr;

        console.log('elevatorStr:'+elevatorStr);

        if(elevatorStr!==''&&elevator!==''){
              var elevators = elevator.split(',');
              for(var i=0;i<elevators.length;i++){
                  var Elevator = elevators[i];
                  var result = Elevator.split('_');
                  elevatorArr[i]={
                        prono: result[0],
                        liftautono: result[1],
                        detailrowid:result[2]
                      };
                   }
                }

        sj.elevator = elevatorArr;

        return sj;
    },

    doEngFirstCheckTask_showCount: function() {
        var store = Ext.getCmp('EngFirstCheckTask_CheckProList').getStore();
            //统计
            var qualified = store.count('√');
            var notthis = store.count('/');
            var unqualified = store.count('×');

            Ext.getCmp('EngFirstCheck_LblCount').setHtml(
                '合格：'+qualified+'，不合格：'+unqualified+'，无此选项：'+notthis
            );
    },

    doEngFirstCheckTask_setReadOnly: function(nextstate) {
        var nextstateName = [];
        for(var i in nextstate){
            nextstateName[i] = nextstate[i].name;
        }
        if(nextstateName.indexOf('保存')!=-1||nextstateName.indexOf('提交')!=-1){
            //可编辑
            isReadOnly = false;
            return;
        }

        isReadOnly = true;
        //表单只读
        var items = Ext.getCmp('EngFirstCheckTask_Form').getItems().items;
        for(var i = 0,length = items.length;i <length; i++){
            items[i].setReadOnly(true);
            items[i].suspendEvents();
        }

        //现场信息只读

        //零部件只读
        Ext.getCmp('EngFirstCheckTask_PanelAdd').setHidden(true);
    },

    doEngFirstCheckJobAdd_setReadOnly: function(nextstate) {
        if(!nextstate && updatejurisdiction){
            //查看、有修改权限
            return;
        }

        var nextstateName = [];
        for(var i in nextstate){
            nextstateName[i] = nextstate[i].name;
        }
        if(nextstateName.indexOf('保存')!=-1||nextstateName.indexOf('提交')!=-1){
            //可编辑
            return;
        }
        //表单只读
        var items = Ext.getCmp('EngFirstCheckJobAdd_Form').getItems().items;
        for(var i = 0,length = items.length;i <length; i++){
            if(items[i].id!='EngFirstCheckJobAdd_BtnPanel'){
                items[i].setReadOnly(true);
                //不可点击
                items[i].suspendEvents();
            }
        }
    },

    doEngAllCheckJobAdd_setReadOnly: function(nextstate, obj) {
        if(!nextstate && updatejurisdiction){
            //查看、有修改权限
            return;
        }

        var nextstateName = [];
        for(var i in nextstate){
            nextstateName[i] = nextstate[i].name;
        }
        if(nextstateName.indexOf('保存')!=-1||nextstateName.indexOf('提交')!=-1){
            //可编辑
            return;
        }
        //表单只读
        var items = Ext.getCmp(obj+'JobAdd_Form').getItems().items;
        for(var i = 0,length = items.length;i <length; i++){
            if(items[i].id!=obj+'JobAdd_BtnPanel'){
                items[i].setReadOnly(true);
                //不可点击
                items[i].suspendEvents();
            }
        }obj
    },

    doEngFirstCheckTask_setArray: function(record, form, processDate) {
        var checkusers = record.get('checkuser');
        var checkuserStr="";
        var checkeduser = "";
        //处理数组
        for(var i = 0; i < checkusers.length; i++){
            checkuserStr = checkuserStr + checkusers[i].username + '('+
                checkusers[i].usertypename+')';
            if(i!=checkusers.length-1){
                checkuserStr = checkuserStr +',';
            }
            if(i!==0){
                 checkeduser+=',';
             }
             checkeduser+=checkusers[i].userid+'_'+checkusers[i].departmentid+'_'+checkusers[i].usertype;
         }
        var elevators = record.get('elevator');
        if(elevators){
            var elevator = '';
             for(i = 0; i < elevators.length; i++){
                 if(i!==0){
                     elevator+=',';
                 }
                 elevator+=elevators[i].prono+'_'+elevators[i].liftautono+'_'+elevators[i].detailrowid;
             }
        }


        if(processDate){
        //处理日期
        var planstartdate = record.get('planstartdate');
        var planenddate = record.get('planenddate');
        form.setValues({
            planstartdate:planstartdate===''?'0':new Date(planstartdate),
            planenddate:planenddate===''?'0':new Date(planenddate)
        });
        }

        form.setValues({
            checkeduserName: checkuserStr,
            checkuser:checkeduser,
            elevator:elevator,
        //     liftnum:elevators.length,
        //     planstartdate:planstartdate===''?'0':new Date(planstartdate),
        //     planenddate:planenddate===''?'0':new Date(planenddate)
        });

    },

    doSlideShowAlertDialog: function(parm) {
        var me = this;
        var operation;
        if(typeof(parm.operationIndex)==='string') {
            operation = parm.operationIndex;
        } else {
            operation = parm.record.get('nextstate')[parm.operationIndex].name;
        }
        if(operation==="修改"||operation==='退回'||operation==='审核'){
            me.doEngFirstCheckJob_Process(parm);
            return;
        }
        Ext.Msg.confirm("注意", "是否确认"+operation+"?", function(n) {
                    if(n=='no')return;
                    me.doEngFirstCheckJob_Process(parm);
                });
    },

    doAddShowAlertDialog: function(parm) {
        var me = this;

        Ext.Msg.confirm("注意", "是否确认"+parm+"?", function(n) {
                    if(n=='no')return;
                    me.doEngFirstCheckJobAdd_Process(parm);
                });
    },

    doHanderShowAlertDialog: function(parm) {
        var me = this;

        if(parm==='退回'||parm==='不同意'){
            me.doEngFirstCheckJobShow_Process(parm);
            return;
        }
        Ext.Msg.confirm("注意", "是否确认"+parm+"?", function(n) {
                    if(n=='no')return;
                    me.doEngFirstCheckJobShow_Process(parm);
                });
    },

    doTaskHanderShowAlertDialog: function(parm) {
        var me = this;
        var operation;
        if(typeof(parm.operationIndex)==='string') {
            operation = parm.operationIndex;
        } else {
            operation = parm.record.get('nextstate')[parm.operationIndex].name;
        }
        if(operation==="审核"||operation==="不同意"){
            me.doEngFirstCheckTask_Process(parm);
            return;
        }

        Ext.Msg.confirm("注意", "是否确认"+operation+"?", function(n) {
                    if(n=='no')return;
                    me.doEngFirstCheckTask_Process(parm);
                });
    },

    doTaskUpdateShowAlertDialog: function(parm) {
        var me = this;


        Ext.Msg.confirm("注意", "是否确认"+parm.getText()+"?", function(n) {
                    if(n=='no')return;
                    me.doEngFirstCheckTask_Show_Process(parm);
                });
    }

});