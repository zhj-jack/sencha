/*
 * File: app/controller/Engineer/EngFaultReportController.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('liftnet.controller.Engineer.EngFaultReportController', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "datepickerfield#EngFaultReport_date1": {
                change: 'onEngFaultReport_date1Change'
            },
            "datepickerfield#EngFaultReport_date2": {
                change: 'onEngFaultReport_date2Change'
            },
            "list#EngFault_ListReport": {
                itemtap: 'onEngFault_ListReportItemTap'
            },
            "panel#EngFaultReport": {
                initialize: 'onEngFaultReportInitialize'
            },
            "togglefield#EngFaultReport_istrap": {
                change: 'onEngFaultReport_istrapChange'
            },
            "textfield#EngFaultReport_traptime": {
                tap: 'onEngFaultReport_traptimeFocus'
            },
            "textfield#EngFaultReport_stoptime": {
                tap: 'onEngFaultReport_stoptimeFocus'
            },
            "textfield#EngFaultReport_handletime": {
                tap: 'onEngFaultReport_handletimeFocus'
            },
            "selectfield#EngFaultReport_lifttype": {
                change: 'onEngFaultReport_lifttypeChange'
            },
            "textfield#EngFaultReport_causeanalysis": {
                tap: 'onEngFaultReport_causeanalysisFocus'
            },
            "textfield#EngFaultReport_brktime": {
                tap: 'onEngFaultReport_brktimeFocus'
            },
            "textfield#EngFaultReport_finishtime": {
                tap: 'onEngFaultReport_finishtimeFocus'
            },
            "button#EngFaultReport_Btn1": {
                tap: 'onEngFaultReport_Btn1Tap'
            },
            "button#EngFaultReport_Btn2": {
                tap: 'onEngFaultReport_Btn2Tap'
            },
            "button#EngFaultReport_DurationPickerOK": {
                tap: 'onEngFaultReport_DurationPickerOKTap'
            },
            "button#EngFaultReport_BtnReturn": {
                tap: 'onEngFaultReport_BtnReturnTap'
            },
            "button#EngFaultReport_btnAdd": {
                tap: 'onEngFaultReport_btnAddTap'
            },
            "button#EngFaultReportParts_BtnConfirm": {
                tap: 'onEngFaultReportParts_BtnConfirmTap'
            },
            "button#EngFaultReportParts_BtnReturn": {
                tap: 'onEngFaultReportParts_BtnReturnTap'
            },
            "textfield#report_prono": {
                tap: 'onReport_pronoTap'
            },
            "textfield#report_repairman": {
                tap: 'onReport_repairmanTap'
            },
            "button#EngReport_Button": {
                tap: 'onEngReport_ButtonTap'
            },
            "textareafield#SXreport_reason": {
                tap: 'onReport_reasonTap'
            },
            "button#Reason_BtnReturn": {
                tap: 'onReason_BtnReturnTap'
            },
            "button#Reason_BtnAdd": {
                tap: 'onReason_BtnAddTap'
            },
            "button#ReasonAdd_Sub": {
                tap: 'onReasonAdd_SubTap'
            },
            "button#ReasonAdd_BtnReturn": {
                tap: 'onReasonAdd_BtnReturnTap'
            },
            "button#Reason_BtnSub": {
                tap: 'onReason_BtnSubTap'
            },
            "container#EngFaultReportReason": {
                initialize: 'onEngFaultReportReasonInitialize'
            },
            "list#EngFaultReport_ListParts": {
                itemtap: 'onEngFaultReport_ListPartsTap'
            },
            "panel#EngFaultReportParts": {
                initialize: 'onEngFaultReportPartsInitialize'
            }
        }
    },

    onEngFaultReport_date1Change: function(datepickerfield, newDate, oldDate, eOpts) {
        this.doEngFault_LoadReportList();
    },

    onEngFaultReport_date2Change: function(datepickerfield, newDate, oldDate, eOpts) {
        this.doEngFault_LoadReportList();
    },

    /*

        ********** 故障报告书 **********

    */
    onEngFault_ListReportItemTap: function(dataview, index, target, record, e, eOpts) {
        // 进入“故障报告表”明细页面
        viewUtil.goNext('Engineer.EngFaultReport', {record: record});
    },

    onEngFaultReportInitialize: function(component, eOpts) {
        // 故障报告书操作 - 保存、提交、通过、不通过
        loadMask.show();

        var me = this;

        // 初始化数据
        var form = Ext.getCmp('form_sx_reportdetail');
        var store;
        var button1 = Ext.getCmp('EngFaultReport_Btn1');
        var button2 = Ext.getCmp('EngFaultReport_Btn2');

        /* 签名 */
        /*
        form.add(
            {
                xtype: 'signaturefield',
                id: 'signatureField',
                sigWidth: 300,
                sigHeight: 300,
                label: '签名',
                labelwidth: '40%'
            });
        */

        // 初始化下拉选择项目
        dataUtil.createStore('common_storagelist').loadDat(Ext.emptyFn,Ext.emptyFn);
        dataUtil.createStore('common_getdeptlist').loadDat(Ext.emptyFn,Ext.emptyFn);


        var rpno = component.initialConfig.parm.record.get('rpno');
        var nextstate = component.initialConfig.parm.record.get('nextstate');
        var takestate = component.initialConfig.parm.record.get('state');
        console.log(nextstate);
        console.log('--takestate----'+takestate+'---');
        Ext.getCmp('EngFaultReport_Tbar').setTitle('故障报告');

        if(takestate=='新建'){
            console.log('新建');
            var status;
            store = dataUtil.createStore('sx_reportdetail');
            store.loadDat(
                function() {
                    // 测试数据
                    if(!global.isWorklight()) {
                        status = component.initialConfig.parm.record.get('state');
                        store.getAt(0).set('status', status);
                    }
                    form.setRecord(store.getAt(0));


                    // 困人相关
                    var istrap = store.getAt(0).get('istrap');
                    //me.onEngFaultReport_istrapChange(
                    //    Ext.getCmp('EngFaultReport_istrap'), istrap, istrap, null);

                    //原因分析
                    var analysisStr = '';
                    var report_analysisStr = '';
                    var analysis = store.getAt(0).get('analysis');
                    if(analysis.length>0){
                        for(var i=0;i<analysis.length;i++){
                            if(i!==0){
                             analysisStr+='、';
                             report_analysisStr+='+';
                         }
                             analysisStr+=analysis[i].faultanalysis;
                            report_analysisStr+=analysis[i].faulttype+'_';
                            report_analysisStr+=analysis[i].faultcode+'_';
                            report_analysisStr+=analysis[i].faultanalysis+'_';
                            report_analysisStr+=analysis[i].ladder;
                        }
                    }

                    Ext.getCmp('report_analysis').setValue(analysisStr);
                    Ext.getCmp('report_analysisStr').setValue(report_analysisStr);

                    //故障原因
                    var reasonStr = '';
                    var report_reasonStr = '';
                    var reason = store.getAt(0).get('reason');
                    if(reason.length>0){
                        for(var j=0;j<reason.length;j++){
                            if(j!==0){
                             reasonStr+=',';
                             report_reasonStr+='&';
                         }
                            reasonStr+=reason[j].reasonname;
                            report_reasonStr+=reason	[j].reasonname;
                        }
                    }

                    Ext.getCmp('report_reason').setValue(reasonStr);
                    Ext.getCmp('report_reasonStr').setValue(report_reasonStr);





                    // 故障原因
                    //var lifttype = store.getAt(0).get('lifttype');
                    //var causeanalysis = store.getAt(0).get('causeanalysis');
                    //me.doEngFaultReport_Load_faultsituation(lifttype, causeanalysis);

                    status = store.getAt(0).get('status');
                    switch(status) {
                        case '新建':
                            var nextstate = store.getAt(0).get('nextstate');
                            console.log(nextstate);
                            var BtnSave = true;
                            var BtnSub = true;
                            if(nextstate==null || nextstate.length<=0){
                                //把按钮区域隐藏
                                Ext.getCmp('EngFaultReport_PnlOperation').setHidden(true);
                                //把更换件的按钮隐藏
                                Ext.getCmp('EngFaultReportParts_PnlOperation').setHidden(true);

                                //表单只读
                                var fields = form.getFields();
                                for(var key in fields) {
                                    field = fields[key];
                                    if(field.setReadOnly()){
                                        field.setReadOnly(true);
                                    }
                                    if(field.setItemId()){
                                        field.setItemId();
                                    }

                                }

                            }else{
                                for(var n=0;n<nextstate.length;n++){
                                    var name=nextstate[n].name;
                                    if(name=='保存'){
                                        BtnSave = false;
                                    }
                                    if(name=='提交'){
                                        BtnSub = false;
                                    }
                                }
                            }

                            Ext.getCmp('EngFaultReport_Btn1').setHidden(BtnSave);
                            Ext.getCmp('EngFaultReport_Btn2').setHidden(BtnSub);

                            if(BtnSave && BtnSub){//按钮全隐藏了把区域也隐藏
                                Ext.getCmp('EngFaultReport_PnlOperation').setHidden(true);
                                Ext.getCmp('EngFaultReportParts_PnlOperation').setHidden(true);
                                Ext.getCmp('EngFaultReport_ListParts').suspendEvents();
                            }else{
                                // 初始化配件列表滑动操作
                                var partsList = Ext.getCmp('EngFaultReport_ListParts');
                                partsList.setPlugins(
                                    [
                                        {
                                            xclass: 'ux.SlideActions',
                                            openPosition: 75,
                                            buttons:
                                            [
                                                // 删除按钮
                                                {
                                                    xtype: 'button',
                                                    baseCls: 'x-button liftnet-list-button liftnet-bgColor-red',
                                                    text: '<i class="fa fa-lg fa-trash-o"></i>',
                                                    listeners: {
                                                        tap: function(button, e){
                                                            e.stopPropagation();
                                                            return false;
                                                        },
                                                        scope: this
                                                    },
                                                    handler: function(button, e) {
                                                        partsList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                                        partsList.getStore().remove(button.getRecord());
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                );
                            }
                            break;
                        /*case '待审':
                        Ext.getCmp('EngFaultReport_Tbar').setTitle('故障报告审核');
                                // 全屏蔽输入
                            var fields2 = form.getFields();
                            for(var key in fields2) {
                                if(key!=='remark'){
                                field = fields2[key];
                                if(field.setReadOnly) {
                                    field.setReadOnly(true);
                                }

                                //屏蔽方法
                                if(field.setItemId()){
                                    field.setItemId();
                                }
                                }else{
                                    Ext.getCmp('report_remark').setHidden(false);
                                }

                            }

                           //
                            //Ext.getCmp('report_remark').setReadOnly(false);

                            button1.setText('同意');
                            button2.setText('不同意');
                            Ext.getCmp('EngFaultReportParts_PnlOperation').setHidden(true);

                            break;*/

                        default:
                            // 全屏蔽输入
                            var fields = form.getFields();
                            for(var name in fields) {
                                field = fields[name];
                                if(field.setReadOnly) {
                                    field.setReadOnly(true);
                                }
                            }
                            Ext.getCmp('EngFaultReport_PnlOperation').setHidden(true);
                            Ext.getCmp('EngFaultReportParts_PnlOperation').setHidden(true);
                            break;
                    }
                    loadMask.hide();
                },
                function() {
                    loadMask.hide();
                    Ext.toast('未能读取故障报告书资料，请稍候再试！');
                    viewUtil.goLast();
                },
                    rpno
            );
        }else if(takestate==='待审' || takestate==='审批中'){
            console.log(takestate);
            var status;
            store = dataUtil.createStore('sx_reportAuditdetail');
            store.loadDat(
                function() {
                    // 测试数据
                    if(!global.isWorklight()) {
                        status = component.initialConfig.parm.record.get('state');
                        store.getAt(0).set('status', status);
                    }
                    form.setRecord(store.getAt(0));


                    nextstate =  store.getAt(0).get('nextstate');
                    console.log(nextstate);
                    if(nextstate.length>0){
                        console.log(nextstate[0]);
                        if(nextstate[0])
                            button1.setText(nextstate[0].name);
                        if(nextstate[1])
                            button2.setText(nextstate[1].name);
                    }else{
                        Ext.getCmp('EngFaultReport_PnlOperation').setHidden(true);
                    }

                    var partslist = store.getAt(0).get('partslist');
                    dataUtil.createStore('sx_reportparts').setData(partslist);

                    //原因分析
                    var analysisStr = '';
                    var report_analysisStr = '';
                    var analysis = store.getAt(0).get('analysis');
                    if(analysis.length>0){
                        for(var i=0;i<analysis.length;i++){
                            if(i!==0){
                             analysisStr+='、';
                             report_analysisStr+='+';
                         }
                             analysisStr+=analysis[i].faultanalysis;
                            report_analysisStr+=analysis[i].faulttype+'_';
                            report_analysisStr+=analysis[i].faultcode+'_';
                            report_analysisStr+=analysis[i].faultanalysis+'_';
                            report_analysisStr+=analysis[i].ladder;
                        }
                    }

                    Ext.getCmp('report_analysis').setValue(analysisStr);
                    Ext.getCmp('report_analysisStr').setValue(report_analysisStr);

                    //故障原因
                    var reasonStr = '';
                    var report_reasonStr = '';
                    var reason = store.getAt(0).get('reason');
                    if(reason.length>0){
                        for(var j=0;j<reason.length;j++){
                            if(j!==0){
                             reasonStr+=',';
                             report_reasonStr+='&';
                         }
                            reasonStr+=reason[j].reasonname;
                            report_reasonStr+=reason	[j].reasonname;
                        }
                    }

                    Ext.getCmp('report_reason').setValue(reasonStr);
                    Ext.getCmp('report_reasonStr').setValue(report_reasonStr);

                    Ext.getCmp('EngFaultReport_ListParts').suspendEvents();


                    loadMask.hide();

                },
                function() {
                    loadMask.hide();
                    Ext.toast('未能读取故障报告书资料，请稍候再试！');
                    viewUtil.goLast();

                    loadMask.hide();
                },
                rpno
            );


            Ext.getCmp('EngFaultReport_Tbar').setTitle('故障报告审核');
            // 全屏蔽输入

            var fields2 = form.getFields();
            for(var key in fields2) {
                if(key!=='remark'&& key!=='createbydept'){
                    field = fields2[key];
                    if(field.setReadOnly) {
                        field.setReadOnly(true);
                    }

                    //屏蔽方法
                    if(field.setItemId()){
                        field.setItemId();
                    }
                }else{
                    Ext.getCmp('report_remark').setHidden(false);
                }

            }

            //
            //Ext.getCmp('report_remark').setReadOnly(false);

            Ext.getCmp('EngFaultReportParts_PnlOperation').setHidden(true);

        }else if(takestate==='不通过'){
            console.log(takestate);
            var status;
            store = dataUtil.createStore('sx_reportAuditdetail');
            store.loadDat(
                function() {
                    // 测试数据
                    if(!global.isWorklight()) {
                        status = component.initialConfig.parm.record.get('state');
                        store.getAt(0).set('status', status);
                    }

                    form.setRecord(store.getAt(0));


                    nextstate =  store.getAt(0).get('nextstate');
                    console.log(nextstate);

                    if(nextstate.length>0){
                        if(nextstate[0])
                            button1.setText(nextstate[0].name);
                            button1.setHtml(nextstate[0].name);
                        if(nextstate[1])
                            button2.setText(nextstate[1].name);
                            button2.setHtml(nextstate[1].name);

                    }else{
                        Ext.getCmp('EngFaultReport_PnlOperation').setHidden(true);
                        Ext.getCmp('EngFaultReport_ListParts').suspendEvents();
                        var fields2 = form.getFields();
                        for(var key in fields2) {
                            if(key!=='remark'&& key!=='createbydept'){
                                field = fields2[key];
                                if(field.setReadOnly) {
                                    field.setReadOnly(true);
                                }

                                //屏蔽方法
                                if(field.setItemId()){
                                    field.setItemId();
                                }
                            }else{
                                Ext.getCmp('report_remark').setHidden(false);
                            }

                        }
                        Ext.getCmp('EngFaultReportParts_PnlOperation').setHidden(true);

                    }


                    //原因分析
                    var analysisStr = '';
                    var report_analysisStr = '';
                    var analysis = store.getAt(0).get('analysis');
                    if(analysis.length>0){
                        for(var i=0;i<analysis.length;i++){
                            if(i!==0){
                             analysisStr+='、';
                             report_analysisStr+='+';
                         }
                             analysisStr+=analysis[i].faultanalysis;
                            report_analysisStr+=analysis[i].faulttype+'_';
                            report_analysisStr+=analysis[i].faultcode+'_';
                            report_analysisStr+=analysis[i].faultanalysis+'_';
                            report_analysisStr+=analysis[i].ladder;
                        }
                    }

                    Ext.getCmp('report_analysis').setValue(analysisStr);
                    Ext.getCmp('report_analysisStr').setValue(report_analysisStr);

                    //故障原因
                    var reasonStr = '';
                    var report_reasonStr = '';
                    var reason = store.getAt(0).get('reason');
                    if(reason.length>0){
                        for(var j=0;j<reason.length;j++){
                            if(j!==0){
                             reasonStr+=',';
                             report_reasonStr+='&';
                         }
                            reasonStr+=reason[j].reasonname;
                            report_reasonStr+=reason	[j].reasonname;
                        }
                    }

                    Ext.getCmp('report_reason').setValue(reasonStr);
                    Ext.getCmp('report_reasonStr').setValue(report_reasonStr);



                    loadMask.hide();

                },
                function() {
                    loadMask.hide();
                    Ext.toast('未能读取故障报告书资料，请稍候再试！');
                    viewUtil.goLast();

                    loadMask.hide();
                },
                rpno
            );


            Ext.getCmp('EngFaultReport_Tbar').setTitle('故障报告');


        }else{
            // 全屏蔽输入
            var fields = form.getFields();
            for(var name in fields) {
                field = fields[name];
                if(field.setReadOnly) {
                    field.setReadOnly(true);
                }
            }
            Ext.getCmp('EngFaultReport_ListParts').suspendEvents();
            Ext.getCmp('EngFaultReport_PnlOperation').setHidden(true);
            Ext.getCmp('EngFaultReportParts_PnlOperation').setHidden(true);
        }
    },

    onEngFaultReport_istrapChange: function(togglefield, newValue, oldValue, eOpts) {
        var istrap = newValue;
        var fieldtrapnum = Ext.getCmp('EngFaultReport_trapnum');
        var fieldtraptime = Ext.getCmp('EngFaultReport_traptime');
        fieldtrapnum.setReadOnly(!istrap);
        fieldtraptime.setReadOnly(!istrap);
        if(istrap) {
            fieldtrapnum.setRequired(true);
            fieldtraptime.setRequired(true);
        } else {
            fieldtrapnum.setValue(0);
            fieldtraptime.setValue('');
            fieldtrapnum.setRequired(false);
            fieldtraptime.setRequired(false);
        }
    },

    onEngFaultReport_traptimeFocus: function(textfield) {
        // 故障报告书 - 困人时长
        this.doEngFaultReport_ShowDurationPicker(textfield);
    },

    onEngFaultReport_stoptimeFocus: function(textfield) {
        // 故障报告书 - 停运时长
        this.doEngFaultReport_ShowDurationPicker(textfield);
    },

    onEngFaultReport_handletimeFocus: function(textfield) {
        // 故障报告书 - 处理时长
        this.doEngFaultReport_ShowDurationPicker(textfield);
    },

    onEngFaultReport_lifttypeChange: function(selectfield, newValue, oldValue, eOpts) {
        Ext.getCmp('EngFaultReport_causeanalysis').setValue('');
        this.doEngFaultReport_Load_faultsituation(newValue, '');
    },

    onEngFaultReport_causeanalysisFocus: function(textfield) {
        // 故障报告书 - 故障原因
        if(Ext.getCmp('EngFaultReport_PnlOperation').getHidden()) return;

        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{faultTypeName}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'common_faultsituation',
            storeparm: {
                userid: global.getUserId(),
                TypeRef: Ext.getCmp('EngFaultReport_lifttype').getValue()
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: Ext.emptyFn,
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('form_sx_reportdetail').setValues({
                        causeanalysis: record
                    });
                } else {
                    var id = record.get('faultTypeID');
                    var name = record.get('faultTypeName');
                    textfield.setOptions({text:name, value:id});
                    textfield.setValue(id);
                }
            }
        });
        textfield.blur();
    },

    onEngFaultReport_brktimeFocus: function(textfield) {
        // 故障报告书 - 故障时间
        liftnet.app.getController('Engineer.EngFaultController')
            .doEngFault_ShowDatePicker(textfield);
    },

    onEngFaultReport_finishtimeFocus: function(textfield) {
        // 故障报告书 - 完成时间
        liftnet.app.getController('Engineer.EngFaultController')
            .doEngFault_ShowDatePicker(textfield);
    },

    onEngFaultReport_Btn1Tap: function(button, e, eOpts) {
        this.doEngFaultReport_Process(button.getText()+'_'+button.getHtml());
    },

    onEngFaultReport_Btn2Tap: function(button, e, eOpts) {
        this.doEngFaultReport_Process(button.getText()+'_'+button.getHtml());
    },

    onEngFaultReport_DurationPickerOKTap: function(button, e, eOpts) {
        // 故障报告书 - 时长选择 - 确定
        var picker = Ext.getCmp('EngFaultReport_DurationPicker');
        var values = picker.getValues();
        this.EngFaultReport_currentfield.setValue(
            values.day +
            values.hour + ':' + values.minute
        );
    },

    onEngFaultReport_BtnReturnTap: function(button, e, eOpts) {
        // 故障报告书 - 返回上页
        viewUtil.goLast();
    },

    onEngFaultReport_btnAddTap: function(button, e, eOpts) {
        // 故障报告书 - 更换件列表
        viewUtil.goNext('Engineer.EngFaultReportParts',{});
    },

    onEngFaultReportParts_BtnConfirmTap: function(button, e, eOpts) {
        // “添加配件”页面 - 确定
        var data = Ext.getCmp('form_sx_reportdetail_trplist').getValues();
        if(!data.materialsname || !data.materialsnum ||
           data.materialsname==='' || data.materialsnum<=0) {
            Ext.toast('请输入名称和数量！');
            return;
        }
        var index = Ext.getCmp('reportpart_index').getValue();

        if(index!==''){
            Ext.getCmp('EngFaultReport_ListParts').getStore().getAt(index).set(data);
        }else{
            Ext.getCmp('EngFaultReport_ListParts').getStore().add(data);
        }
        viewUtil.goLast();
    },

    onEngFaultReportParts_BtnReturnTap: function(button, e, eOpts) {
        // “添加配件”页面 - 返回上页
        viewUtil.goLast();
    },

    onReport_pronoTap: function(textfield) {
        // 新增受信 - 设备注册码（服务号）
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{prodno}</div>';


        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'common_getserviceno',
            storeparm: {
                userid: global.getUserId(),
                serviceno: textfield.getValue(),
                curpagenum: 1,
                pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: true,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.serviceno = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    textfield.setValue(record);
                } else {
                    textfield.setValue(record.get('prodno'));

                }
            }
        });
        textfield.blur();
    },

    onReport_repairmanTap: function(textfield) {
         // 新增受信 - 派工人员
                var tpl =
                    '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{repairman}</div>' +
                    '<div class="liftnet-font-size12 liftnet-fontColor-gray">{department}</div>' ;

                viewUtil.goNext('Common.ComMultiSelect', {
                    textfield: textfield,
                    storeid: 'Common_repairmanlist',
                    storeparm: {
                        userid: global.getUserId(),
                        //storageid: storageid
                    },
                    itemtpl: tpl,
                    paging: false,
                    allowedit: false,
                    allowsearch: false,
                    fnSetFilter: Ext.emptyFn,
                    fnSelected: function(record) {
                        if(typeof(record)==='string') {
                            Ext.getCmp('form_sx_reportdetail').setValues({
                                repairman: record
                            });
                        } else {
                            var repairman = '';
                            var department = '';
                            for(var i = 0; i < record.length; i++){
                                if(i!==0){
                                  repairman +=',';
                                  department+=',';
                                }
                                repairman += record[i].get('repairman');
                                department += record[i].get('department');

                            }
                            Ext.getCmp('form_sx_reportdetail').setValues({
                                    repairman: repairman,
                                    repairmandept:department,

                            });
                        }
                    }
                });
                textfield.blur();
    },

    onEngReport_ButtonTap: function(button, e, eOpts) {
        //故障报告-状态筛选按钮
                popMenu.show('Engineer.EngFaultReportStatus', button);
    },

    onReport_reasonTap: function(textareafield) {
        //先把当前故障原因加入Store
        var reasonStr = Ext.getCmp('report_reasonStr').getValue();

        console.log(reasonStr);
        if(reasonStr===''){
        }else{
            var reasonJSON = [];
            var reason = reasonStr.split('&');
            console.log(reason.length);
            if(reason.length>0){
                for(var i=0;i<reason.length;i++){
                    reasonJSON[i]={
                        reasonname : reason[i]
                    };
                }
            }
            dataUtil.createStore('sx_report_reason').add(reasonJSON);
        }


        //故障原因----跳转至另一页面
        viewUtil.goNext('Engineer.EngFaultReportReason',{textareafield:textareafield});
    },

    onReason_BtnReturnTap: function(button, e, eOpts) {
        //故障原因----返回上一页
        Ext.getCmp('Reason_List').getStore().removeAll();
        viewUtil.goLast();
    },

    onReason_BtnAddTap: function(button, e, eOpts) {
        //故障原因增加----跳转至另一页面
        viewUtil.goNext('Engineer.EngFaultReportReasonAdd');
    },

    onReasonAdd_SubTap: function(button, e, eOpts) {
        //故障原因增加确定
        var me = this;
        var form = Ext.getCmp('ReasonAdd_form');
        var rp = form.getValues();


        var ReasonAdd_str = rp.ReasonAdd_str;
        console.log('--------ReasonAdd_str------------');
        console.log(ReasonAdd_str);
        console.log('--------ReasonAdd_str------------');

        var parm = [{
            reasonname:ReasonAdd_str
        }];

        Ext.getCmp('Reason_List').getStore().add(parm);
        viewUtil.goLast();



    },

    onReasonAdd_BtnReturnTap: function(button, e, eOpts) {
        //故障原因增加返回上一页面
        viewUtil.goLast();
    },

    onReason_BtnSubTap: function(button, e, eOpts) {
        //故障原因确定
        var rp =  Ext.getCmp('Reason_List').getStore().getData();

        var ReasonJson = rp.all;
        var ReasonStr = '';
        var report_reasonStr = '';
        if(ReasonJson.length>0){
            for(var i=0;i<ReasonJson.length;i++){
                if(i!==0){
                    ReasonStr+=',';
                    report_reasonStr+='&';
                }
                    ReasonStr+=ReasonJson[i].data.reasonname;
                    report_reasonStr+=ReasonJson[i].data.reasonname;
            }
        }

        console.log('________');
        console.log(ReasonStr);
        console.log('________');
        if(Ext.getCmp('report_reason')){
         Ext.getCmp('report_reason').setValue(ReasonStr);
        }
        if(Ext.getCmp('report_reasonStr')){
         Ext.getCmp('report_reasonStr').setValue(report_reasonStr);
        }
        if(Ext.getCmp('sxreport_reason')){
         Ext.getCmp('sxreport_reason').setValue(ReasonStr);
        }
        if(Ext.getCmp('sxreport_reasonStr')){
         Ext.getCmp('sxreport_reasonStr').setValue(report_reasonStr);
        }

         Ext.getCmp('Reason_List').getStore().removeAll();
         viewUtil.goLast();
    },

    onEngFaultReportReasonInitialize: function(component, eOpts) {
        // 初始化故障原因列表滑动操作
        var partsList = Ext.getCmp('Reason_List');
        partsList.setPlugins(
            [
                {
                    xclass: 'ux.SlideActions',
                    openPosition: 75,
                    buttons:
                    [
                        // 删除按钮
                        {
                            xtype: 'button',
                            baseCls: 'x-button liftnet-list-button liftnet-bgColor-red',
                            text: '<i class="fa fa-lg fa-trash-o"></i>',
                            listeners: {
                                tap: function(button, e){
                                    e.stopPropagation();
                                    return false;
                                },
                                scope: this
                            },
                            handler: function(button, e) {
                                partsList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                partsList.getStore().remove(button.getRecord());
                            }
                        }
                    ]
                }
            ]
        );
    },

    onEngFaultReport_ListPartsTap: function(dataview, index, target, record, e, eOpts) {
        viewUtil.goNext('Engineer.EngFaultReportParts',{record:record,index:index});
    },

    onEngFaultReportPartsInitialize: function(component, eOpts) {
        var taskrecord = component.initialConfig.parm.record;
        var index = component.initialConfig.parm.index;
        console.log(index+'____');

        if(taskrecord){
            Ext.getCmp('form_sx_reportdetail_trplist').setRecord(taskrecord);
        }
        if(index!==undefined){
            Ext.getCmp('reportpart_index').setValue(index);
        }
    },

    doEngFault_LoadReportList: function() {
        // 故障业务标签页 - 故障报告书列表刷新
        var date1 = Ext.getCmp('EngFaultReport_date1').getValue();
        var date2 = Ext.getCmp('EngFaultReport_date2').getValue();
        if(!date1 || !date2) {
            return;
        }
        date1 = Ext.Date.format(new Date(date1), 'Y-m-d');
        date2 = Ext.Date.format(new Date(date2), 'Y-m-d');
        Ext.getCmp('EngFault_ListReport').getStore().loadDat(
            function(n) {
                // 设置角标
                /*
                var task = Ext.create('Ext.util.DelayedTask', function() {
                        Ext.getCmp('EngFault_CtnFaultList').setBadgeText(n>0? ' ':'');
                    }, this);
                task.delay(1000);
                task.cancel();
                */
                if(n===0) Ext.toast('没有符合条件的故障报告书数据!');
                console.log('故障报告书列表搜索完成!');
            },
            function() {
                Ext.toast('暂时未能获取故障报告书列表!');
            },
            {
                userid: global.getUserId(),
                startrptime: date1,
                endrptime: date2,
                curpagenum:1,
                pagesize:20,
                searchkey:''
            }
        );
    },

    doEngFaultReport_ShowDurationPicker: function(textfield) {
        // 故障报告书 - 时长选择初始化 - 0000:00
        var picker = Ext.getCmp('EngFaultReport_DurationPicker');
        picker.getToolbar().setTitle(textfield.getLabel());

        var value = textfield.getValue() || '0000:00';
        var day    = global.pad2(parseInt(value.substr(0,2))||0);
        var hour   = global.pad2(parseInt(value.substr(2,2))||0);
        var minute = global.pad2(parseInt(value.substr(5,2))||0);

        picker.setValue({
            day: day,
            hour: hour,
            minute: minute
        });

        picker.show();
        this.EngFaultReport_currentfield = textfield; // 记录当前日期字段
    },

    doEngFaultReport_Process: function(action) {
        // 故障报告书操作 - 保存/提交/通过/不通过/提交/作废
        var me = this;
        var form = Ext.getCmp('form_sx_reportdetail');
        var rp = form.getValues();
        var state;


        //截取原因分析
        var report_analysisStr = Ext.getCmp('report_analysisStr').getValue();
        var analysisJSON = [];
        if(report_analysisStr!==''){
            var AnalysisStrs = report_analysisStr.split('+');
            if(AnalysisStrs.length>0){
                for(var i=0;i<AnalysisStrs.length;i++){
                    analysisJSON[i] = {
                        faulttype: AnalysisStrs[i].split('_')[0],
                        faultcode: AnalysisStrs[i].split('_')[1],
                        faultanalysis: AnalysisStrs[i].split('_')[2],
                        ladder: AnalysisStrs[i].split('_')[3]
                    };
                }
                    console.log('-------AnalysisStrs------');
                    console.log(analysisJSON);
                    console.log('-------AnalysisStrs------');
            }
        }

        //截取故障原因
        var report_reason = rp.reason;
        var reasonJSON = [];
        if(report_reason!==''){
            var Report_reason = report_reason.split('&');
            if(Report_reason.length>0){
                for(var i=0;i<Report_reason.length;i++){
                    reasonJSON[i] = {
                        reasonname: Report_reason[i]
                    };
                }
                    console.log('-------reasonJSON------');
                    console.log(reasonJSON);
                    console.log('-------reasonJSON------');
            }
        }



        var rptime = '';//报告时间
        var rpuser = '';//报告人ID
        var approvalby = '';//审核人ID
        var approvalbydept = '';//审核人所属部门
        var createby = '';//创建人ID

        // 操作标志
        console.log(action);
        switch(action) {
            case '保存_null':
                state = '0';
                rp.rptime = Ext.Date.format(new Date(), 'Y-m-d H:i');
                rp.rpuser = global.getUserId();
                rp.createby = global.getUserId();

                break;

            case '提交_null':
                state = '1';
                rp.rptime = Ext.Date.format(new Date(), 'Y-m-d H:i');
                rp.rpuser = global.getUserId();
                rp.createby = global.getUserId();
                break;
            case '同意_null':
                state = '同意';
                rp.approvalby = global.getUserId();
                rp.approvalbydept = rp.createbydept;
                break;
            case '不同意_null':
                state = '不同意';
                rp.approvalby = global.getUserId();
                rp.approvalbydept = rp.createbydept;
                break;
            case '提交_提交':
                state = '提交';
                rp.approvalby = global.getUserId();
                rp.approvalbydept = rp.createbydept;
                break;
            case '作废_作废':
                state = '作废';
                rp.approvalby = global.getUserId();
                rp.approvalbydept = rp.createbydept;
                break;

            default:
                Ext.toast('未知的操作：' + action);
        }

        // 检查必填项目
        var fields = form.getFields();
        for(var name in fields) {
            field = fields[name];
            //console.log(field.getLabel() + ':' + field.getRequired() + ',' + field.getValue());
            if(field.getRequired() &&
               (field.getValue()==='' || !field.getValue())) {
                Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
                return;
            }

            if(name==='remark' && state==='不同意' &&
              (field.getValue()==='' || !field.getValue())) {
                Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
                return;
            }

        }


        rp.trcontent = '';//受信内容
        rp.dealresult = '';//处理结果
        rp.reason = reasonJSON;//故障原因
        rp.analysis = analysisJSON;//原因分析

        var trplist = [];
        var partsStore = Ext.getCmp('EngFaultReport_ListParts').getStore();
        partsStore.getData().each(function(r) {
            trplist.push({
                materialsname: r.get('materialsname'),
                materialsnum: r.get('materialsnum'),
                model: r.get('model'),
                prices:	r.get('prices'),
                remark:	r.get('remark')
            });
        });
        rp.partslist = trplist;
        var parm = {
            userid: global.getUserId(),
            state: state,
            rp: rp,
            rpno:rp.rpno,
            remark:rp.remark
            //trplist: trplist
        };



        console.log(parm);
        loadMask.show();
        var me = this;
        var store = dataUtil.createStore('sx_reportdetailsv');
        store.updateDat(
            function(rpno) {
                loadMask.hide();
                Ext.toast(action.split('_')[0] + '操作完成！报告编号为:'+rpno);

                // 刷新故障报告书待办列表
        //         liftnet.app.getController('Engineer.EngHomeController').doEngHome_LoadTodoFaultReport();
                liftnet.app.getController('Engineer.EngHomeController').doEngHome_LoadTodoAll();
        //         me.doEngFault_LoadReportList();
                liftnet.app.getController('Engineer.EngFaultController').
                    doEngFault_LoadReportList(1,20,'','refresh');
                liftnet.app.getController('Engineer.EngFaultController').
                    doEngFault_ResetReportCurPage();
                viewUtil.goLast();
            },
            function() {
                loadMask.hide();
                Ext.toast('未能完成' + action + '操作，请稍候再试！');
            },
            parm
        );
    },

    doEngFaultReport_Load_faultsituation: function(lifttype, value) {
        var faultnamestore = dataUtil.createStore('common_faultsituation');
        var v = value;
        faultnamestore.loadDat(
            function(n) {
                var data = faultnamestore.getData();
                var options = [];
                for(var i=0;i<n; i++) {
                    var text = data.getAt(i).get('faultTypeName');
                    var value = data.getAt(i).get('faultTypeID');
                    options.push({text:text, value:value});
                }
                Ext.getCmp('EngFaultReport_causeanalysis').setOptions(options);
                Ext.getCmp('EngFaultReport_causeanalysis').setValue(v);
            },
            Ext.emptyFn,
            {
                userid: global.getUserId(),
                TypeRef: lifttype
            }
        );

    }

});