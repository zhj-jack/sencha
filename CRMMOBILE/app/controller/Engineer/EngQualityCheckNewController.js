/*
 * File: app/controller/Engineer/EngQualityCheckNewController.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('liftnet.controller.Engineer.EngQualityCheckNewController', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "panel#EngQualityCheckListNew": {
                show: 'onEngQualityCheckListNewInitialize'
            },
            "button#EngQualityCheckListNew_ButReturn": {
                tap: 'onEngQualityCheckListNew_ButReturnTap'
            },
            "list#EngQualityCheckNew_TodoList": {
                itemtap: 'onEngQualityCheckNew_TodoListItemTap'
            },
            "button#EngFirstCheckNew_ReturnButton": {
                tap: 'onEngFirstCheck_ReturnButtonTap'
            },
            "container#EngFirstCheckNew": {
                initialize: 'onEngFirstCheckNewInitialize'
            },
            "searchfield#EngFirstCheckNew_Seach_Job": {
                keyup: 'onEngFirstCheckNew_Seach_JobKeyup'
            },
            "searchfield#Eng_FirstCheckTaskNew_Seach_Task": {
                keyup: 'onEng_FirstCheckTaskNew_Seach_TaskKeyup'
            },
            "textfield#EngFirstCheckJob_projectname": {
                tap: 'onEngFirstCheckJob_projectnameFocus'
            },
            "textfield#EngFirstCheckJob_checkednum": {
                tap: 'onEngFirstCheckJob_checkednumFoucs'
            },
            "textfield#EngFirstCheckJob_planstartdate": {
                tap: 'onEngFirstCheckJob_planstartdateFoucs'
            },
            "textfield#Eng_FirstCheckJob_checkuser": {
                tap: 'onEng_FirstCheckJob_checkuserFoucs'
            },
            "button#EngFirstCheckJob_CommitBtn": {
                tap: 'onEngFirstCheckJob_CommitBtnTap'
            },
            "panel#EngChooseLift": {
                initialize: 'onEngChooseLiftInitialize'
            }
        }
    },

    onEngQualityCheckListNewInitialize: function(component, eOpts) {
        Ext.getCmp('EngQualityCheck_TodoList').getStore().loadDat(
            function() {
            },
            function() {
                Ext.toast('读取质检任务数据出现错误！');
            }
        );
    },

    onEngQualityCheckListNew_ButReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngQualityCheckNew_TodoListItemTap: function(dataview, index, target, record, e, eOpts) {
        switch(index) {
            case 0:
                viewUtil.goNext('Engineer.EngFirstCheck');
                break;
        }
    },

    onEngFirstCheck_ReturnButtonTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngFirstCheckNewInitialize: function(component, eOpts) {
        var me = this;

        // 初始化下拉刷新、滑动按钮插件
        var jobList = Ext.getCmp('EngFirstCheckNew_ListJob');
        jobList.setPlugins(
            [
                {
                    autoSnapBack: false,
                    lastUpdatedText: '上次刷新:&nbsp;',
                    loadedText: '已刷新',
                    loadingText: '正在刷新故障任务...',
                    pullText: '下拉刷新...',
                    releaseText: '放开开始刷新...',
                    type: 'pullrefresh',
                    listeners : {
                        latestfetched : function() {
                            me.doEngFirstCheckNew_LoadJobList();
                    	}
                    }
                },
                // 以下滑动按钮插件应从EngHomeController的onEngHomeInitial()中复制！
                {
                    xclass: 'ux.SlideActions',
                    openPosition: 150,
                    buttons:
                        [
                            // 按钮1
                            {
                                xtype: 'button',
                                baseCls: 'x-button liftnet-list-button liftnet-bgColor-blue',
                                text: '1',
                                initial: function(button) {
                                        me.doEngFirstCheckNew_InitialNextStateButton(button, 0);
                                },
                                listeners: {
                                    tap: function(button, e){
                                        e.stopPropagation();
                                        return false;
                                    },
                                    scope: this
                                },
                                handler: function(button, e) {
                                    jobList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                        me.doEngFirstCheckNewJob_Process({
                                            record: button.getRecord(),
                                            operationIndex: 0
                                        });
                                }
                            },
                            // 按钮2
                            {
                                xtype: 'button',
                                baseCls: 'x-button liftnet-list-button liftnet-bgColor-green',
                                text: '2',
                                initial: function(button) {
                                        me.doEngFirstCheckNew_InitialNextStateButton(button, 1);
                                },
                                listeners: {
                                    tap: function(button, e){
                                        e.stopPropagation();
                                        return false;
                                    },
                                    scope: this
                                },
                                handler: function(button, e) {
                                    jobList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                        me.doEngFirstCheckNewJob_Process({
                                            record: button.getRecord(),
                                            operationIndex: 1
                                        });
                                }
                            },
                            // 按钮3
                            {
                                xtype: 'button',
                                baseCls: 'x-button liftnet-list-button liftnet-bgColor-orange',
                                text: '3',
                                initial: function(button) {
                                        me.doEngFirstCheckNew_InitialNextStateButton(button, 2);
                                },
                                listeners: {
                                    tap: function(button, e){
                                        e.stopPropagation();
                                        return false;
                                    },
                                    scope: this
                                },
                                handler: function(button, e) {
                                    jobList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                        me.doEngFirstCheckNewJob_Process({
                                            record: button.getRecord(),
                                            operationIndex: 2
                                        });
                                }
                            }
                    ]
                }
            ]
        );

        var taskList = Ext.getCmp('EngFirstCheckNew_ListJob');
        taskList.setPlugins(
            [
                {
                    autoSnapBack: false,
                    lastUpdatedText: '上次刷新:&nbsp;',
                    loadedText: '已刷新',
                    loadingText: '正在刷新故障任务...',
                    pullText: '下拉刷新...',
                    releaseText: '放开开始刷新...',
                    type: 'pullrefresh',
                    listeners : {
                        latestfetched : function() {
                            me.doEngFirstCheckNew_LoadTaskList();
                    	}
                    }
                },
                // 以下滑动按钮插件应从EngHomeController的onEngHomeInitial()中复制！
                {
                    xclass: 'ux.SlideActions',
                    openPosition: 150,
                    buttons:
                        [
                            // 按钮1
                            {
                                xtype: 'button',
                                baseCls: 'x-button liftnet-list-button liftnet-bgColor-blue',
                                text: '1',
                                initial: function(button) {
                                        me.doEngFirstCheckNew_InitialNextStateButton(button, 0);
                                },
                                listeners: {
                                    tap: function(button, e){
                                        e.stopPropagation();
                                        return false;
                                    },
                                    scope: this
                                },
                                handler: function(button, e) {
                                    taskList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                        me.doEngFirstCheckNewTask_Process({
                                            record: button.getRecord(),
                                            operationIndex: 0
                                        });
                                }
                            },
                            // 按钮2
                            {
                                xtype: 'button',
                                baseCls: 'x-button liftnet-list-button liftnet-bgColor-green',
                                text: '2',
                                initial: function(button) {
                                        me.doEngFirstCheckNewTask_InitialNextStateButton(button, 1);
                                },
                                listeners: {
                                    tap: function(button, e){
                                        e.stopPropagation();
                                        return false;
                                    },
                                    scope: this
                                },
                                handler: function(button, e) {
                                    taskList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                        me.doEngFirstCheckNewTask_Process({
                                            record: button.getRecord(),
                                            operationIndex: 1
                                        });
                                }
                            },
                            // 按钮3
                            {
                                xtype: 'button',
                                baseCls: 'x-button liftnet-list-button liftnet-bgColor-orange',
                                text: '3',
                                initial: function(button) {
                                        me.doEngFirstCheckNewTask_InitialNextStateButton(button, 2);
                                },
                                listeners: {
                                    tap: function(button, e){
                                        e.stopPropagation();
                                        return false;
                                    },
                                    scope: this
                                },
                                handler: function(button, e) {
                                    taskList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                        me.doEngFirstCheckNewTask_Process({
                                            record: button.getRecord(),
                                            operationIndex: 2
                                        });
                                }
                            }
                    ]
                }
            ]
        );

        //读取派工单数据
        me.doEngFirstCheckNew_LoadJobList();
        //读取首检任务数据
        me.doEngFirstCheckNew_LoadTaskList();

    },

    onEngFirstCheckNew_Seach_JobKeyup: function(textfield, e, eOpts) {
        // 过滤派工单列表
        Ext.getCmp('EngFirstCheckNew_ListJob').getStore().filteDat(textfield.getValue());

    },

    onEng_FirstCheckTaskNew_Seach_TaskKeyup: function(textfield, e, eOpts) {
        // 过滤首检任务列表
        Ext.getCmp('EngFirstCheckNew_ListTask').getStore().filteDat(textfield.getValue());
    },

    onEngFirstCheckJob_projectnameFocus: function(textfield) {
        // 新增派工单 - 选择项目
        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{projectname}({liftnum})</div>' +
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{projectaddress}</div>' ;
        //var storageid = Ext.getCmp('EngFaultAdd_storageid').getValue();

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_chooseprojectlist',
        //     storeid: 'common_sxpglist',
            storeparm: {
                userid: global.getUserId(),
                //storageid: storageid
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: Ext.emptyFn,
            fnSelected: function(record) {
                //带回项目名称，地址，台数，合同id
                    Ext.getCmp('EngFirstCheckJob_Form').setValues({
                        projectname: record.get('projectname'),
                        projectaddress: record.get('projectaddress'),
                        liftnum: record.get('liftnum'),
                        contractid: record.get('contractid'),
                        dispatchtype: record.get('dispatchtype'),
                    });

            }
        });
        textfield.blur();
    },

    onEngFirstCheckJob_checkednumFoucs: function(textfield) {
        var contractid = Ext.getCmp('EngFirstCheckJob_contractid').getValue();
        //跳转到选择电梯界面，传入合同ID
        viewUtil.goNext('Engineer.EngChooseLift',
                        {contractid:contractid});
    },

    onEngFirstCheckJob_planstartdateFoucs: function(textfield) {
        // 新增派工单 - 计划开始日期
        this.doEngFirstCheckJob_ShowDatePicker(textfield);
    },

    onEng_FirstCheckJob_checkuserFoucs: function(textfield) {
        // 新增派工单 - 选择检验人员
        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{username}({usertype})</div>' +
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{department}</div>' ;
        //var storageid = Ext.getCmp('EngFaultAdd_storageid').getValue();

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'eng_choosecheckuserlist',
        //     storeid: 'common_sxpglist',
            storeparm: {
                userid: global.getUserId(),
                //storageid: storageid
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: Ext.emptyFn,
            fnSelected: function(record) {
                    Ext.getCmp('EngFirstCheckJob_Form').setValues({
                        checkuser:record.get('username'),
                    });

            }
        });
        textfield.blur();
    },

    onEngFirstCheckJob_CommitBtnTap: function(button, e, eOpts) {
        // 派工单操作 - 提交
        var me = this;
        var form = Ext.getCmp('EngFirstCheckJob_Form');
        var sj = form.getValues();

        sj.createid=global.getUserId();
        var createdeptid;
        //获取部门ID
        var store = dataUtil.createStore('user');
        store.loadDat(
            function(ret){
                createdeptid = ret.data.get('storageid');
            },
            function(){
                Ext.toast('读取createdeptid数据出现错误！');
            },
            {userid:global.getUserId()}
        );
        sj.createdeptid=createdeptid;

        // 检查必填项目
        var fields = form.getFields();
        for(var name in fields) {
            field = fields[name];
            //console.log(field.getLabel() + ':' + field.getRequired() + ',' + field.getValue());
            if(field.getRequired() &&
               (field.getValue()==='' || !field.getValue())) {
                Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
                return;
            }
        }

        var parm = {
            userid: global.getUserId(),
            sj:sj
        };

        //console.log(JsonUtil.convertToString(parm));
        loadMask.show();
        var store = dataUtil.createStore('job_jobdetail');
        store.updateDat(
            function() {
                loadMask.hide();
                Ext.toast('操作完成！');
                // 刷新派工单列表
                me.doEngFirstCheckNew_LoadJobList();
                viewUtil.goLast();
            },
            function() {
                loadMask.hide();
                Ext.toast('未能完成提交操作，请稍候再试！');
            },
            parm
        );
    },

    onEngChooseLiftInitialize: function(component, eOpts) {
        //加载电梯数据
    },

    doEngFirstCheckNew_LoadJobList: function() {
          Ext.getCmp('EngFirstCheck_ListJob').getStore().loadDat(
                    function() {
                    },
                    function() {
                        Ext.toast('读取首检派工单数据出现错误！');
                    }
                );
    },

    doEngFirstCheckNew_InitialNextStateButton: function(button, index) {
        // 初始化处理按钮
        // 参数：按钮对象、按钮索引号
        var b = button.record.get('nextstate');
        if(!b) return;

        if(b[index]&&b[index].text!=='') {
            if(button.setHidden) {
                button.setHidden(false);
                button.setText(b[index].name);
            } else {
                button.hidden = false;
                button.text = b[index].name;
            }
        } else {
            if(button.setHidden) {
                button.setHidden(true);
            } else {
                button.hidden = true;
            }
        }
    },

    doEngFirstCheckNewJob_Process: function(parm) {
        /*

           派工单处理入口
           参数
           {
               record:故障待办记录,
               operationIndex:操作索引号(数字)/操作名(字符串),
               fn:回调函数，通常用于关闭故障详细信息页面
           }
        */
        var me = this;
        var operation;
        var fn = parm.fn;
        var jnl = parm.record.get('jnl');
        var state;
        var remark;

        // var sj = {
        //     jnl: parm.record.get('jnl'),
        //     status: parm.record.get('status'),
        //     projectid: parm.record.get('projectid'),
        //     contractid: parm.record.get('contractid'),
        //     projectname:parm.record.get('projectname'),
        //     projectaddress:parm.record.get('projectaddress'),
        //     liftnum:parm.record.get('liftnum'),
        //     dispatchtype:parm.record.get('dispatchtype'),
        //     remark:parm.record.get('remark'),
        //     planstartdate:parm.record.get('planstartdate'),
        //     planenddate:parm.record.get('planenddate'),
        //     createid:global.getUserId(),
        //     createdeptid:parm.record.get('createdeptid'),
        //     elevator:parm.record.get('elevator'),
        //     checkuser:parm.record.get('checkuser'),
        // };

        if(typeof(parm.operationIndex)==='string') {
            operation = parm.operationIndex;
        } else {
            operation = parm.record.get('nextstate')[parm.operationIndex].name;
        }
        switch(operation) {
            case "接收":
                //接收成功，分派单状态置为已接受
                state='接收';
                return;

            case "退回":
                //输入原因，确认后状态置为已退回
                state='退回';
                remark='退回原因';
                return;

            case "删除":
                //已退回的分派单允许删除，删除后分派单消失
                Ext.getStore('eng_qualitycheck_firstcheck_job_new').remove(parm.record);
                return;


            default:
                Ext.toast('未知的操作:' + opertaion);
                return;
        }

        //首检派工处理
        loadMask.show();
        if(global.isWorklight()) {
            var url = '';
            var userid = global.getUserId();
            var adapterParm = {
                userid:userid,
                jnl:jnl,
                state:state,
                remark:remark
            };

            callPostAdapter(
                url, adapterParm,
                function(ret) {
                    loadMask.hide();
                    Ext.toast(operation + '操作已完成！');
                    // 刷新派工单列表
                    me.doEngFirstCheckNew_LoadJobList();
                    if(fn) fn(); // 回调（关闭故障详细资料页面）
                },
                function(info){
                    loadMask.hide();
                    if(!info) info = '(未知)';
                    Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                }
            );
        } else {
            onSuccess();
        }
    },

    doEngFirstCheckNewTask_Process: function(parm) {
        /*

           派工单处理入口
           参数
           {
               record:故障待办记录,
               operationIndex:操作索引号(数字)/操作名(字符串),
               fn:回调函数，通常用于关闭故障详细信息页面
           }
        */
        var me = this;
        var operation;
        var fn = parm.fn;
        var jnl = parm.record.get('jnl');
        var state;
        var remark;

        // var sj = {
        //     jnl: parm.record.get('jnl'),
        //     status: parm.record.get('status'),
        //     projectid: parm.record.get('projectid'),
        //     contractid: parm.record.get('contractid'),
        //     projectname:parm.record.get('projectname'),
        //     projectaddress:parm.record.get('projectaddress'),
        //     liftnum:parm.record.get('liftnum'),
        //     dispatchtype:parm.record.get('dispatchtype'),
        //     remark:parm.record.get('remark'),
        //     planstartdate:parm.record.get('planstartdate'),
        //     planenddate:parm.record.get('planenddate'),
        //     createid:global.getUserId(),
        //     createdeptid:parm.record.get('createdeptid'),
        //     elevator:parm.record.get('elevator'),
        //     checkuser:parm.record.get('checkuser'),
        // };

        if(typeof(parm.operationIndex)==='string') {
            operation = parm.operationIndex;
        } else {
            operation = parm.record.get('nextstate')[parm.operationIndex].name;
        }
        switch(operation) {

            case "审核":
                return;

            case "删除":
                Ext.getStore('eng_qualitycheck_firstcheck_task_new').remove(parm.record);
                return;

            default:
                Ext.toast('未知的操作:' + opertaion);
                return;
        }

        //首检派工处理
        loadMask.show();
        if(global.isWorklight()) {
            var url = '';
            var userid = global.getUserId();
            var adapterParm = {
                userid:userid,
                jnl:jnl,
                state:state,
                remark:remark
            };

            callPostAdapter(
                url, adapterParm,
                function(ret) {
                    loadMask.hide();
                    Ext.toast(operation + '操作已完成！');
                    // 刷新派工单列表
                    me.doEngFirstCheckNew_LoadJobList();
                    if(fn) fn(); // 回调（关闭故障详细资料页面）
                },
                function(info){
                    loadMask.hide();
                    if(!info) info = '(未知)';
                    Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                }
            );
        } else {
            onSuccess();
        }
    },

    doEngFirstCheckNew_LoadTaskList: function() {
        Ext.getCmp('EngFirstCheck_ListTask').getStore().loadDat(
                    function() {
                    },
                    function() {
                        Ext.toast('读取首检任务数据出现错误！');
                    }
                );
    }

});