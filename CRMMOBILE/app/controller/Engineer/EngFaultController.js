/*
 * File: app/controller/Engineer/EngFaultController.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('liftnet.controller.Engineer.EngFaultController', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "container#EngFault": {
                initialize: 'onEngFaultInitialize'
            },
            "datepickerfield#EngFault_date1": {
                change: 'onEngFault_date1Change'
            },
            "button#EngFaultRedeployed_BtnReturn": {
                tap: 'onEngFaultRedeployed_BtnReturnTap'
            },
            "datepickerfield#EngFault_date2": {
                change: 'onEngFault_date2Change'
            },
            "list#EngFault_ListHotline": {
                itemtap: 'onEngFault_ListHotlineItemTap'
            },
            "panel#EngFaultAccept": {
                initialize: 'onEngFaultAcceptInitialize'
            },
            "button#EngFaultAccept_Btn1": {
                tap: 'onEngFaultAccept_Btn1Tap'
            },
            "button#EngFaultAccept_Btn2": {
                tap: 'onEngFaultAccept_Btn2Tap'
            },
            "button#EngFaultAccept_Btn3": {
                tap: 'onEngFaultAccept_Btn3Tap'
            },
            "button#EngFaultAccept_BtnReturn": {
                tap: 'onEngFaultAccept_BtnReturnTap'
            },
            "button#EngFault_BtnAdd": {
                tap: 'onEngFault_BtnAddTap'
            },
            "panel#EngFaultAdd": {
                initialize: 'onEngFaultAddInitialize'
            },
            "textfield#EngFaultAdd_reportortel": {
                change: 'onEngFaultAdd_reportortelChange'
            },
            "textfield#EngFaultAdd_prodno": {
                tap: 'onEngFaultAdd_prodnoFocus'
            },
            "textfield#EngFaultAdd_facname": {
                tap: 'onEngFaultAdd_facnameFocus'
            },
            "textfield#EngFaultAdd_sxly": {
                tap: 'onEngFaultAdd_sxlyFocus'
            },
            "textfield#EngFaultAdd_calloutfaulttypeid": {
                tap: 'onEngFaultAdd_calloutfaulttypeidFocus'
            },
            "textfield#EngFaultAdd_assignuser": {
                tap: 'onEngFaultAdd_dutyusernameFocus'
            },
            "textfield#EngFaultAdd_operdate": {
                tap: 'onEngFaultAdd_operdateFocus'
            },
            "textfield#EngFaultAdd_expectarrivetime": {
                tap: 'onEngFaultAdd_expectarrivetimeFocus'
            },
            "button#EngFaultAdd_BtnSave": {
                tap: 'onEngFaultAdd_BtnSaveTap'
            },
            "button#EngFaultAdd_BtnAssign": {
                tap: 'onEngFaultAdd_BtnAssignTap'
            },
            "button#EngFaultAdd_BtnClose": {
                tap: 'onEngFaultAdd_BtnCloseTap'
            },
            "button#EngFaultAdd_BtnReturn": {
                tap: 'onEngFaultAdd_BtnReturnTap'
            },
            "searchfield#Enfault_Search": {
                change: 'onEnfaultSearchfieldChange'
            },
            "searchfield#EngReport_Search": {
                change: 'onEngReportSearchfieldChange'
            },
            "textfield#EngFaultAdd_projectname": {
                tap: 'OnEngFaultAdd_project'
            },
            "textfield#EngFaultAdd_faulthappentime": {
                tap: 'onEngFaultAdd_faulthappentimeFous'
            },
            "button#Redeployed_BtnOK": {
                tap: 'onRedeployed_BtnOKTap'
            },
            "panel#Redeployed": {
                initialize: 'onRedeployed_ListInitialize'
            },
            "container#Container_AcceptMap": {
                initialize: 'Container_AcceptMap'
            },
            "textfield#sxreport_prono": {
                tap: 'onSxreport_pronoTap'
            },
            "textfield#sxreport_traptime": {
                tap: 'onSxreport_traptimeTap'
            },
            "textfield#sxreport_repairman": {
                tap: 'onSxreport_repairmanTap'
            },
            "textfield#sxreport_reachtime": {
                tap: 'onSxreport_reachtimeTap'
            },
            "textfield#sxreport_finishtime": {
                tap: 'onSxreport_finishtimeTap'
            },
            "button#sxreport_saveBtn": {
                tap: 'onSxreport_saveBtnTap'
            },
            "textareafield#SXreport_analysis": {
                tap: 'onreport_analysisTap'
            },
            "button#SxReport_btnAdd": {
                tap: 'onSxReport_btnTap'
            },
            "button#Parts_ReBack": {
                tap: 'onParts_ReBackTap'
            },
            "button#parts_saveBtn": {
                tap: 'onParts_saveBtnTap'
            },
            "button#sxreport_submitBtn": {
                tap: 'onSxreport_submitBtnTap'
            },
            "panel#SXAcceptMap_location": {
                tap: 'onAcceptMap_locationTap'
            },
            "button#Adjust_ButReturn": {
                tap: 'onAdjust_ButReturnTap'
            },
            "container#AcceptMap_adjust": {
                initialize: 'onAcceptMap_adjustInitialize',
                destroy: 'onAcceptMap_adjustDestroy'
            },
            "textfield#sxreport_setouttime": {
                tap: 'onsxreport_setouttimeTap'
            },
            "button#Enfault_button": {
                tap: 'onEnfault_buttonTap'
            },
            "button#EngFaultStatus_0": {
                tap: 'onEngFaultStatus_0Tap'
            },
            "button#EngFaultStatus_1": {
                tap: 'onEngFaultStatus_1Tap'
            },
            "button#EngFaultStatus_2": {
                tap: 'onEngFaultStatus_2Tap'
            },
            "button#EngFaultStatus_3": {
                tap: 'onEngFaultStatus_3Tap'
            },
            "button#EngFaultStatus_4": {
                tap: 'onEngFaultStatus_4Tap'
            },
            "button#EngFaultStatus_5": {
                tap: 'onEngFaultStatus_5Tap'
            },
            "button#EngFaultStatus_6": {
                tap: 'onEngFaultStatus_6Tap'
            },
            "button#EngFaultReportStatus_0": {
                tap: 'onEngFaultReportStatus_0Tap'
            },
            "button#EngFaultReportStatus_1": {
                tap: 'onEngFaultReportStatus_1Tap'
            },
            "button#EngFaultReportStatus_2": {
                tap: 'onEngFaultReportStatus_2Tap'
            },
            "button#EngFaultReportStatus_3": {
                tap: 'onEngFaultReportStatus_3Tap'
            },
            "button#EngFaultReportStatus_4": {
                tap: 'onEngFaultReportStatus_4Tap'
            },
            "textareafield#sxreport_analysis": {
                tap: 'onSxreport_analysisTap'
            },
            "textareafield#sxreport_reason": {
                tap: 'onSxreport_reasonTap'
            },
            "image#EngFaultAccept_camera": {
                tap: 'onEngFaultAccept_cameraTap'
            },
            "image#EngFaultAccept_photo": {
                tap: 'onEngFaultAccept_photoTap'
            },
            "panel#EngFaultPhoto": {
                initialize: 'onEngFaultPhotoInitialize'
            },
            "button#FaultPhoto_BtnReturn": {
                tap: 'onFaultPhoto_BtnReturnTap'
            },
            "button#FaultPhoto_BtnDel": {
                tap: 'onFaultPhoto_BtnDelTap'
            },
            "image#EnFaultAccept_photoX": {
                tap: 'onEnFaultAccept_photoXTap'
            },
            "button#source_camear": {
                tap: 'onsource_camearTap'
            },
            "button#source_album": {
                tap: 'onsource_albumTap'
            },
            "list#SxReport_ListParts": {
                itemtap: 'onSxReport_ListPartsTap'
            },
            "panel#EngFault_Parts": {
                initialize: 'onEngFault_PartsInitialize'
            }
        }
    },

    /*

        ********** 故障业务 标签 **********

    */
    onEngFaultInitialize: function(component, eOpts) {
        var me = this;
        //this.doEngFault_LoadFaultList();
        faultCurPage = 0;//全局变量
        reportCurPage = 0;
        pagesize = 20;
        Ext.getCmp('EngFault_ListHotline').getStore().removeAll();
        Ext.getCmp('EngFault_ListReport').getStore().removeAll();
        // 初始化下拉刷新、滑动按钮插件
        var faultList = Ext.getCmp('EngFault_ListHotline');
        faultList.setPlugins(
            [
                {
                    autoSnapBack: false,
                    lastUpdatedText: '上次刷新:&nbsp;',
                    loadedText: '已刷新',
                    loadingText: '正在刷新故障任务...',
                    pullText: '下拉刷新...',
                    releaseText: '放开开始刷新...',
                    type: 'pullrefresh',
                    listeners : {
                        latestfetched : function() {
        //                     faultCurPage=1;
                            me.doEngFault_LoadFaultList(
                                1,
                                pagesize,
                                '',
                                'refresh'
                            );
                        }
                    }
                },
                // 以下滑动按钮插件应从EngHomeController的onEngHomeInitial()中复制！
                {
                    xclass: 'ux.SlideActions',
                    openPosition: 150,
                    buttons:
                    [
                        // 按钮1
                        {
                            xtype: 'button',
                            baseCls: 'x-button liftnet-list-button liftnet-bgColor-blue',
                            text: '1',
                            initial: function(button) {
                                liftnet.app.getController('Engineer.EngFaultController').
                                doEngFault_InitialNextStateButton(button, 0);
                            },
                            listeners: {
                                tap: function(button, e){
                                    e.stopPropagation();
                                    return false;
                                },
                                scope: this
                            },
                            handler: function(button, e) {
                                faultList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                liftnet.app.getController('Engineer.EngFaultController').
                                doEngFault_Process({
                                    record: button.getRecord(),
                                    operationIndex: 0
                                });
                            },
                            width:200
                        },
                        // 按钮2
                        {
                            xtype: 'button',
                            baseCls: 'x-button liftnet-list-button liftnet-bgColor-green',
                            text: '2',
                            initial: function(button) {
                                liftnet.app.getController('Engineer.EngFaultController').
                                doEngFault_InitialNextStateButton(button, 1);
                            },
                            listeners: {
                                tap: function(button, e){
                                    e.stopPropagation();
                                    return false;
                                },
                                scope: this
                            },
                            handler: function(button, e) {
                                faultList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                liftnet.app.getController('Engineer.EngFaultController').
                                doEngFault_Process({
                                    record: button.getRecord(),
                                    operationIndex: 1
                                });
                            }
                        },
                        // 按钮3
                        {
                            xtype: 'button',
                            baseCls: 'x-button liftnet-list-button liftnet-bgColor-dark',
                            text: '3',
                            initial: function(button) {
                                liftnet.app.getController('Engineer.EngFaultController').
                                doEngFault_InitialNextStateButton(button, 2);
                            },
                            listeners: {
                                tap: function(button, e){
                                    e.stopPropagation();
                                    return false;
                                },
                                scope: this
                            },
                            handler: function(button, e) {
                                faultList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                liftnet.app.getController('Engineer.EngFaultController').
                                doEngFault_Process({
                                    record: button.getRecord(),
                                    operationIndex: 2
                                });
                            }
                        }
                    ]
                }
            ]
        );

        var reportList = Ext.getCmp('EngFault_ListReport');
        reportList.setPlugins(
            [
                {
                    autoSnapBack: false,
                    lastUpdatedText: '上次刷新:&nbsp;',
                    loadedText: '已刷新',
                    loadingText: '正在刷新故障报告书...',
                    pullText: '下拉刷新...',
                    releaseText: '放开开始刷新...',
                    type: 'pullrefresh',
                    listeners : {
                        latestfetched : function() {
        //                     liftnet.app.getController('Engineer.EngFaultReportController').
                            reportCurPage = 1;
                            me.doEngFault_LoadReportList(
                                reportCurPage,
                                pagesize,
                                '',
                                'refresh'
                            );
                        }
                    }
                },
            ]
        );

        //监听滑动结束事件
        /*var faultScroller = faultList.getScrollable().getScroller();
        faultScroller.on('scrollend',function(scroll, x, y, eOpts){
            if(faultCurPage===0){
                return;
             }
            //滑动到底部加载更多
            if(y+faultScroller.getContainerSize().y==faultScroller.getSize().y){
                console.log('loadmore');
                loadMask.show();
                var scrollparm = {
                    scroller:faultScroller,
                    x:x,
                    y:y+95//Item的高度
                };
                var keyword = Ext.getCmp('Enfault_Search').getValue();
                if(!keyword){
                    keyword='';
                }
                me.doEngFault_LoadFaultList(
                    ++faultCurPage,
                    pagesize,
                    keyword,
                    'loadmore',
                    scrollparm
                );
            }
        });*/

        //更多按钮
        var faultScroller = faultList.getScrollable().getScroller();
        var x = faultScroller._containerSize.x;
        var y = faultList.getHeight();
        Ext.getCmp('EnFault_More').on('tap',function(){
            console.log('loadmore');
            loadMask.show();
            var scrollparm = {
                scroller:faultScroller,
                x:x,
                faultCurPage:faultCurPage
            };
            var keyword = Ext.getCmp('Enfault_Search').getValue();
            if(!keyword){
                keyword='';
            }
            me.doEngFault_LoadFaultList(
                ++faultCurPage,
                pagesize,
                keyword,
                'loadmore',
                scrollparm
            );
            loadMask.hide();
        });



        //监听滑动结束事件
        var reportScroller = reportList.getScrollable().getScroller();
        reportScroller.on('scrollend',function(scroll, x, y, eOpts){
            if(reportCurPage===0){
                return;
             }
            //滑动到底部加载更多
            if(y+reportScroller.getContainerSize().y==reportScroller.getSize().y){
                console.log('loadmore');
                loadMask.show();
                var scrollparm = {
                    scroller:reportScroller,
                    x:x,
                    y:y+80//Item的高度+Tpl样式中各种边距
                };
                var keyword = Ext.getCmp('EngReport_Search').getValue();
                if(!keyword){
                    keyword='';
                }
                me.doEngFault_LoadReportList(
                    ++reportCurPage,
                    pagesize,
                    keyword,
                    'loadmore',
                    scrollparm);
            }
        });

        /**var f1 = Ext.getCmp('EngFault_date1');
        var f2 = Ext.getCmp('EngFault_date2');
        f1.suspendEvents();
        f2.suspendEvents();
        f1.setValue(new Date());
        f2.setValue(new Date());
        f1.resumeEvents(true);
        f2.resumeEvents(true);*/

        f1 = Ext.getCmp('EngFaultReport_date1');
        f2 = Ext.getCmp('EngFaultReport_date2');
        f1.suspendEvents();
        f2.suspendEvents();
        f1.setValue(new Date());
        f2.setValue(new Date());
        f1.resumeEvents(true);
        f2.resumeEvents(true);

        //初始化刷新
        me.doEngFault_LoadFaultList(
                                1,
                                pagesize,
                                '',
                                'refresh'
                            );

        me.doEngFault_LoadReportList(
                    1,
                    pagesize,
                    '',
                    'refresh'
                    );
    },

    onEngFault_date1Change: function(datepickerfield, newDate, oldDate, eOpts) {
        this.doEngFault_LoadFaultList(1,20,'','refresh');
    },

    onEngFaultRedeployed_BtnReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onEngFault_date2Change: function(datepickerfield, newDate, oldDate, eOpts) {
        this.doEngFault_LoadFaultList(1,20,'','refresh');
    },

    /*

        ********** 故障处理 **********

    */
    onEngFault_ListHotlineItemTap: function(dataview, index, target, record, e, eOpts) {
        // 进入“编辑受信单”或“故障处理”明细页面
        var state = record.get('state');
        if(state==='待分配') {
            viewUtil.goNext('Engineer.EngFaultAdd', {record: record});
        } else {
            viewUtil.goNext('Engineer.EngFaultAccept', {record: record});
        }
    },

    onEngFaultAcceptInitialize: function(component, eOpts) {

                // 受信单操作 - 退单、出发、到场、解困、拍照、扫描、完工
                loadMask.show();

                console.log('----------');
                var me = this;
                var userid = global.getUserId();
                var now = Ext.Date.format(new Date(), 'Y-m-d H:i');
                var position = map.getLocation().addr;
                if(!position || position==='') position = '(未知位置)';

                var taskrecord = component.initialConfig.parm.record; // 待办记录

                console.log('task:');
                console.log(taskrecord);
                var trno = "";
                var nextstate = "";
                var state = "";
                if(taskrecord){
                	trno = taskrecord.get('trno'); // 单号
                	nextstate = taskrecord.get('nextstate');//操作按钮
                	state = taskrecord.get('state');
                }else{
                	trno = component.initialConfig.parm.trno;
                	nextstate = component.initialConfig.parm.nextstate;
                	state = component.initialConfig.parm.state;
                }

                var button1 = Ext.getCmp('EngFaultAccept_Btn1');
                var button2 = Ext.getCmp('EngFaultAccept_Btn2');
                var button3 = Ext.getCmp('EngFaultAccept_Btn3');
                var panel = Ext.getCmp('EngFaultAccept_PnlOperation');
                button1.setHidden(true);
                button2.setHidden(true);
                button3.setHidden(true);
                panel.setHidden(true);

                var pnlDepart = Ext.getCmp('EngFaultAccept_PnlDepart');//出发
                //var pnlArrive = Ext.getCmp('EngFaultAccept_PnlArrive');//到场
                //var pnlEscape = Ext.getCmp('EngFaultAccept_PnlEscape');//解困
                var pnlFinish = Ext.getCmp('EngFaultAccept_PnlFinish');//完工
                var btnDepart = Ext.getCmp('EngFaultAccept_BtnDepart');
                //var btnArrive = Ext.getCmp('EngFaultAccept_BtnArrive');
                //var btnEscape = Ext.getCmp('EngFaultAccept_BtnEscape');
                var btnFinish = Ext.getCmp('EngFaultAccept_BtnFinish');
                btnDepart.on('tap', function() {
                    me.doEngFault_Process({
                        record: taskrecord, operationIndex: '出发',
                        fn: function() { viewUtil.goLast(); }
                    });
                });
                /*btnArrive.on('tap', function() {
                    me.doEngFault_Process({
                        record: taskrecord, operationIndex: '到场',
                        fn: function() { viewUtil.goLast(); }
                    });
                });
                btnEscape.on('tap', function() {
                    me.doEngFault_Process({
                        record: taskrecord, operationIndex: '解困',
                        fn: function() { viewUtil.goLast(); }
                    });
                });*/
                btnFinish.on('tap', function() {
                    me.doEngFault_Process({
                        record: taskrecord, operationIndex: '完工',
                        fn: function() { viewUtil.goLast(); }
                    });
                });


                // 初始化下拉选择项目
                dataUtil.createStore('common_sxsourcelist').loadDat(Ext.emptyFn,Ext.emptyFn);
                dataUtil.createStore('common_getdeptlist').loadDat(Ext.emptyFn,Ext.emptyFn);


                //当状态为未接收时调用受信接收查看接口
                if(state==='未接收'){
                    console.log('调用受信接收查看接口');
                    var store3 = dataUtil.createStore('sx_sxReceivedetail');
                    store3.loadDat(
                        function() {
                            loadMask.hide();
                            var record = store3.getData().get(0);
                            console.log('----后台获取信息start----');
                            console.log(record);
                            console.log('----后台获取信息end----');

                            Ext.getCmp('form_sx_sxdetail').setRecord(record);

                            var AcceptMap_lng = record.get('flon');//完工经度
                            var AcceptMap_lat = record.get('flat');//完工纬度
                            var ftime = record.get('ftime');//完工时间
                            var taccepttime = record.get('taccepttime');//接收时间
                            var faddr = record.get('faddr');//完工地址

                            var  requesttype =  record.get('requesttype');//类型
                            var requesttypename = '';
                            if(requesttype=='1'){
                                requesttypename = '即时';
                            }else if(requesttype=='0'){
                                requesttypename = '补录';
                            }

                            Ext.getCmp('form_sx_sxdetail').setValues({
                                    requesttype:	requesttypename,
                                });

                            var assignuserJSON = record.get('assignuser');
                            if(assignuserJSON!==''){
                                console.log(assignuserJSON.length);
                                var assignuserStr = '';
                                var assignuser = '';
                                for(var i=0;i<assignuserJSON.length;i++){
                                    var Assignuser = assignuserJSON[i];
                                    if(i!==0){
                                        assignuserStr+=',';
                                        assignuser+=',';
                                    }
                                    assignuserStr+=assignuserJSON[i].username+'('+assignuserJSON[i].storagename+')';
                                    assignuser+=assignuserJSON[i].userid+'_'+assignuserJSON[i].storageid+'_'+assignuserJSON[i].linkphone+'_';
                                }
                                Ext.getCmp('form_sx_sxdetail').setValues({
                                    assignuserStr:	assignuserStr,
                                    assignuser:assignuser,
                                });
                            }


                            var istrap = record.get('istrap');
                            var isrunning = record.get('isrunning');
                            if(isrunning=='Y'){
                                Ext.getCmp('form_sx_sxdetail').setValues({
                                    isrunning:	1
                                });
                            }else{
                                Ext.getCmp('form_sx_sxdetail').setValues({
                                    isrunning:	0
                                });
                            }

                            pnlDepart.setHidden(true);
                            pnlFinish.setHidden(true);
                            btnDepart.setHidden(true);
                            btnFinish.setHidden(true);


                            // 没有进度则隐藏进度面板
                            if(pnlDepart.getHidden()&&pnlFinish.getHidden()) {
                                Ext.getCmp('EngFaultAccept_TabProcess').destroy();
                            }

                            Ext.getCmp('EngFaultAccept_TabReport').destroy();
                            Ext.getCmp('EngFaultAccept_TabParts').destroy();

                            button1.record = record;
                            button2.record = record;
                            button3.record = record;

                            if(record.get('nextstate').length>0){
                                if(record.get('nextstate')[0].name){
                                    button1.setHidden(false);
                                    button1.setText(record.get('nextstate')[0].name);
                                }
                                if(record.get('nextstate')[1].name){
                                    button2.setHidden(false);
                                    button2.setText(record.get('nextstate')[1].name);
                                }
                                if(record.get('nextstate')[2].name){
                                    button3.setHidden(false);
                                    button3.setText(record.get('nextstate')[2].name);
                                }

                            }
                            // 没有操作按钮时隐藏明细页面按钮底板
                            panel.setHidden(button1.getHidden()&&button2.getHidden()&&button3.getHidden());



                        },
                        function(){
                            loadMask.hide();
                            Ext.toast('读取受信资料失败！');
                            viewUtil.goLast();
                        },
                        trno
                        );

                }else{
                    console.log('调用受信明细接口');
                    // 取出故障明细数据
                    var store2 = dataUtil.createStore('sx_sxdetail');
                    store2.loadDat(
                        function() {
                            // 显示受信单数据
                            var record = store2.getData().get(0);
                            console.log('----后台获取信息start----');
                            console.log(record);
                            console.log('----后台获取信息end----');

                            // 测试数据(开始)
                            if(!global.isWorklight()) {
                                //record.set('istrap', taskrecord.get('istrap').indexOf('困')>0? '1':'0');
                                //record.set('isrunning', taskrecord.get('isrunning').indexOf('是')>0? '1':'0');
                                record.set('requesttype',record.get('requesttype')==1?'即时':'补录');

                                switch(taskrecord.get('state')) {
                                    case '已完工':
                                        record.set('ftime', '2015-12-01 14:35');
                                        break;

                                    /*case '维修中':
                                        record.set('atime', '2015-12-01 12:25');
                                        record.set('htime', '2015-12-01 12:30');
                                        break;

                                    case '救援中':
                                        record.set('atime', '2015-12-01 12:25');
                                        break;*/

                                    case '维修中':
                                        record.set('stime', '2015-12-01 12:00');
                                        break;
                                }
                            }


                            //测试数据(完)
                            console.log(Ext.getCmp('form_sx_sxdetail'));

                            Ext.getCmp('form_sx_sxdetail').setRecord(record);

                            var AcceptMap_lng = record.get('flon');//完工经度
                            var AcceptMap_lat = record.get('flat');//完工纬度
                            var ftime = record.get('ftime');//完工时间
                            var taccepttime = record.get('taccepttime');//接收时间
                            var faddr = record.get('faddr');//完工地址

                            var  requesttype =  record.get('requesttype');//类型
                            var requesttypename = '';
                            if(requesttype=='1'){
                                requesttypename = '即时';
                            }else if(requesttype=='0'){
                                requesttypename = '补录';
                            }

                            Ext.getCmp('form_sx_sxdetail').setValues({
                                    requesttype:	requesttypename,
                                });





                            var assignuserJSON = record.get('assignuser');

                            if(assignuserJSON!==''){
                                console.log(assignuserJSON.length);
                                var assignuserStr = '';
                                var assignuser = '';
                                for(var i=0;i<assignuserJSON.length;i++){
                                    var Assignuser = assignuserJSON[i];
                                    if(i!==0){
                                        assignuserStr+=',';
                                        assignuser+=',';
                                    }
                                    assignuserStr+=assignuserJSON[i].username+'('+assignuserJSON[i].storagename+')';
                                    assignuser+=assignuserJSON[i].userid+'_'+assignuserJSON[i].storageid+'_'+assignuserJSON[i].linkphone+'_';
                                }
                                Ext.getCmp('form_sx_sxdetail').setValues({
                                    assignuserStr:	assignuserStr,
                                    assignuser:assignuser,
                                });
                            }


                            var istrap = record.get('istrap');
                            var isrunning = record.get('isrunning');
                            if(isrunning=='Y'){
                                Ext.getCmp('form_sx_sxdetail').setValues({
                                    isrunning:	1
                                });
                            }else{
                                Ext.getCmp('form_sx_sxdetail').setValues({
                                    isrunning:	0
                                });
                            }

                            // 时间线节点数据
                            Ext.getCmp('G_SetOutUser').setHtml('<span></span>'+record.get('suser'));
                            Ext.getCmp('G_SetOutDate').setHtml('<span></span>'+record.get('stime'));
                            Ext.getCmp('G_SetOutAddress').setHtml('<span></span>'+record.get('sreamrk'));

                            /*Ext.getCmp('G_ArriveUser').setHtml('<span></span>'+record.get('auser'));
                            Ext.getCmp('G_ArriveDate').setHtml('<span></span>'+record.get('atime'));
                            Ext.getCmp('G_ArriveAddress').setHtml('<span></span>'+record.get('areamrk'));

                            Ext.getCmp('G_EscapeUser').setHtml('<span></span>'+record.get('huser'));
                            Ext.getCmp('G_EscapeDate').setHtml('<span></span>'+record.get('htime'));
                            Ext.getCmp('G_EscapeAddress').setHtml('<span></span>'+record.get('hreamrk'));*/

                            Ext.getCmp('G_FinishUser').setHtml('<span></span>'+record.get('fuser'));
                            Ext.getCmp('G_FinishDate').setHtml('<span></span>'+record.get('ftime'));
                            Ext.getCmp('G_FinishAddress').setHtml('<span></span>'+record.get('fremark'));


                            // 时间线 - 根据状态显示进度块及操作按钮

                            switch(taskrecord.get('state')) {
                                case '待分配':
                                case '关闭':
                                     //pnlDepart.setHidden(true);
                                    btnDepart.setHidden(true);
                                    //pnlFinish.setHidden(true);
                                    //btnFinish.setHidden(true);


                                    Ext.getCmp('G_FinishDate').setHtml('<span></span>'+ftime);
                                    Ext.getCmp('G_SetOutDate').setHtml('<span></span>'+taccepttime);

                                    btnFinish.setHidden(true);//隐藏完工按钮

                                    Ext.getCmp('EngFaultAccept_Photo').setHidden(true);//隐藏照相区域
                                    Ext.getCmp('EngFaultAccept_Map').setHidden(true);//隐藏地图区域



                                    break;
                                case '已退回':
                                    pnlDepart.setHidden(true);
                                    pnlFinish.setHidden(true);
                                    btnDepart.setHidden(true);
                                    btnFinish.setHidden(true);
                                    break;
                                case '未接收':
                                    pnlDepart.setHidden(true);
                                    pnlFinish.setHidden(true);
                                    btnDepart.setHidden(true);
                                    btnFinish.setHidden(true);
                                    break;

                                case '维修中':
                                    //pnlDepart.setHidden(true);
                                    btnDepart.setHidden(true);
                                    //pnlFinish.setHidden(true);
                                    //btnFinish.setHidden(true);


                                    Ext.getCmp('AcceptMap_lng').setValue(AcceptMap_lng);
                                    Ext.getCmp('AcceptMap_lat').setValue(AcceptMap_lat);
                                    Ext.getCmp('G_FinishDate').setHtml('<span></span>'+ftime);
                                    Ext.getCmp('G_SetOutDate').setHtml('<span></span>'+taccepttime);

                                    if(nextstate===null||nextstate.length<=0 || nextstate[0].name!=='完成'){
                                        btnFinish.setHidden(true);//隐藏完工按钮

                                        Ext.getCmp('EngFaultAccept_Photo').setHidden(true);//隐藏照相区域
                                        Ext.getCmp('EngFaultAccept_Map').setHidden(true);//隐藏地图区域

                                    }


                                    break;

                                case '未出发':
                                    pnlDepart.setHidden(!true);
                                    pnlFinish.setHidden(true);
                                    btnDepart.setHidden(!true);
                                    btnFinish.setHidden(true);
                                    Ext.getCmp('G_SetOutUser').setHtml('<span></span>'+userid);
                                    Ext.getCmp('G_SetOutDate').setHtml('<span></span>'+now);
                                    Ext.getCmp('G_SetOutAddress').setHtml('<span></span>'+position);
                                    break;

                                case '路途中':
                                    pnlDepart.setHidden(!true);
                                    pnlArrive.setHidden(!true);
                                    pnlEscape.setHidden(true);
                                    pnlFinish.setHidden(true);
                                    btnDepart.setHidden(true);
                                    btnArrive.setHidden(!true);
                                    btnEscape.setHidden(true);
                                    btnFinish.setHidden(true);
                                    Ext.getCmp('G_ArriveUser').setHtml('<span></span>'+userid);
                                    Ext.getCmp('G_ArriveDate').setHtml('<span></span>'+now);
                                    Ext.getCmp('G_ArriveAddress').setHtml('<span></span>'+position);
                                    break;

                                case '维修中2':
                                    pnlDepart.setHidden(!true);
                                    pnlArrive.setHidden(!true);
                                    pnlEscape.setHidden(istrap==='0');
                                    pnlFinish.setHidden(!true);
                                    btnDepart.setHidden(true);
                                    btnArrive.setHidden(true);
                                    btnEscape.setHidden(true);
                                    btnFinish.setHidden(!true);
                                    Ext.getCmp('G_FinishUser').setHtml('<span></span>'+userid);
                                    Ext.getCmp('G_FinishDate').setHtml('<span></span>'+now);
                                    Ext.getCmp('G_FinishAddress').setHtml('<span></span>'+position);
                                    break;

                                case '救援中':
                                    pnlDepart.setHidden(!true);
                                    pnlFinish.setHidden(true);
                                    btnDepart.setHidden(true);
                                    btnFinish.setHidden(true);
                                    break;

                                case '已完工':
                                    pnlDepart.setHidden(!true);
                                    pnlFinish.setHidden(!true);
                                    btnDepart.setHidden(true);
                                    btnFinish.setHidden(true);
                                    Ext.getCmp('G_FinishAddress').setHidden(false);
                                    Ext.getCmp('AcceptMap_lng').setValue(AcceptMap_lng);
                                    Ext.getCmp('AcceptMap_lat').setValue(AcceptMap_lat);
                                    Ext.getCmp('G_FinishDate').setHtml('<span></span>'+ftime);
                                    Ext.getCmp('G_FinishAddress').setHtml('<span></span>'+faddr);
                                    Ext.getCmp('G_SetOutDate').setHtml('<span></span>'+taccepttime);

                                    //隐藏地点微调
                                    Ext.getCmp('EngFaultAccept_Date').setHidden(true);
                                    Ext.getCmp('Container_AcceptMap').setHidden(true);

                                     //显示照片
                                    var pictures = record.get('pictures');//照片信息
                                    if(pictures!==null&&pictures.length>0){
                                        for(var z=0;z<pictures.length;z++){
                                            var index = z+1;
                                            var ImgID = 'EngFaultAccept_photo_'+index;
                                            var pictureBase64 = pictures[z].pic;
                                            var ImgSrc = 'data:image/jpeg;base64,' +pictureBase64;

                                            Ext.getCmp(ImgID).setSrc(ImgSrc);
                                            Ext.getCmp(ImgID).setItemId('EnFaultAccept_photoX');
                                        }

                                        //没图片信息就把图片隐藏
                                        for(var k=1;k<7;k++){
                                            var img = 'EngFaultAccept_photo_'+k;
                                            var imgsrc = Ext.getCmp(img).getSrc();
                                            if(imgsrc==='resources/images/camera.png'||imgsrc=='resources/images/notPhoto.png'){
                                                Ext.getCmp(img).setHidden(true);

                                            }
                                        }

                                        //不是获取到6张图片就显示一个照相机的图片按钮功能
                                        /*if(pictures.length!=6){
                                                    var Nextindex = z+1;
                                                    var NextImgID = 'EngFaultAccept_photo_'+Nextindex;
                                                    var NextImgSrc = 'resources/images/camera.png';

                                                    Ext.getCmp(NextImgID).setSrc(NextImgSrc);
                                                    Ext.getCmp(NextImgID).setItemId('EngFaultAccept_camera');
                                                }*/


                                    }else{
                                        //没图片信息就把图片隐藏
                                        for(var n=1;n<7;n++){
                                            var imgN = 'EngFaultAccept_photo_'+n;
                                            Ext.getCmp(imgN).setHidden(true);
                                        }
                                    }

                                    Ext.getCmp('AcceptMap_location').setItemId();//禁止地点微调

                                    break;

                                default:
                                    Ext.toast('未知的状态：' + taskrecord.get('state'));
                                    break;
                            }

                            // 根据待办指示决定明细页面操作按钮个数
                            button1.record = taskrecord;
                            button2.record = taskrecord;
                            button3.record = taskrecord;


                            console.log(taskrecord.get('state'));
                            if(taskrecord.get('state')!='维修中'){
                                liftnet.app.getController('Engineer.EngFaultController').
                                    doEngFault_InitialNextStateButton(button1, 0);
                                liftnet.app.getController('Engineer.EngFaultController').
                                    doEngFault_InitialNextStateButton(button2, 1);
                                liftnet.app.getController('Engineer.EngFaultController').
                                    doEngFault_InitialNextStateButton(button3, 2);
                            }

                            // 没有操作按钮时隐藏明细页面按钮底板
                            panel.setHidden(button1.getHidden()&&button2.getHidden()&&button3.getHidden());

                            // 没有进度则隐藏进度面板
                            if(pnlDepart.getHidden()&&pnlFinish.getHidden()) {
                                Ext.getCmp('EngFaultAccept_TabProcess').destroy();
                            }

                            if(taskrecord.get('state')!='维修中'){
                                Ext.getCmp('EngFaultAccept_TabReport').destroy();
                                Ext.getCmp('EngFaultAccept_TabParts').destroy();

                            }else{

                            }

                            /*if(taskrecord.get('state')=='已接收(进行中)'){

                                Ext.getCmp('sxreport_trno').setValue(record.get('trno'));
                                Ext.getCmp('sxreport_projectname').setValue(record.get('projectname'));
                                Ext.getCmp('sxreport_unitaddress').setValue(record.get('projectaddress'));
                                Ext.getCmp('sxreport_incomingman').setValue(record.get('reportor'));
                                Ext.getCmp('sxreport_incomingphone').setValue(record.get('reportortel'));
                                Ext.getCmp('sxreport_prono').setValue(record.get('prodno'));
                                Ext.getCmp('sxreport_istrap').setValue(record.get('istrap'));
                                Ext.getCmp('sxreport_repairman').setValue(record.get('assignuser'));


                            }*/

                            loadMask.hide();
                        },
                        function() {
                            loadMask.hide();
                            Ext.toast('读取受信资料失败！');
                            viewUtil.goLast();
                        },
                        trno
                    );
                }

                //取故障报告明细的数据
                if(state=='维修中'){

                    var BtnSave = true;
                    var BtnSub = true;
                    var store = dataUtil.createStore('sx_sxdetailtoreport');

                    store.loadDat(
                        function() {
                         var record = store.getData().get(0);
                         console.log('-----------报告明细start-------');
                         console.log(record);
                         console.log('-----------报告明细end-------');
                         Ext.getCmp('form_sx_sxreport').setRecord(record);

                         //原因分析
                            var analysisStr = '';
                            var report_analysisStr = '';
                            var analysis = store.getAt(0).get('analysis');
                            if(analysis.length>0){
                                for(var i=0;i<analysis.length;i++){
                                    if(i!==0){
                                        analysisStr+='、';
                                        report_analysisStr+='+';
                                    }
                                    analysisStr+=analysis[i].faultanalysis;
                                    report_analysisStr+=analysis[i].faulttype+'_';
                                    report_analysisStr+=analysis[i].faultcode+'_';
                                    report_analysisStr+=analysis[i].faultanalysis+'_';
                                    report_analysisStr+=analysis[i].ladder;
                                }
                            }
                            Ext.getCmp('form_sx_sxreport').setValues({
                                analysis	: analysisStr,
                                analysisStr : report_analysisStr
                            });

                            //Ext.getCmp('sxreport_analysis').setValue(analysisStr);
                            //Ext.getCmp('sxreport_analysisStr').setValue(report_analysisStr);

                            //故障原因
                            var reasonStr = '';
                            var report_reasonStr = '';
                            var reason = store.getAt(0).get('reason');
                            if(reason.length>0){
                                for(var j=0;j<reason.length;j++){
                                    if(j!==0){
                                        reasonStr+=',';
                                        report_reasonStr+='&';
                                    }
                                    reasonStr+=reason[j].reasonname;
                                    report_reasonStr+=reason[j].reasonname;
                                }
                            }

                            Ext.getCmp('form_sx_sxreport').setValues({
                                reason	: reasonStr,
                                reasonStr : report_reasonStr
                            });

                            //更换件
                            Ext.getCmp('SxReport_ListParts').getStore().add(record.get('partslist'));


                            //Ext.getCmp('sxreport_reason').setValue(reasonStr);
                            //Ext.getCmp('sxreport_reasonStr').setValue(report_reasonStr);

                            var nextstate = record.get('nextstate');
                            if(nextstate===null || nextstate.length<=0){
                                //把按钮区域隐藏
                                Ext.getCmp('SxReport_PnlOperation').setHidden(true);
                                //把更换件的按钮隐藏
                                Ext.getCmp('SxReportParts_PnlOperation').setHidden(true);

                                //表单只读
                                var form = Ext.getCmp('form_sx_sxreport');
                                var fields = form.getFields();
                                for(var key in fields) {
                                    field = fields[key];
                                    if(field.setReadOnly()){
                                        field.setReadOnly(true);
                                    }
                                    if(field.setItemId()){
                                        field.setItemId();
                                    }

                                }

                            }else{
                                for(var n=0;n<nextstate.length;n++){
                                    var name=nextstate[n].name;
                                    if(name=='保存'){
                                        BtnSave = false;
                                    }
                                    if(name=='提交'){
                                        BtnSub = false;
                                    }
                                }
                            }

                            Ext.getCmp('sxreport_saveBtn').setHidden(BtnSave);
                            Ext.getCmp('sxreport_submitBtn').setHidden(BtnSub);

                            if(BtnSave && BtnSub){//按钮全隐藏了把区域也隐藏
                                Ext.getCmp('SxReport_PnlOperation').setHidden(true);
                                Ext.getCmp('SxReportParts_PnlOperation').setHidden(true);
                                Ext.getCmp('SxReport_ListParts').suspendEvents();

                            }



                        },
                        function() {
                            loadMask.hide();
                            Ext.toast('读取报告资料失败！');
                            viewUtil.goLast();
                        },
                        trno
                    );
                    if(!(BtnSave && BtnSub)){
                    // 初始化更换件列表滑动操作
                            var partsList = Ext.getCmp('SxReport_ListParts');
                            partsList.setPlugins(
                                [
                                    {
                                        xclass: 'ux.SlideActions',
                                        openPosition: 75,
                                        buttons:
                                        [
                                            // 删除按钮
                                            {
                                                xtype: 'button',
                                                baseCls: 'x-button liftnet-list-button liftnet-bgColor-red',
                                                text: '<i class="fa fa-lg fa-trash-o"></i>',
                                                listeners: {
                                                    tap: function(button, e){
                                                        e.stopPropagation();
                                                        return false;
                                                    },
                                                    scope: this
                                                },
                                                handler: function(button, e) {
                                                    partsList.fireEvent('hide'); // 隐藏列表的滑动按钮组
                                                    partsList.getStore().remove(button.getRecord());
                                                }
                                            }
                                        ]
                                    }
                                ]
                            );
                    }


                }

    },

    onEngFaultAccept_Btn1Tap: function(button, e, eOpts) {
        // 故障处理明细页面 - 按钮1
        this.doEngFault_Process({
            record: button.record, operationIndex: button.getText(),
            fn: function() { viewUtil.goLast(); } // 操作后关闭窗口
        });
    },

    onEngFaultAccept_Btn2Tap: function(button, e, eOpts) {
        // 故障处理明细页面 - 按钮2
        this.doEngFault_Process({
            record: button.record, operationIndex: button.getText(),
            fn: function() { viewUtil.goLast(); } // 操作后关闭窗口
        });
    },

    onEngFaultAccept_Btn3Tap: function(button, e, eOpts) {
        // 故障处理明细页面 - 按钮2
        this.doEngFault_Process({
            record: button.record, operationIndex: button.getText(),
            fn: function() { viewUtil.goLast(); } // 操作后关闭窗口
        });
    },

    onEngFaultAccept_BtnReturnTap: function(button, e, eOpts) {
        // 受信明细 - 返回上页
        viewUtil.goLast();
    },

    /*

        ********** 新增/编辑（含派工、关闭）受信单 **********

    */
    onEngFault_BtnAddTap: function(button, e, eOpts) {
        // 右上角新增受信按钮
        viewUtil.goNext('Engineer.EngFaultAdd', {action:'新增', trno:''});
    },

    onEngFaultAddInitialize: function(component, eOpts) {
        // 受信单操作 - 新增、派工、关闭
        loadMask.show();

        // 初始化下拉选择项目
        dataUtil.createStore('common_sxsourcelist').loadDat(Ext.emptyFn,Ext.emptyFn);
        dataUtil.createStore('common_getdeptlist').loadDat(Ext.emptyFn,Ext.emptyFn);

        // 初始化数据
        var me = this;
        var form = Ext.getCmp('EngFaultAdd_Form');
        var store;
        var store2;
        var button1 = Ext.getCmp('EngFaultAdd_BtnSave');
        var button2 = Ext.getCmp('EngFaultAdd_BtnAssign');
        var button3 = Ext.getCmp('EngFaultAdd_BtnClose');

        if(!component.initialConfig.parm.record) {
            //先从后台获取到受信单号ID
            var trno = '';
            store = dataUtil.createStore('sx_gettrno');
            store.loadDat(
                function(tno){
                    trno = tno;

                    // 新单
                    store2 = dataUtil.createStore('sx_sxscens');
                    var date_s = Ext.Date.format(new Date(), 'Y-m-d H:i');
                    store2.add({
                        taskid:				'',		//'任务ID',
                        reportor:			'',		//'受信-来电人姓名',
                        reportortel:		'',		//'受信-来电人电话',
                        reportordate:		date_s,	//'受信-来电时间',
                        unitname:			'',		//'受信-报修单位名称',
                        istrap:				'0',	//'受信-是否困人',
                        serviceno:			'',		//'受信-电梯服务号',
                        elevatorno:			'',		//'受信-电梯工号',
                        addr:				'',		//'受信-地址',
                        floor:				1,		//'层',
                        station:			1,		//'站',
                        storageid:			'',		//'受信-司/站别',
                        elevatorid:			'',		//'受信-电梯梯号',
                        calloutfaulttypeid:	'',		//'受信-故障分类',
                        calloutcontent:	 	'',		//'受信-报修内容',
                        expectarrivetime:	date_s,	//'受信-客户要求到场时间',
                        remark:				'',		//'受信-备注',
                        operdate:			date_s,	//'受信-受理时间',
                        trno:				trno,		//'受信-编号（新建为空）',
                        specno:				'',		//'型号',
                        isapprove:			'N',	//'是否指派N/Y',
                        dutyusername:		'',		//'指派人名',
                        dutyuserid:			'',		//'指派人id',
                        linkphone:			'',		//'指派人电话',
                        sxly:				'',		//'受信来源',
                        t_flag:				'',		//'Y接收/N退回标记',
                        t_acceptby:			'',		//'接收/退回人',
                        t_remark:			'',		//'接收备注/退回备注/关闭原因',
                        time:				'',		//'时间',
                        user:				'',		//'作业员',
                        reamrk:				'',		//'备注',
                        lon:				'',		//'经度',
                        lat:				'',		//'纬度',
                        faulthappentime:	date_s,	//'故障发生时间',
                        //facname:			'',
                    });
                    form.setRecord(store2.getAt(0));
                },
                function(){

                },{userid:global.getUserId()}
            );

            // 新单操作：确认
            button1.setText('确认');
            button1.setHidden(false);
            button2.setHidden(true);
            button3.setHidden(true);
            loadMask.hide();
        } else {
            // 旧单
            var trno = component.initialConfig.parm.record.get('trno');
            var state = component.initialConfig.parm.record.get('state');
            var title = Ext.getCmp('EngFaultAdd_LblTitle');
            Ext.getCmp('EngFaultAdd_Tbar').setTitle(trno);
            title.setHtml('请稍候...');

            store2 = dataUtil.createStore('sx_sxdetail');
            store2.loadDat(
                function() {
                    title.setHtml('热线受信单');
                    form.setRecord(store2.getAt(0));
                    form.setValues({
                        reamrk: store2.getAt(0).get('remark'), // 看懂这句的请微笑；看不懂的请去问后台数据库和接口的程序猿 ^_^ALEX
                        taskid: component.initialConfig.parm.record.get('taskid')
                    });

                    var assignuserJSON = store2.getAt(0).get('assignuser');

                    if(assignuserJSON!==''){
                        console.log(assignuserJSON.length);
                        var assignuserStr = '';
                        var assignuser = '';
                        for(var i=0;i<assignuserJSON.length;i++){
                            var Assignuser = assignuserJSON[i];
                            if(i!==0){
                                assignuserStr+=',';
                                assignuser+=',';
                            }
                            assignuserStr+=assignuserJSON[i].username+'('+assignuserJSON[i].storagename+')';
                            assignuser+=assignuserJSON[i].userid+'_'+assignuserJSON[i].storageid+'_'+assignuserJSON[i].linkphone+'_';
                        }
                       form.setValues({
                            assignuserStr:	assignuserStr,
                            assignuser:assignuser,
                        });
                    }



                    // 根据待办指示决定明细页面操作按钮个数
                    //button1.setText('修改'); // 提供暂存功能
                    button1.setHidden(true);
                    button2.record = component.initialConfig.parm.record;
                    button3.record = component.initialConfig.parm.record;
                    me.doEngFault_InitialNextStateButton(button2, 0);
                    me.doEngFault_InitialNextStateButton(button3, 1);
                    /* 使用上面标准做法，废弃用状态决定操作的方式：
                    Ext.getCmp('EngFaultAdd_BtnSave').setText('修改');
                    if(state==='已退回') {
                        Ext.getCmp('EngFaultAdd_BtnClose').setText('关闭');
                    }
                    */
                    loadMask.hide();
                },
                function() {
                    loadMask.hide();
                    Ext.toast('未能找到受信单资料，请稍候再试！');
                    viewUtil.goLast();
                },
                trno
            );
        }

        // 特殊操作直接滚动到页末
        var action = component.initialConfig.parm.action;
        if(action==='派工' || action==='关闭') {
            var task = Ext.create('Ext.util.DelayedTask', function() {
                Ext.getCmp('EngFaultAdd_Form').getScrollable().getScroller().scrollToEnd(true);
                task.cancel();
            });
            task.delay(300);
        }
    },

    onEngFaultAdd_reportortelChange: function(textfield, newValue, oldValue, eOpts) {
        // 新增受信 - 电话号码
        if(!newValue) return;

        if(!global.isTelNo(newValue)) {
            textfield.suspendEvents();
            Ext.toast('电话号码格式不正确！');
            textfield.resumeEvents(false);
        }
    },

    onEngFaultAdd_prodnoFocus: function(textfield) {
        // 新增受信 - 设备注册码（服务号）
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{prodno}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'common_getserviceno',
            storeparm: {
                userid: global.getUserId(),
                curpagenum: 1,
                pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: true,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.serviceno = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        prodno: record
                    });
                } else {
                    console.log(record.get('stage'));
                    console.log(record.get('floor'));
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        prodno: record.get('prodno'),
                        floor: record.get('floor'),
                        station: record.get('stage'),
                        door:record.get('door'),
                        elevatorno: record.get('elevatorno'),
                        facid: record.get('facid'),
                        facname:record.get('facname'),
                        modelid:record.get('modelid'),
                        modelname:record.get('modelname'),
                        locationremark:record.get('liftloaction'),
                        contractid: record.get('contractid'),
                    });
                }
            }
        });
        textfield.blur();
    },

    onEngFaultAdd_facnameFocus: function(textfield) {
        // 新增受信 - 品牌
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{facname}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'common_getfacname',
            storeparm: {
                userid: global.getUserId(),
                facname: textfield.getValue(),
                pageno: 0,
                pagelen: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: true,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.facname = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        facname: record
                    });
                } else {
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        facname: record.get('facname')
                    });
                }
            }
        });
        textfield.blur();
    },

    onEngFaultAdd_sxlyFocus: function(textfield) {
        // 新增受信 - 受信来源
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{trresourcename}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'common_sxsourcelist',
            storeparm: {
                userid: global.getUserId()
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: Ext.emptyFn,
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        sxly: record
                    });
                } else {
                    var key = record.get('trresourceid');
                    var value = record.get('trresourcename');
                    textfield.setOptions({text:value, value:key});
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        sxly: key
                    });
                }
            }
        });
        textfield.blur();
    },

    onEngFaultAdd_calloutfaulttypeidFocus: function(textfield) {
        // 新增受信 - 故障分类
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{FaultTypeName}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'common_faultsituation',
            storeparm: {
                userid: global.getUserId(),
                TypeRef: '%'
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: Ext.emptyFn,
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        calloutfaulttypeid: record
                    });
                } else {
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        calloutfaulttypeid: record.get('FaultTypeId')
                    });
                }
            }
        });
        textfield.blur();
    },

    onEngFaultAdd_dutyusernameFocus: function(textfield) {
        // 新增受信 - 派工人员
        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{username}({linkphone})</div>' +
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{storagename}</div>' ;
        //var storageid = Ext.getCmp('EngFaultAdd_storageid').getValue();

         viewUtil.goNext('Common.ComMultiSelect', {
             textfield: textfield,
             storeid: 'common_sxpglist',
             storeparm: {
                 userid: global.getUserId(),
             },
             itemtpl: tpl,
             paging: false,
             allowedit: false,
             allowsearch: false,
             fnSetFilter: Ext.emptyFn,
             fnSelected: function(record) {

                 console.log(record);
                 if(typeof(record)==='string') {
                     textfield.setValue(record);
                 } else {
                     var assignuserStr = '';
                     var assignuser = '';
                     for(var i = 0; i < record.length; i++){
                         if(i!==0){
                             assignuserStr+=',';
                             assignuser+=',';
                         }
                         assignuserStr+=record[i].get('username')+'('+record[i].get('storagename')+')';
                         assignuser+=record[i].get('userid')+'_'+record[i].get('storageid')+'_'+record[i].get('linkphone')+'_';
                         if(i!==0){
                             assignuser+='1';
                         }else{
                             assignuser+='0';
                         }
                     }
                     console.log(assignuser);
                     Ext.getCmp('assignuser').setValue(assignuser);
                     textfield.setValue(assignuserStr);


                 }
             }
         });
        textfield.blur();


    },

    onEngFaultAdd_operdateFocus: function(textfield) {
        // 新增受信 - 受理时间
        this.doEngFault_ShowDatePicker(textfield);
    },

    onEngFaultAdd_expectarrivetimeFocus: function(textfield) {
        var fn = function() {
            // 获得日期后的额外处理
            //alert('1');
        };
        this.doEngFault_ShowDatePicker(textfield, fn);
    },

    onEngFaultAdd_BtnSaveTap: function(button, e, eOpts) {
        // 受信单 - 保存操作
        this.doEngFaultAdd_Process(button.getText());
    },

    onEngFaultAdd_BtnAssignTap: function(button, e, eOpts) {
        // 受信单 - 派工操作
        this.doEngFaultAdd_Process(button.getText());
    },

    onEngFaultAdd_BtnCloseTap: function(button, e, eOpts) {
        // 受信单 - 关闭操作
        this.doEngFaultAdd_Process(button.getText());

    },

    onEngFaultAdd_BtnReturnTap: function(button, e, eOpts) {
        // 受信单页面 - 返回上页
        viewUtil.goLast();
    },

    onEnfaultSearchfieldChange: function(textfield, newValue, oldValue, eOpts) {
        var Enfault_Search = textfield.getValue();
        if(!Enfault_Search||Enfault_Search===''){
            Enfault_Search = '';
        //     return;
        }
        //联网搜索
        // faultCurPage = 1;
        this.doEngFault_LoadFaultList(1,pagesize,Enfault_Search,'refresh');
        // Ext.getCmp('EngFault_ListHotline').getStore().filteDat(Enfault_Search);
    },

    onEngReportSearchfieldChange: function(textfield, newValue, oldValue, eOpts) {
        var keyword = textfield.getValue();
        if(!keyword||keyword===''){
            keyword='';
        //     return;
        }
        //联网搜索故障报告
        // reportCurPage = 1;
        this.doEngFault_LoadReportList(reportCurPage,20,keyword,'search');
    },

    OnEngFaultAdd_project: function(textfield) {
        // 新增受信 - 项目名称
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{projectname}</div>' +
        '<div class="liftnet-font-size12 liftnet-fontColor-gray">{projectaddress}</div>' ;

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'common_projectlist',
            storeparm: {
                userid: global.getUserId(),
                curpagenum: 1,
                pagesize: 20,
                searchkey:textfield.getValue(),
                type:'N'
            },
            itemtpl: tpl,
            paging: true,
            allowedit: true,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.projectname = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        projectname: record
                    });
                } else {
                    Ext.getCmp('EngFaultAdd_Form').setValues({
                        projectname: record.get('projectname'),
                        projectaddress: record.get('projectaddress')
                    });
                }
            }
        });
        textfield.blur();
    },

    onEngFaultAdd_faulthappentimeFous: function(textfield) {
        // 新增受信 - 故障发生时间
        this.doEngFault_ShowDatePicker(textfield);
    },

    onRedeployed_BtnOKTap: function(button, e, eOpts) {
            var me = this;
            var operation = '转派';

            var MaintList2=Ext.getCmp('EngFaultRedeployed_List').getSelection( );
            if(MaintList2.length<=0){
                Ext.Msg.alert('注意','请选择维修人员');
                return;
            }

            var trno = Ext.getCmp('Redeployed_trno').getValue();
            var Redeployed_flg = Ext.getCmp('Redeployed_flg').getValue();
            var userid = global.getUserId();//用户ID
            var lon = '';//经度(接收,完工状态需填)
            var lat = '';//纬度(接收,完工状态需填)
            var addr= '';//地址(接收,完工状态需要填)
            var flag = 'G';
            var remark='手机端转派';
            var redeployed=[
                {
                 redeployuser:MaintList2[0].get('userid'),
                 redeploydeptid:MaintList2[0].get('storageid'),
                 linkphone:MaintList2[0].get('linkphone'),
                 usertype:MaintList2[0].get('dutytype')
                }
            ];

             var adapter_parm = {
                 userid:userid,
                 trno:trno,
                 flag:flag,
                 lon:lon,
                 lat:lat,
                 addr:addr,
                 redeployed:redeployed,
                 remark:remark
                };

            console.log('-------受信处理传给后台的参数 start--------');
            console.log(adapter_parm);
            console.log('-------受信处理传给后台的参数 end--------');
                var store = dataUtil.createStore('sx_sxcl');
                loadMask.show();
                store.updateDat(
                    function() {
                        loadMask.hide();
                        Ext.toast(operation + '操作已完成！');

                        // 刷新故障待办列表
                        liftnet.app.getController('Engineer.EngHomeController').doEngHome_LoadTodoAll();
                        me.doEngFault_LoadFaultList(1,20,'','refresh');
                        console.log(Redeployed_flg+'....');
                        if(Redeployed_flg==='1'){
                            viewUtil.goLast();
                        }
                        if(Redeployed_flg==='0'){
                            viewUtil.goLast();viewUtil.goLast();
                        }

                    },
                    function(info) {
                        loadMask.hide();
                        if(!info) info = '(未知)';
                        Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                    },
                    adapter_parm
                );


    },

    onRedeployed_ListInitialize: function(component, eOpts) {
               var me = this;
                //加载数据
                me.doEngFault_LoadRedeployList();

                //获取授信编号
                var taskrecord = component.initialConfig.parm.record;
                var trno = taskrecord.get('trno'); // 单号
                console.log('---------------------------');
                console.log(component.initialConfig.parm);
                console.log(component.initialConfig.parm.Redeployed_flg);
                console.log('---------------------------');

                Ext.getCmp('Redeployed_flg').setValue(component.initialConfig.parm.Redeployed_flg);

               // Ext.Msg.alert('单号:'+trno);
                Ext.getCmp('Redeployed_trno').setValue(trno);




    },

    Container_AcceptMap: function(component, eOpts) {
        var me = this;
        console.log('______________________________');
        console.log(component.initialConfig.parm);
        console.log(component.initialConfig.parm);
        var p = map.getLocation();//取位置信息
        if(!p.lat || !p.lng){
        p.lat = 23.123819;//纬度
        p.lng = 113.237778;//经度
        }

        //获取当前日期,当前时间
        var date = Ext.Date.format(new Date(), 'Y-m-d');
        var time = Ext.Date.format(new Date(), 'H:i');
        console.log(date);
        console.log(time);
        Ext.getCmp('label_date').setHtml(date);
        Ext.getCmp('label_time').setHtml(time);

        // 实时监控-地图
        me.doEngFault_AcceptMap('AcceptMap',p);



        //bmap.addEventListener("click", theLocation);
        console.log('______________________________');
    },

    onSxreport_pronoTap: function(textfield) {
        // 新增受信 - 设备注册码（服务号）
        var tpl =
        '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{prodno}</div>';

        viewUtil.goNext('Common.ComSelect', {
            textfield: textfield,
            storeid: 'common_getserviceno',
            storeparm: {
                userid: global.getUserId(),
                serviceno: textfield.getValue(),
                curpagenum: 1,
                pagesize: 20
            },
            itemtpl: tpl,
            paging: true,
            allowedit: true,
            allowsearch: true,
            fnSetFilter: function(parm, text) {
                parm.serviceno = text;
                return parm;
            },
            fnSelected: function(record) {
                if(typeof(record)==='string') {
                    Ext.getCmp('sxreport_prono').setValue(record);
                } else {
                    Ext.getCmp('sxreport_prono').setValue(record.get('prodno'));

                }
            }
        });
        textfield.blur();
    },

    onSxreport_traptimeTap: function(textfield) {
         this.doEngFault_ShowDatePicker(textfield);
    },

    onSxreport_repairmanTap: function(textfield) {
        // 新增受信 - 派工人员
                var tpl =
                    '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{repairman}</div>' +
                    '<div class="liftnet-font-size12 liftnet-fontColor-gray">{department}</div>' ;

                viewUtil.goNext('Common.ComMultiSelect', {
                    textfield: textfield,
                    storeid: 'Common_repairmanlist',
                    storeparm: {
                        userid: global.getUserId(),
                        //storageid: storageid
                    },
                    itemtpl: tpl,
                    paging: false,
                    allowedit: false,
                    allowsearch: false,
                    fnSetFilter: Ext.emptyFn,
                    fnSelected: function(record) {
                        if(typeof(record)==='string') {
                            Ext.getCmp('form_sx_reportdetail').setValues({
                                repairman: record
                            });
                        } else {
                            var repairman = '';
                            var department = '';
                            for(var i = 0; i < record.length; i++){
                                if(i!==0){
                                  repairman +=',';
                                  department+=',';
                                }
                                repairman += record[i].get('repairman');
                                department += record[i].get('department');

                            }
                           textfield.setValue(repairman);
                        }
                    }
                });
                textfield.blur();
    },

    onSxreport_reachtimeTap: function(textfield) {
        this.doEngFault_ShowDatePicker(textfield);
    },

    onSxreport_finishtimeTap: function(textfield) {
        this.doEngFault_ShowDatePicker(textfield);
    },

    onSxreport_saveBtnTap: function(button, e, eOpts) {
        this.doSxReportAdd_Process(button.getText());
    },

    onreport_analysisTap: function(textareafield) {
        // 新增报告 - 故障分析
        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{faulttype}({faultcode})</div>'+
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{faultanalysis}</div>' ;

        viewUtil.goNext('Common.ComMultiSelect', {
            textfield: textareafield,
            storeid: 'common_gzfxlist',
            storeparm: {
                userid: global.getUserId(),
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: Ext.emptyFn,
            fnSelected: function(record) {

                console.log(record);
                if(typeof(record)==='string') {
                    textareafield.setValue(record);
                } else {
                    var faultanalysisStr = '';
                    var report_analysisStr = '';
                    for(var i = 0; i < record.length; i++){
                         if(i!==0){
                             faultanalysisStr+='、';
                             report_analysisStr+='+';
                         }
                         faultanalysisStr+=record[i].data.faultanalysis;
                        report_analysisStr+=record[i].data.faulttype+'_';
                        report_analysisStr+=record[i].data.faultcode+'_';
                        report_analysisStr+=record[i].data.faultanalysis+'_';
                        report_analysisStr+=record[i].data.ladder;

                    }
                   console.log(report_analysisStr);
                   textareafield.setValue(faultanalysisStr);
                   Ext.getCmp('report_analysisStr').setValue(report_analysisStr);

                }
            }
        });
        textareafield.blur();
    },

    onSxReport_btnTap: function(button, e, eOpts) {
        viewUtil.goNext('Engineer.EngFault_Parts',{});
    },

    onParts_ReBackTap: function(button, e, eOpts) {
        console.log('__________________ssssssss_________________');
        viewUtil.goLast();

    },

    onParts_saveBtnTap: function(button, e, eOpts) {
        // “添加更换件”页面 - 保存
        var data = Ext.getCmp('form_sxreport_parts').getValues();
        if(!data.materialsname || !data.materialsnum ||
           data.materialsname==='' || data.materialsnum<=0) {
            Ext.toast('请输入名称和数量！');
            return;
        }

        var index = Ext.getCmp('sxreportpart_index').getValue();
        if(index!==''){
            Ext.getCmp('SxReport_ListParts').getStore().getAt(index).set(data);
        }else{
            Ext.getCmp('SxReport_ListParts').getStore().add(data);
        }
        viewUtil.goLast();
    },

    onSxreport_submitBtnTap: function(button, e, eOpts) {
        this.doSxReportAdd_Process(button.getText());
    },

    onAcceptMap_locationTap: function(panel) {
        console.log('.................');
        var me = this;
        //获取当前经度和纬度
        var lng = Ext.getCmp('AcceptMap_lng').getValue();
        var lat = Ext.getCmp('AcceptMap_lat').getValue();
        console.log(lng+'____'+lat);
        console.log('.................');
        viewUtil.goNext('Engineer.AcceptMap_adjust',{lng:lng,lat:lat,fc:function(element, eOpts){

            var lng = Ext.getCmp('Adujust_lng').getValue();
            var lat = Ext.getCmp('Adujust_lat').getValue();
            var getlnglat = function(e){
                var map = new BMap.Map("EngProject_map1");
                var pointA = new BMap.Point(e.point.lng,e.point.lat);
                var pointB = new BMap.Point(lng,lat);
                //if((map.getDistance(pointA,pointB)).toFixed(2)>2000){
                //    Ext.toast('请选择离当前位置两公里范围的地点,'+(map.getDistance(pointA,pointB)).toFixed(2));
                //}else{
                //}

                console.log(e.point.lng+'____+__'+e.point.lat);

                var parm = {
                    lng:e.point.lng,
                    lat:e.point.lat
                };
                Ext.getCmp('Adujust_lng').setValue(e.point.lng);
                Ext.getCmp('Adujust_lat').setValue(e.point.lat);
                me.doEngFault_AcceptMap('AcceptMap',parm);
                viewUtil.goLast();
            };

            map.create2('EngProject_map1',{lng:lng,lat:lat,zoom:16,fc:getlnglat});

        }});



    },

    onAdjust_ButReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onAcceptMap_adjustInitialize: function(component, eOpts) {
        var lng = component.initialConfig.parm.lng;//当前经度
        var lat = component.initialConfig.parm.lat;//当前纬度

        Ext.getCmp('Adujust_lng').setValue(lng);
        Ext.getCmp('Adujust_lat').setValue(lat);

        //map.create('Adujust_Body',{lng:lng,lat:lat,zoom:14});

        Ext.getCmp('Adujust_Body').on('painted',component.initialConfig.parm.fc);

    },

    onAcceptMap_adjustDestroy: function(eOpts) {
        map.destroyById('EngProject_map1');
    },

    onsxreport_setouttimeTap: function(textfield) {
        this.doEngFault_ShowDatePicker(textfield);
    },

    onEnfault_buttonTap: function(button, e, eOpts) {
         //故障授信-状态筛选按钮
                popMenu.show('Engineer.EngFaultStatus', button);
    },

    onEngFaultStatus_0Tap: function(button, e, eOpts) {
        // 全部
        this.doEngFaultFilter(button.getText());
    },

    onEngFaultStatus_1Tap: function(button, e, eOpts) {
        // 新建
        this.doEngFaultFilter(button.getText());
    },

    onEngFaultStatus_2Tap: function(button, e, eOpts) {
         // 未接收
        this.doEngFaultFilter(button.getText());
    },

    onEngFaultStatus_3Tap: function(button, e, eOpts) {
         // 维修中
        this.doEngFaultFilter(button.getText());
    },

    onEngFaultStatus_4Tap: function(button, e, eOpts) {
         // 已退回
        this.doEngFaultFilter(button.getText());
    },

    onEngFaultStatus_5Tap: function(button, e, eOpts) {
         // 完工
        this.doEngFaultFilter(button.getText());
    },

    onEngFaultStatus_6Tap: function(button, e, eOpts) {
         // 关闭
        this.doEngFaultFilter(button.getText());
    },

    onEngFaultReportStatus_0Tap: function(button, e, eOpts) {
        //全部
        this.doEngFaultReportFilter(button.getText());
    },

    onEngFaultReportStatus_1Tap: function(button, e, eOpts) {
        //待审
        this.doEngFaultReportFilter(button.getText());
    },

    onEngFaultReportStatus_2Tap: function(button, e, eOpts) {
        //通过
        this.doEngFaultReportFilter(button.getText());
    },

    onEngFaultReportStatus_3Tap: function(button, e, eOpts) {
        //不通过
        this.doEngFaultReportFilter(button.getText());
    },

    onEngFaultReportStatus_4Tap: function(button, e, eOpts) {
        //新建
        this.doEngFaultReportFilter(button.getText());
    },

    onSxreport_analysisTap: function(textareafield) {
        // 新增报告 - 故障分析
        var tpl =
            '<div class="liftnet-font-size14 liftnet-fontColor-darkGray">{faulttype}({faultcode})</div>'+
            '<div class="liftnet-font-size12 liftnet-fontColor-gray">{faultanalysis}</div>' ;

        viewUtil.goNext('Common.ComMultiSelect', {
            textfield: textareafield,
            storeid: 'common_gzfxlist',
            storeparm: {
                userid: global.getUserId(),
            },
            itemtpl: tpl,
            paging: false,
            allowedit: false,
            allowsearch: false,
            fnSetFilter: Ext.emptyFn,
            fnSelected: function(record) {

                console.log(record);
                if(typeof(record)==='string') {
                    textareafield.setValue(record);
                } else {
                    var faultanalysisStr = '';
                    var report_analysisStr = '';
                    for(var i = 0; i < record.length; i++){
                         if(i!==0){
                             faultanalysisStr+='、';
                             report_analysisStr+='+';
                         }
                         faultanalysisStr+=record[i].data.faultanalysis;
                        report_analysisStr+=record[i].data.faulttype+'_';
                        report_analysisStr+=record[i].data.faultcode+'_';
                        report_analysisStr+=record[i].data.faultanalysis+'_';
                        report_analysisStr+=record[i].data.ladder;

                    }
                   console.log(report_analysisStr);
                   textareafield.setValue(faultanalysisStr);
                   Ext.getCmp('sxreport_analysisStr').setValue(report_analysisStr);

                }
            }
        });
        textareafield.blur();
    },

    onSxreport_reasonTap: function(textareafield) {
        //先把当前故障原因加入Store
        var reasonStr = Ext.getCmp('sxreport_reasonStr').getValue();

        if(reasonStr===''){

        }else{
            var reasonJSON = [];
            var reason = reasonStr.split('&');
            console.log(reason.length);
            if(reason.length>0){
                for(var i=0;i<reason.length;i++){
                    reasonJSON[i]={
                        reasonname : reason[i]
                    };
                }
            }

            dataUtil.createStore('sx_report_reason').add(reasonJSON);
        }

        //故障原因----跳转至另一页面
        viewUtil.goNext('Engineer.EngFaultReportReason',{textareafield:textareafield});
    },

    onEngFaultAccept_cameraTap: function(image, e, eOpts) {
        var me = this;

        Ext.getCmp('camera_show').show();

        /*console.log('-------进入拍照功能');

        var source='CAMEAR';

        var parm = {
            callback :function(filename){
                    for(var i=1;i<7;i++){
                        var ImgID = 'EngFaultAccept_photo_'+i;
                        var Img = Ext.getCmp(ImgID);
                        var ImgSrc = Ext.getCmp(ImgID).getSrc();

                        if(filename!==''){
                        if(ImgSrc==='resources/images/camera.png'||ImgSrc==='resources/images/notPhoto.png'){
                            Img.setSrc(filename);
                            Img.setItemId('EnFaultAccept_photo');

                            if(i!==6){
                                var z = i+1;
                                var NextImgID = 'EngFaultAccept_photo_'+z;
                                console.log(NextImgID);
                                var NextImg = Ext.getCmp(NextImgID);
                                var NextImgSrc = Ext.getCmp(NextImgID).getSrc();
                                if(NextImgSrc=='resources/images/notPhoto.png' ){
                                    var IMGSHOW = true;
                                    for(var j=1;j<7;j++){
                                        var PID = 'EngFaultAccept_photo_'+j;
                                        var P = Ext.getCmp(PID);
                                        var PSrc = Ext.getCmp(PID).getSrc();
                                        if(PSrc==='resources/images/camera.png'){
                                            IMGSHOW = false;
                                        }

                                    }
                                    if(IMGSHOW){
                                    NextImg.setItemId('EngFaultAccept_camera');
                                    NextImg.setSrc('resources/images/camera.png');
                                    }
                                }
                            }

                            return;
                        }
                        }
                    }
            },//回调函数
            source:'CAMEAR',// 相机或相册，CAMEAR/ALBUM
            direction:'FRONT',// 前镜头或后镜头，FRONT/BACK
            width:640,	//width
            height:640 // height
        };
        phone.takePhoto(parm);*/
    },

    onEngFaultAccept_photoTap: function(image, e, eOpts) {
        //点击图片时进入另一页面显示图片
        console.log('----ImgID----');
        var ImgID = image.getId();
        console.log(ImgID);
        console.log('----ImgID----');
        viewUtil.goNext('Engineer.EngFaultPhoto',{ImgID:ImgID,flag:'N',NextImgId:'EngFaultAccept_photo_',fcname:'EngFaultAccept_camera'});
    },

    onEngFaultPhotoInitialize: function(component, eOpts) {

        var ImgID = component.initialConfig.parm.ImgID;
        var flag = component.initialConfig.parm.flag;
        var NextImgId = component.initialConfig.parm.NextImgId;
        var fcname = component.initialConfig.parm.fcname;
        console.log(flag);
        if(flag=='Y'){
            Ext.getCmp('FaultPhoto_BtnDel').setHidden(true);
        }
        Ext.getCmp('EngFaultPhoto_ImgID').setValue(ImgID);
        Ext.getCmp('NextImgId').setValue(NextImgId);
        Ext.getCmp('fcname').setValue(fcname);
        var ImgSrc = Ext.getCmp(ImgID).getSrc();
        console.log(ImgSrc);
        Ext.getCmp('EngFaultPhoto_show').setSrc(ImgSrc);

        //跟Panel注册左右滑动事件
        Ext.get('FaultPhoto_Panel').on('swipe', 'onFaultPhotoSwipe', this);



    },

    onFaultPhoto_BtnReturnTap: function(button, e, eOpts) {
        viewUtil.goLast();
    },

    onFaultPhoto_BtnDelTap: function(button, e, eOpts) {
        //删除该照片
        var ImgID = Ext.getCmp('EngFaultPhoto_ImgID').getValue();
        var NextImgId = Ext.getCmp('NextImgId').getValue();
        var fcname = Ext.getCmp('fcname').getValue();
        var fcname2 = NextImgId.substring(0,NextImgId.length-1);


        //判断是否存在相机照片
        var hasCamera = false;
        for(var i=1;i<7;i++){
            var imgID = NextImgId+i;
            var imgSrc = Ext.getCmp(imgID).getSrc();
            if(imgSrc==='resources/images/camera.png'){
                hasCamera = true;
            }
        }
        console.log(hasCamera);
        if(Ext.getCmp(ImgID)){
            if(hasCamera){
                Ext.getCmp(ImgID).setSrc('resources/images/notPhoto.png');
                Ext.getCmp(ImgID).setItemId();
            }else{
                Ext.getCmp(ImgID).setSrc('resources/images/camera.png');
                Ext.getCmp(ImgID).setItemId(fcname);
            }


            //冒泡排序
        for(var j=1;j<7;j++){
            for(var z=j+1;z<7;z++){
                var imgID2 = NextImgId+j;
                var imgSrc2 = Ext.getCmp(imgID2).getSrc();
                console.log(imgSrc2);
                if(imgSrc2!=='resources/images/camera.png' && imgSrc2!=='resources/images/notPhoto.png'){
                    continue;
                }else{
                    var imgID3 = NextImgId+z;
                    var imgSrc3 = Ext.getCmp(imgID3).getSrc();
                    if(imgSrc3!=='resources/images/camera.png' && imgSrc3!=='resources/images/notPhoto.png'){
                        Ext.getCmp(imgID2).setSrc(imgSrc3);
                        Ext.getCmp(imgID2).setItemId(fcname2);
                        Ext.getCmp(imgID3).setSrc(imgSrc2);
                        Ext.getCmp(imgID3).setItemId();
                    }
                }
            }
        }
                //冒泡排序
        for(var j=1;j<7;j++){
            for(var z=j+1;z<7;z++){
                var imgID2 = NextImgId+j;
                var imgSrc2 = Ext.getCmp(imgID2).getSrc();
                console.log(imgSrc2);
                if(imgSrc2!=='resources/images/camera.png' && imgSrc2!=='resources/images/notPhoto.png'){
                    continue;
                }else{
                    var imgID3 = NextImgId+z;
                    var imgSrc3 = Ext.getCmp(imgID3).getSrc();
                    if(imgSrc3==='resources/images/camera.png'){
                        Ext.getCmp(imgID2).setSrc(imgSrc3);
                        Ext.getCmp(imgID2).setItemId(fcname);
                        Ext.getCmp(imgID3).setSrc(imgSrc2);
                        Ext.getCmp(imgID3).setItemId();
                    }
                }
            }
        }

        }





        viewUtil.goLast();
    },

    onEnFaultAccept_photoXTap: function(image, e, eOpts) {
         //点击图片时进入另一页面显示图片
                console.log('----ImgID----');
                var ImgID = image.getId();
                console.log(ImgID);
                console.log('----ImgID----');
                viewUtil.goNext('Engineer.EngFaultPhoto',{ImgID:ImgID,flag:'Y',NextImgId:'EngFaultAccept_photo_',fcname:'EngFaultAccept_camera'});
    },

    onsource_camearTap: function(button, e, eOpts) {
        Ext.getCmp('camera_show').hide();
        console.log('-----进入相机');
        var parm = {
            callback :function(filename){
                for(var i=1;i<7;i++){
                    var ImgID = 'EngFaultAccept_photo_'+i;
                    var Img = Ext.getCmp(ImgID);
                    var ImgSrc = Ext.getCmp(ImgID).getSrc();

                    if(filename!==''){
                        if(ImgSrc==='resources/images/camera.png'||ImgSrc==='resources/images/notPhoto.png'){
                            Img.setSrc(filename);
                            Img.setItemId('EngFaultAccept_photo');

                            if(i!==6){
                                var z = i+1;
                                var NextImgID = 'EngFaultAccept_photo_'+z;
                                console.log(NextImgID);
                                var NextImg = Ext.getCmp(NextImgID);
                                var NextImgSrc = Ext.getCmp(NextImgID).getSrc();
                                if(NextImgSrc=='resources/images/notPhoto.png' ){
                                    var IMGSHOW = true;
                                    for(var j=1;j<7;j++){
                                        var PID = 'EngFaultAccept_photo_'+j;
                                        var P = Ext.getCmp(PID);
                                        var PSrc = Ext.getCmp(PID).getSrc();
                                        if(PSrc==='resources/images/camera.png'){
                                            IMGSHOW = false;
                                        }

                                    }
                                    if(IMGSHOW){
                                        NextImg.setItemId('EngFaultAccept_camera');
                                        NextImg.setSrc('resources/images/camera.png');
                                    }
                                }
                            }

                            return;
                        }
                    }
                }
            },//回调函数
            source:'CAMEAR',// 相机或相册，CAMEAR/ALBUM
            direction:'FRONT',// 前镜头或后镜头，FRONT/BACK
            width:640,	//width
            height:640 // height
        };
        phone.takePhoto(parm);
    },

    onsource_albumTap: function(button, e, eOpts) {
        Ext.getCmp('camera_show').hide();
        console.log('-----进入相册');
        var parm = {
            callback :function(filename){
                for(var i=1;i<7;i++){
                    var ImgID = 'EngFaultAccept_photo_'+i;
                    var Img = Ext.getCmp(ImgID);
                    var ImgSrc = Ext.getCmp(ImgID).getSrc();

                    if(filename!==''){
                        if(ImgSrc==='resources/images/camera.png'||ImgSrc==='resources/images/notPhoto.png'){
                            Img.setSrc(filename);
                            Img.setItemId('EngFaultAccept_photo');

                            if(i!==6){
                                var z = i+1;
                                var NextImgID = 'EngFaultAccept_photo_'+z;
                                console.log(NextImgID);
                                var NextImg = Ext.getCmp(NextImgID);
                                var NextImgSrc = Ext.getCmp(NextImgID).getSrc();
                                if(NextImgSrc=='resources/images/notPhoto.png' ){
                                    var IMGSHOW = true;
                                    for(var j=1;j<7;j++){
                                        var PID = 'EngFaultAccept_photo_'+j;
                                        var P = Ext.getCmp(PID);
                                        var PSrc = Ext.getCmp(PID).getSrc();
                                        if(PSrc==='resources/images/camera.png'){
                                            IMGSHOW = false;
                                        }

                                    }
                                    if(IMGSHOW){
                                        NextImg.setItemId('EngFaultAccept_camera');
                                        NextImg.setSrc('resources/images/camera.png');
                                    }
                                }
                            }

                            return;
                        }
                    }
                }
            },//回调函数
            source:'ALBUM',// 相机或相册，CAMEAR/ALBUM
            direction:'FRONT',// 前镜头或后镜头，FRONT/BACK
            width:640,	//width
            height:640 // height
        };
        phone.takePhoto(parm);
    },

    onSxReport_ListPartsTap: function(dataview, index, target, record, e, eOpts) {
        viewUtil.goNext('Engineer.EngFault_Parts',{record:record,index:index});
    },

    onEngFault_PartsInitialize: function(component, eOpts) {
        var taskrecord = component.initialConfig.parm.record;
        var index = component.initialConfig.parm.index;
        console.log(index+'____');

        if(taskrecord){
            Ext.getCmp('form_sxreport_parts').setRecord(taskrecord);
        }
        if(index!==undefined){
            Ext.getCmp('sxreportpart_index').setValue(index);
        }
    },

    doEngFault_InitialNextStateButton: function(button, index) {
        // 初始化处理按钮
        // 参数：按钮对象、按钮索引号
        var b = button.record.get('nextstate');
        if(!b) return;

        if(b[index]&&b[index].text!=='') {
            if(button.setHidden) {
                button.setHidden(false);
                button.setText(b[index].name);
            } else {
                button.hidden = false;
                button.text = b[index].name;
            }
        } else {
            if(button.setHidden) {
                button.setHidden(true);
            } else {
                button.hidden = true;
            }
        }
    },

    doEngFault_ShowDatePicker: function(textfield, fn) {
        // 新增受信 - 日期选择初始化
        var y = new Date().getFullYear();
        var items = [
            {
                text: '现在',
                handler: function() {
                    picker.setValueAnimated(new Date());
                }
            }];
        var picker = Ext.create('ux.DateTime',
                                {
                                    yearFrom: y - 1,
                                    yearTo: y + 1,
                                    doneButton: {
                                        text: '确定',
                                        handler: function() {
                                            textfield.setValue(
                                                Ext.Date.format(picker.getValue(),'Y-m-d H:i'));
                                            picker.hide();
                                            if(fn && typeof(fn)==='function') {
                                                fn();
                                            }
                                            picker.destroy();
                                        }
                                    },
                                    cancelButton: '取消',
                                    toolbar: {
                                        items : items
                                    }

                                });

        picker.setValue(Ext.Date.parse(textfield.getValue(), 'Y-m-d H:i', true));
        picker.getToolbar().setTitle(textfield.getLabel());

        Ext.Viewport.add(picker);
        picker.show();
    },

    doEngFault_Process: function(parm) {
        /* 故障处理入口
           参数{ record:故障待办记录, operationIndex:操作索引号(数字)/操作名(字符串), fn:回调函数，通常用于关闭故障详细信息页面 }
        */
        var me = this;
        var operation;
        var fn = parm.fn;
        var Redeployed_flg = '1';

        //传到后台的参数
        var userid = global.getUserId();//用户ID
        var trno = parm.record.get('trno');//故障授信单号
        var flag = '';//E 接收/F 拒绝/G 转派/H 完工/C 删除/T 退回/D 关闭
        var lon = '';//经度(接收,完工状态需填)
        var lat = '';//纬度(接收,完工状态需填)
        var addr = '';//地址(接收,完工状态需要填)
        var redeployed = [];//转派时需选择人员
        /*var redeployed = [{
            redeployuser: '',//转派人ID,
            redeploydeptid:'',//转派人部门,
            linkphone:'',//联系电话,
            usertype:'',//角色类型（0负责人，1维修人员，2实习生3:其他人员）

        }];*/
        var remark = '';//备注(退回需写退回原因)



        //判断从列表的按钮进入还是从查看或新建修改界面的按钮进入
        if(typeof(parm.operationIndex)==='string') {//列表进入
            operation = parm.operationIndex;
            Redeployed_flg = '0';
        } else {//查看或新建修改界面进入
            operation = parm.record.get('nextstate')[parm.operationIndex].name;
            Redeployed_flg = '1';
        }
        console.log(typeof(parm.operationIndex)+"......");

        //保存图片信息
        var picturesJSON = [];
        for(var i=1;i<7;i++){
            var ImgID = 'EngFaultAccept_photo_'+i;

            var Img = Ext.getCmp(ImgID);
            if(Img){
            var ImgSrc = Ext.getCmp(ImgID).getSrc();
            if(ImgSrc!=='resources/images/camera.png' && ImgSrc!=='resources/images/notPhoto.png'){
                console.log(ImgID);
                var pic = ImgSrc.split(',')[1];
                var picturesJSONSize = picturesJSON.length;
                var picIndex = picturesJSONSize+1;
                picturesJSON[picturesJSONSize]={
                    pic : pic,
                    remark	: '维修现场照片',
                    takeproject	: '维修现场照片',
                    picname	: trno+'_'+picIndex
                };
            }
            }
        }
        console.log(picturesJSON);

        switch(operation) {
            case "派工":
                viewUtil.goNext('Engineer.EngFaultAdd', {record: parm.record, action:'派工'});
                return;

            case "删除":
                //viewUtil.goNext('Engineer.EngFaultAdd', {record: parm.record, action:'关闭'});
                Ext.Msg.confirm("注意", "确认是否删除？", function(n) {
                    if(n=='no')return;
                    flag = 'C';
                    userid = global.getUserId();

                    var adapter_parm = {
                        userid : userid,
                        trno : trno,
                        flag : flag,
                        lon : lon,
                        lat : lat,
                        addr : addr,
                        redeployed : redeployed,
                        remark : remark

                    };
                    console.log('-------受信处理传给后台的参数 start--------');
                    console.log(adapter_parm);
                    console.log('-------受信处理传给后台的参数 end--------');
                    var store = dataUtil.createStore('sx_sxcl');
                    loadMask.show();
                    store.updateDat(
                        function() {
                            loadMask.hide();
                            Ext.toast(operation + '操作已完成！');

                            // 刷新故障待办列表
                            liftnet.app.getController('Engineer.EngHomeController').doEngHome_LoadTodoAll();
                            me.doEngFault_LoadFaultList(1,20,'','refresh');

                            if(fn) fn(); // 回调（关闭故障详细资料页面）
                        },
                        function(info) {
                            loadMask.hide();
                            if(!info) info = '(未知)';
                            Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                        },
                        adapter_parm
                    );

                });
                return;

            case "接收":
                flag = 'E';
                userid = global.getUserId();
                lon = map.getLocation().lng;
                lat = map.getLocation().lat;
                addr = map.getLocation().addr;
                reamrk = '手机端操作接收';
                remark = '手机端操作接收';
                break;

            case "退回":


                if(typeof(parm.operationIndex)=='number'){
                    viewUtil.goNext('Engineer.EngFaultAccept', {record: parm.record});
                    return;
                }else{
                    //填写退回原因
                    Ext.Msg.prompt('退回原因', null,
                        function(buttonId,value) {
                                if(buttonId=='ok'){
                                   if(value==''){
                                       Ext.toast('退回操作必须填写退回原因!');
                                       return;
                                   }
                                   var EngFaultAccept_remark = value;
                                   flag = 'T';
                                   userid = global.getUserId();
                                   t_remark = EngFaultAccept_remark;
                                   remark = EngFaultAccept_remark;

                                   var adapter_parm = {
                                        userid : userid,
                                        trno : trno,
                                        flag : flag,
                                        lon : lon,
                                        lat : lat,
                                        addr : addr,
                                        redeployed : redeployed,
                                        pictures : picturesJSON,
                                        remark : remark

                                    };
                                    console.log('-------受信处理传给后台的参数 start--------');
                                    console.log(adapter_parm);
                                    console.log('-------受信处理传给后台的参数 end--------');
                                    var store = dataUtil.createStore('sx_sxcl');
                                    loadMask.show();
                                    store.updateDat(
                                        function() {
                                            loadMask.hide();
                                            Ext.toast(operation + '操作已完成！');

                                            // 刷新故障待办列表
                                            liftnet.app.getController('Engineer.EngHomeController').doEngHome_LoadTodoAll();
                                            me.doEngFault_LoadFaultList(1,20,'','refresh');

                                            if(fn) fn(); // 回调（关闭故障详细资料页面）
                                        },
                                        function(info) {
                                            loadMask.hide();
                                            if(!info) info = '(未知)';
                                            Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
                                        },
                                        adapter_parm
                                    );
                                    return;

                                }else{
                                    return;
                                }
                            },
                            null,
                            true,
                            '' || '',
                            {
                                autoCapitalize: true,
                                placeHolder: '请输入退回原因',

                            }
                        );
                    return;
                    //var EngFaultAccept_remark = Ext.getCmp('EngFaultAccept_remark').getValue();
                    //console.log(EngFaultAccept_remark);
                    //if(EngFaultAccept_remark===''){
                    //    Ext.toast('退回操作必须填写退回原因!');
                    //    return;
                    //}else{
                    //    flag = 'T';
                     //   userid = global.getUserId();
                     //   t_remark = EngFaultAccept_remark;
                    //    remark = EngFaultAccept_remark;
                    //    break;
                    //}
                }
                break;

            case "完成":
                flag = 'H';
                userid = global.getUserId();
                lon = map.getLocation().lng;
                lat = map.getLocation().lat;
                addr = map.getLocation().addr;
                remark = '手机端操作完成';
                break;

            case "完工":
                flag = 'H';
                userid = global.getUserId();
                lon = map.getLocation().lng;
                lat = map.getLocation().lat;

                var AcceptMap_address = Ext.getCmp('AcceptMap_address');
                if(AcceptMap_address){
                    addr = AcceptMap_address.getHtml();
                }
                addr = addr;
                remark = '手机端操作完成';
                break;

            case "转派":	//跳转到选择维修人员界面
                viewUtil.goNext('Engineer.EngFaultRedeployed', {record: parm.record, action:operation,Redeployed_flg:Redeployed_flg});
                //this.doEngFault_LoadRedeployList();

                return;


           /* case "出发":
                tr.reamrk = '手机端操作出发';
                tr.remark = '手机端操作出发';
                break;

            case "到场":
                tr.reamrk = '手机端操作到场';
                tr.remark = '手机端操作到场';
                break;



            case "解困":
                tr.reamrk = '手机端操作解困';
                tr.remark = '手机端操作解困';
                break;

            case "拍照":
                var photo = global.loadPhoto('');
                adapter_parm.paizhao = [photo];
                break;

            case "扫描":
                adapter_parm.user = global.getUserId();
                return;
            */

            default:
                Ext.toast('未知的操作:' + operation);
                return;
        }

        var adapter_parm = {
            userid : userid,
            trno : trno,
            flag : flag,
            lon : lon,
            lat : lat,
            addr : addr,
            redeployed : redeployed,
            pictures : picturesJSON,
            remark : remark

        };
        console.log('-------受信处理传给后台的参数 start--------');
        console.log(adapter_parm);
        console.log('-------受信处理传给后台的参数 end--------');
        var store = dataUtil.createStore('sx_sxcl');
        loadMask.show();
        store.updateDat(
            function() {
                loadMask.hide();
                Ext.toast(operation + '操作已完成！');

                // 刷新故障待办列表
                liftnet.app.getController('Engineer.EngHomeController').doEngHome_LoadTodoAll();
                me.doEngFault_LoadFaultList(1,20,'','refresh');

                if(fn) fn(); // 回调（关闭故障详细资料页面）
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('未能完成' + operation + '操作，错误信息是：' + info);
            },
            adapter_parm
        );
    },

    doSxReportAdd_Process: function(action) {
        //受信状态为已接受时进入界面的故障报告按钮功能
        var me = this;
        var form = Ext.getCmp('form_sx_sxreport');
        var rp = form.getValues();
        var state ;

        console.log(action);
        switch(action){
            case '保存':
                state = '0';
                break;
            case '提交':
                state = '1';
                break;
            default:
                Ext.Msg.alert('注意', '未知操作:'+action, Ext.emptyFn);
                return;
        }


        //截取原因分析
        var report_analysisStr = Ext.getCmp('sxreport_analysisStr').getValue();
        var analysisJSON = [];
        if(report_analysisStr!==''){
            var AnalysisStrs = report_analysisStr.split('+');
            if(AnalysisStrs.length>0){
                for(var i=0;i<AnalysisStrs.length;i++){
                    analysisJSON[i] = {
                        faulttype: AnalysisStrs[i].split('_')[0],
                        faultcode: AnalysisStrs[i].split('_')[1],
                        faultanalysis: AnalysisStrs[i].split('_')[2],
                        ladder: AnalysisStrs[i].split('_')[3]
                    };
                }
                console.log('-------AnalysisStrs------');
                console.log(analysisJSON);
                console.log('-------AnalysisStrs------');
            }
        }

        //截取故障原因
        var report_reason = Ext.getCmp('sxreport_reasonStr').getValue();
        var reasonJSON = [];
        if(report_reason!==''){
            var Report_reason = report_reason.split('&');
            if(Report_reason.length>0){
                for(var i=0;i<Report_reason.length;i++){
                    reasonJSON[i] = {
                        reasonname: Report_reason[i]
                    };
                }
                console.log('-------reasonJSON------');
                console.log(reasonJSON);
                console.log('-------reasonJSON------');
            }
        }





        //检查必填项
        var fields = form.getFields();
        for(var name in fields) {
            field = fields[name];
            if(field.getRequired() && field.getValue()==='') {
                Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
                return;
            }
        }






        var trplist = [];
        var partsStore = Ext.getCmp('SxReport_ListParts').getStore();
        partsStore.getData().each(function(r) {
            trplist.push({
                materialsname: r.get('materialsname'),
                materialsnum: r.get('materialsnum'),
                model: r.get('model'),
                prices:	r.get('prices'),
                remark:	r.get('remark')
            });
        });
        rp.partslist = trplist;

        rp.dealresult = '';//处理结果
        rp.trcontent = '';//受信内容
        rp.rpuser = global.getUserId();//报告人
        rp.rptime = Ext.Date.format(new Date(), 'Y-m-d H:i');//报告时间
        rp.createby = global.getUserId();//创建人

        rp.reason=reasonJSON;
        rp.analysis=analysisJSON;

        var parm = {
            userid: global.getUserId(),
            state: state,
            rp: rp
        };


        console.log('--------故障报告传去后台的数据---------------');
        console.log(parm);
        console.log('--------故障报告传去后台的数据---------------');

        var store = dataUtil.createStore('sx_rpscens');
        loadMask.show();
        store.updateDat(
            function(tpno) {
                loadMask.hide();
                if(tpno) {
                    Ext.toast(action + '操作完成！单号是：' + tpno);
                } else {
                    Ext.toast(action + '操作完成！');
                }

                // 刷新故障待办列表
                liftnet.app.getController('Engineer.EngHomeController').doEngHome_LoadTodoAll();
                me.doEngFault_LoadFaultList(1,20,'','refresh');
                viewUtil.goLast();
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('未能完成' + action + '操作，错误信息是：' + info);
            },
            parm
        );
    },

    doEngFaultAdd_Process: function(action) {
        // 受信单操作 - 新建/修改/派工/关闭
        var me = this;
        var form = Ext.getCmp('EngFaultAdd_Form');
        var tr = form.getValues();

        // 派工标志
        switch(action) {
            case '新建':
            case '保存':
                tr.state = '1';
                break;
            case '确认':
                if(!tr.assignuser || tr.assignuser==='') {
                    Ext.Msg.alert('注意', '[提交]操作必须选择维修人员！', Ext.emptyFn);
                    return;
                }
                tr.state = '2';
                break;
            case '转派':
                if(!tr.assignuser || tr.assignuser==='') {
                    Ext.Msg.alert('注意', '[转派]操作必须选择维修人员！', Ext.emptyFn);
                    return;
                }
                tr.isapprove = 'Y';
                break;
            case '关闭':
                tr.isapprove = 'N';
                if(tr.remark) {
                    tr.t_remark = tr.remark;
                } else {
                    tr.t_remark = '手机端关闭';
                }
                break;
            case '删除':
                tr.t_rematk = '手机端删除';
                break;

            default:
                Ext.Msg.alert('注意', '未知操作:'+action, Ext.emptyFn);
                return;

        }



        // 检查必填项目
        var fields = form.getFields();
        for(var name in fields) {
          field = fields[name];
           console.log(field.getLabel() + ':' + field.getRequired() + ',' + field.getValue());
          if(field.getRequired() && field.getValue()==='') {
              Ext.Msg.alert('注意', '必须填写"' + field.getLabel() + '"', Ext.emptyFn);
              return;
          }else if(name==='reportortel'){//检测电话
                if(field.getValue()!='' && !global.isTelNo(field.getValue())) {
                    field.suspendEvents();
                    Ext.toast('电话号码格式不正确！');
                    field.resumeEvents(false);
                    return;
                }
          }
        }


        if(tr.isrunning===0){
            tr.isrunning='N';
        }else if(tr.isrunning===1){
            tr.isrunning='Y';
        }

        var assignuserJSON = [];
        var assignuser = tr.assignuser;
        var assignuserStr = tr.assignuserStr;
        console.log('assignuser:___'+assignuser);

        if(assignuserStr!==''&&assignuser!==''){
            var assignusers = assignuser.split(',');
            for(var i=0;i<assignusers.length;i++){
                var Assignuser = assignusers[i];
                var result = Assignuser.split('_');
                assignuserJSON[i]={
                    userid: result[0],
                    storageid: result[1],
                    linkphone: result[2],
                    usertype: result[3]
                };
            }
        }

        console.log(assignuserJSON);

        tr.assignuser = assignuserJSON;


        tr.operid = global.getUserId();//受信起草人
        tr.reportordate = Ext.Date.format(new Date(), 'Y-m-d H:i');//来电时间
        tr.unitname = tr.projectname;//保修单位名(取项目名)
        tr.repairaddress = tr.projectaddress;//保修地址(取项目地址)
        tr.calloutfaulttypeid = '';//故障分类给空
        tr.userid = global.getUserId();//当前人
        tr.repairunitphone = tr.reportortel;//保修单位电话(取来电人电话)


        //tr.lon = map.getLocation().lng;
        //tr.lat = map.getLocation().lat;

        var parm = {
            userid: global.getUserId(),
            tr: tr
        };
        console.log(parm);
        var store = dataUtil.createStore('sx_sxscens');
        loadMask.show();
        store.updateDat(
            function(trno) {
                loadMask.hide();
                if(trno) {
                    Ext.toast(action + '操作完成！单号是：' + trno);
                } else {
                    Ext.toast(action + '操作完成！');
                }

                // 刷新故障待办列表
                liftnet.app.getController('Engineer.EngHomeController').doEngHome_LoadTodoAll();
                me.doEngFault_LoadFaultList(1,20,'','refresh');
                viewUtil.goLast();
            },
            function(info) {
                loadMask.hide();
                if(!info) info = '(未知)';
                Ext.toast('未能完成' + action + '操作，错误信息是：' + info);
            },
            parm
        );
    },

    doEngFault_LoadFaultList: function(page, pagesize, searchkey, action, scrollparm) {
        // 故障业务标签页 - 热线受信列表刷新
        /*var date1 = Ext.getCmp('EngFault_date1').getValue();
        var date2 = Ext.getCmp('EngFault_date2').getValue();
        if(!date1 || !date2) {
            return;
        }
        date1 = Ext.Date.format(new Date(date1), 'Y-m-d');
        date2 = Ext.Date.format(new Date(date2), 'Y-m-d');*/
        //var Enfault_Search = Ext.getCmp('Enfault_Search').getValue();
        if(Ext.getCmp('EngFault_ListHotline')){

        var state = '';

        if(Ext.getCmp('Enfault_button')){
            var stateT = Ext.getCmp('Enfault_button').getText();
            switch(stateT){
                case '全部':
                    state='%';
                    break;
                case '新建':
                    state='0';
                    break;
                case '未接收':
                    state='201';
                    break;
                case '维修中':
                    state='202';
                    break;
                case '已退回':
                    state='104';
                    break;
                case '完工':
                    state='401';
                    break;
                case '关闭':
                    state='103';
                    break;
            }
        }else{
            state = '%';
        }


        Ext.getCmp('EngFault_ListHotline').getStore().loadDat(
            function(n,jurisdiction) {
                // 设置角标
                /*
                var task = Ext.create('Ext.util.DelayedTask', function() {
                        Ext.getCmp('EngFault_CtnFaultList').setBadgeText(n>0? ' ':'');
                    }, this);
                task.delay(1000);
                task.cancel();
                */
                //if(n===0) Ext.toast('没有符合条件的故障数据!');
                if(scrollparm){
                     scrollparm.scroller.scrollTo(scrollparm.x,(n-1)*scrollparm.faultCurPage*95);
                     loadMask.hide();
                }
                if(n==='resetCurPage'){
                    faultCurPage = 1;
                }

                var addjurisdiction = jurisdiction.addjurisdiction=='N';//新建权限
                Ext.getCmp('EngFault_BtnAdd').setHidden(addjurisdiction);


                console.log('故障列表搜索完成!');
            },
            function(info) {
                Ext.toast(info);
                if(info==='加载更多故障受信数据失败'){
                    faultCurPage--;
                }
        //         if(faultCurPage!=1){
        //              faultCurPage--;//获取数据失败页数减一
        //         }
                loadMask.hide();
            },
            {
                userid: global.getUserId(),
                workstardate: '1970-01-01',
                workenddate: '2200-01-01',
                curpagenum:page,
                pagesize:pagesize,
                searchkey:searchkey,
                state:state
            },
            action
        );
        }
         //Ext.getCmp('EngFault_ListHotline').getStore().filteDat(Enfault_Search);
    },

    doEngFault_LoadReportList: function(page, pagesize, searchkey, action, scrollparm) {

        var state = '';

        if(Ext.getCmp('EngReport_Button')){
        var stateT = Ext.getCmp('EngReport_Button').getText();
        switch(stateT){
            case '全部':
                state='%';
                break;
            case '新建':
                state='0';
                break;
            case '待审':
                state='1';
                break;
            case '通过':
                state='3';
                break;
            case '不通过':
                state='4';
                break;
        }
        }else{
            state = '%';
        }
        console.log('-----state----'+state);

        if(Ext.getCmp('EngFault_ListReport')){
        Ext.getCmp('EngFault_ListReport').getStore().loadDat(
            function(n) {
                if(scrollparm){
                     scrollparm.scroller.scrollTo(scrollparm.x,scrollparm.y);
                     loadMask.hide();
                }
                if(n==='resetCurPage'){
                    reportCurPage = 1;
                }
        //         if(n===0) Ext.toast('没有符合条件的故障报告书数据!');
                console.log('故障报告书列表搜索完成!');
            },
            function(info) {
                Ext.toast(info);
                if(info==='加载更多故障报告数据失败'){
                    reportCurPage--;
                }
                if(info==='没有更多数据！'){
                    reportCurPage = 0;//没有更多数据的时候重置页数为0，不触发上拉事件
                }
        //         if(reportCurPage!=1){
        //              reportCurPage--;//获取数据失败页数减一
        //         }
                loadMask.hide();
        //         Ext.toast('暂时未能获取故障报告书列表!');
            },
            {
                userid: global.getUserId(),
                startrptime: '1970-01-01',
                endrptime: '2200-01-01',
                curpagenum:page,
                pagesize:pagesize,
                searchkey:searchkey,
                state:state
            },
            action
        );
        }
    },

    doEngFault_LoadRedeployList: function() {

                        Ext.getCmp('EngFaultRedeployed_List').getStore().loadDat(
                            function(n) {

                                console.log('故障列表搜索完成!');
                            },
                            function() {
                                Ext.toast('暂时未能获取故障列表!');
                            },
                            {
                                userid: global.getUserId(),
                                workstardate: '',
                                workenddate: ''
                            }
                        );
    },

    doEngFault_AcceptMap: function(id, p) {
         // 实时监控-地图
                Ext.getCmp(id)
                .setSrc('http://api.map.baidu.com/staticimage/v2?ak=64048452fca8dd67eabb72ff5b4dd0ac'+
                       '&markers='+p.lng+','+p.lat+
                       '&center='+p.lng+','+p.lat+'&height=100&zoom=15');

                var geoc = new BMap.Geocoder();
                geoc.getLocation(
                    new BMap.Point(p.lng, p.lat),function(result){
                        console.log(result);
                //         result.surroundingPois
                        if(Ext.getCmp('AcceptMap_address')){
                            Ext.getCmp('AcceptMap_address').setHtml(result.address);
                        }
                        if(Ext.getCmp('AcceptMap_lng')){
                            Ext.getCmp('AcceptMap_lng').setValue(result.point.lng);
                        }
                        if(Ext.getCmp('AcceptMap_lat')){
                            Ext.getCmp('AcceptMap_lat').setValue(result.point.lat);
                        }
                    }
                 );

    },

    doEngFault_ResetReportCurPage: function() {
        reportCurPage = 1;
    },

    doEngFaultFilter: function(filterStr) {
        // 故障授信 - 选择状态后执行搜索
        popMenu.getShowBy().setText(filterStr);
        popMenu.hide();
        this.doEngFault_LoadFaultList(1,20,'','refresh');
    },

    doEngFaultReportFilter: function(filterStr) {
        // 故障报告 - 选择状态后执行搜索
        popMenu.getShowBy().setText(filterStr);
        popMenu.hide();
        this.doEngFault_LoadReportList(1,20,'','refresh');
    },

    onFaultPhotoSwipe: function(e, target, options, eOpts) {
        var Img_Now = Ext.getCmp('EngFaultPhoto_ImgID').getValue();
        var Img_Now_IdStr = Img_Now.substring(0,Img_Now.length-2);
        var Img_Now_IdNum = Img_Now.split('_')[2];


        var Img_New_Src = '';

        if (e.direction === 'left' && e.distance >= 20) {
            if(Img_Now_IdNum=='6'){
                console.log('11');
                Ext.toast('没有下一张照片!');
            }else{
                var Img_ID = Number(Img_Now_IdNum)+1;
                for(var i=Img_ID;i<7;){
                    var Img_New = Ext.getCmp(Img_Now_IdStr+'_'+Img_ID);
                    if(Img_New){
                        var Img_Src = Img_New.getSrc();
                        if(Img_Src!=='resources/images/camera.png' && Img_Src!=='resources/images/notPhoto.png'){
                            Img_New_Src = Img_Src;
                            break;
                        }else{
                            i++;
                        }
                    }else{
                        i++;
                    }
                }

                if(Img_New_Src!==''){
                    Ext.getCmp('EngFaultPhoto_show').setSrc(Img_New_Src);
                    Ext.getCmp('EngFaultPhoto_ImgID').setValue(Img_Now_IdStr+'_'+Img_ID);
                }else{
                    Ext.toast('没有下一张照片!');
                }

            }

            console.log('move left');
        } else if (e.direction === 'right' && e.distance >= 20) {
            if(Img_Now_IdNum=='1'){
                Ext.toast('没有上一张照片!');
            }else{
                var Img_ID = Img_Now_IdNum-1;
                for(var i=Img_ID;i>0;){
                    var Img_New = Ext.getCmp(Img_Now_IdStr+'_'+Img_ID);
                    if(Img_New){
                        var Img_Src = Img_New.getSrc();
                        if(Img_Src!=='resources/images/camera.png' && Img_Src!=='resources/images/notPhoto.png'){
                            Img_New_Src = Img_Src;
                            break;
                        }else{
                            i--;
                        }
                    }else{
                        i--;
                    }
                }

                if(Img_New_Src!==''){
                    Ext.getCmp('EngFaultPhoto_show').setSrc(Img_New_Src);
                    Ext.getCmp('EngFaultPhoto_ImgID').setValue(Img_Now_IdStr+'_'+Img_ID);
                }else{
                    Ext.toast('没有上一张照片!');
                }

            }

            console.log('move right');
        }

    }

});